<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OceanDB小结</title>
    <url>/2017/11/13/Aliyun-oceanDB/</url>
    <content><![CDATA[<h2 id="阿里自研的分布式关系型数据库"><a href="#阿里自研的分布式关系型数据库" class="headerlink" title="阿里自研的分布式关系型数据库"></a>阿里自研的分布式关系型数据库</h2><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul>
<li>支持SQL92和高度兼容Mysql，有一个类似mysql的sql语法，但是有一些限制。</li>
<li>多个副本，分布在多区域，可抵御单机、机架及机房故障。</li>
<li>准内存数据库。</li>
<li>底层Paxos协议，通过3个以上节点投票保持数据强一致。</li>
<li>支持<strong>跨行跨表事务</strong></li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>db, aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>Aliyun OSS 小结</title>
    <url>/2017/11/14/aliyun-oss/</url>
    <content><![CDATA[<h2 id="OSS的原理"><a href="#OSS的原理" class="headerlink" title="OSS的原理"></a>OSS的原理</h2><p>对象存储将数据当成对象, 可以通过对对象的HTTP verb进行增删改查操作. oss的bucket是一个平铺的大文件夹(看起来你可以像传统文件系统那样有目录层级,但是实际上是平的),里面存储的文件名可以当成key, 文件为value, 这样仿佛oss又是一个键值对存储,但是有微小的差别: oos还可以有元属性, 存储大数据有优化但不保证数据强一致性.  </p>
<h3 id="块存储和对象存储的比较"><a href="#块存储和对象存储的比较" class="headerlink" title="块存储和对象存储的比较"></a>块存储和对象存储的比较</h3><p>块存储是把数据存在存储介质上, 存储介质以 <strong>块</strong> 的形式(比如一块是512B)将数据分割存储. 而对象存储是将数据当成一个对象. 它们的区别可以在更新文件时清楚看到, 当更新一个文件的一行数据时, 块存储只会更新那一行数据存在的某一块, 而对象存储是更新整个文件; 同时块存储是服务器,操作系统紧紧耦合关系, 而对象存储是一个单独的可以通过API控制的服务.</p>
<h3 id="对象存储和文件存储的比较"><a href="#对象存储和文件存储的比较" class="headerlink" title="对象存储和文件存储的比较"></a>对象存储和文件存储的比较</h3><p>对象存储和文件系统在接口上的本质区别是对象存储不支持和fread和fwrite类似的随机位置读写操作，即一个文件PUT到对象存储里以后，如果要读取，只能GET整个文件，如果要修改一个对象，只能重新PUT一个新的到对象存储里，覆盖之前的对象或者形成一个新的版本。</p>
<h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ul>
<li>冷备份恢复读取需要1分钟</li>
<li>上传5G的数据需要采用断点续传，但不能大于48.8TB</li>
<li><strong>上传同名文件会覆盖原有文件</strong></li>
<li>删除文件无法恢复</li>
</ul>
]]></content>
      <categories>
        <category>storage</category>
      </categories>
      <tags>
        <tag>oss, aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>Customer Experience</title>
    <url>/2017/12/06/customer-experience/</url>
    <content><![CDATA[<h3 id="What-is-customer-experience"><a href="#What-is-customer-experience" class="headerlink" title="What is customer experience?"></a>What is customer experience?</h3><ul>
<li>Information architecture </li>
<li>to a user, the interface is <strong>the system</strong></li>
<li>what is persona？</li>
</ul>
<h3 id="method-workflow"><a href="#method-workflow" class="headerlink" title="method workflow"></a>method workflow</h3><ul>
<li>pre-discovery<ul>
<li>internal analysis</li>
<li>stakeholder interview</li>
</ul>
</li>
<li>discovery<ul>
<li>user interview</li>
<li>contextual analysis</li>
<li>competive analysis</li>
<li>adjacent experience</li>
</ul>
</li>
<li>audience analysis<ul>
<li>validate design guide</li>
<li>pain points</li>
<li>user journey</li>
</ul>
</li>
<li>UX design for 3 rounds<ul>
<li>Information Architecture</li>
<li>interation architure</li>
<li>global navigation</li>
</ul>
</li>
<li>Visual design for 3 rounds<ul>
<li>color</li>
<li>control display systems</li>
<li>visual order</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Git如何同步fork的仓库</title>
    <url>/2017/12/14/%E5%90%8C%E6%AD%A5Forked%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>实际工作可能需要fork别人的代码另做开发，但是又有需求希望同步源仓库的更新。以下实例将演示如何同步源仓库代码。</p>
<h3 id="Mac-Linux-windows通用"><a href="#Mac-Linux-windows通用" class="headerlink" title="Mac, Linux, windows通用"></a>Mac, Linux, windows通用</h3><ul>
<li><p>首先需要配置git remote 到源仓库</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">blockchain git:(f03d28f) ✗ git remote -v</span><br><span class="line">origin	https://github.com/dvf/blockchain (fetch)</span><br><span class="line">origin	https://github.com/dvf/blockchain (push)</span><br><span class="line">blockchain git:(f03d28f) ✗ git remote add upstream https://github.com/dvf/blockchain</span><br><span class="line">blockchain git:(f03d28f) ✗ git remote -v</span><br><span class="line">origin	https://github.com/dvf/blockchain (fetch)</span><br><span class="line">origin	https://github.com/dvf/blockchain (push)</span><br><span class="line">upstream	https://github.com/dvf/blockchain (fetch)</span><br><span class="line">upstream	https://github.com/dvf/blockchain (push)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>拉取原仓库更新的提交</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">blockchain git:(f03d28f) ✗ git fetch upstream</span><br><span class="line">remote: Counting objects: 77, done.</span><br><span class="line">remote: Total 77 (delta 23), reused 24 (delta 23), pack-reused 53</span><br><span class="line">Unpacking objects: 100% (77/77), done.</span><br><span class="line">From https://github.com/dvf/blockchain</span><br><span class="line"> [new branch]      dvf/bug-fix  -&gt; upstream/dvf/bug-fix</span><br><span class="line"> [new branch]      dvf/hash-fix -&gt; upstream/dvf/hash-fix</span><br><span class="line"> [new branch]      dvf/tests    -&gt; upstream/dvf/tests</span><br><span class="line"> [new branch]      master       -&gt; upstream/master</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>切换到本地master</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">blockchain git:(f03d28f) ✗ git checkout master</span><br><span class="line">M	blockchain.py</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is up-to-date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br></pre></td></tr></table></figure></div></li>
<li><p>合并upstream&#x2F;master到local master</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">blockchain git:(master) git merge upstream/master</span><br><span class="line">Updating f03d28f..4010cf3</span><br><span class="line">Fast-forward</span><br><span class="line"> .gitattributes                                       |  63 +++++++++++++++</span><br><span class="line"> .travis.yml                                          |  12 +++</span><br><span class="line"> README.md                                            |   2 +</span><br><span class="line"> blockchain.py                                        |  22 +++---</span><br><span class="line"> csharp/BlockChain.Console/App.config                 |  10 +++</span><br><span class="line"> csharp/BlockChain.Console/BlockChain.Console.csproj  |  63 +++++++++++++++</span><br><span class="line"> csharp/BlockChain.Console/Program.cs                 |  12 +++</span><br><span class="line"> csharp/BlockChain.Console/Properties/AssemblyInfo.cs |  36 +++++++++</span><br><span class="line"> csharp/BlockChain.sln                                |  43 ++++++++++</span><br><span class="line"> csharp/BlockChain/Block.cs                           |  19 +++++</span><br><span class="line"> csharp/BlockChain/BlockChain.cs                      | 226 +++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"> csharp/BlockChain/BlockChain.csproj                  |  73 +++++++++++++++++</span><br><span class="line"> csharp/BlockChain/Node.cs                            |   9 +++</span><br><span class="line"> csharp/BlockChain/Properties/AssemblyInfo.cs         |  36 +++++++++</span><br><span class="line"> csharp/BlockChain/Transaction.cs                     |   9 +++</span><br><span class="line"> csharp/BlockChain/WebServer.cs                       |  78 ++++++++++++++++++</span><br><span class="line"> csharp/BlockChain/packages.config                    |   5 ++</span><br><span class="line"> tests/__init__.py                                    |   0</span><br><span class="line"> tests/test_blockchain.py                             | 104 ++++++++++++++++++++++++</span><br><span class="line"> 19 files changed, 811 insertions(+), 11 deletions(-)</span><br><span class="line"> create mode 100644 .gitattributes</span><br><span class="line"> create mode 100644 .travis.yml</span><br><span class="line"> create mode 100644 csharp/BlockChain.Console/App.config</span><br><span class="line"> create mode 100644 csharp/BlockChain.Console/BlockChain.Console.csproj</span><br><span class="line"> create mode 100644 csharp/BlockChain.Console/Program.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain.Console/Properties/AssemblyInfo.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain.sln</span><br><span class="line"> create mode 100644 csharp/BlockChain/Block.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain/BlockChain.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain/BlockChain.csproj</span><br><span class="line"> create mode 100644 csharp/BlockChain/Node.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain/Properties/AssemblyInfo.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain/Transaction.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain/WebServer.cs</span><br><span class="line"> create mode 100644 csharp/BlockChain/packages.config</span><br><span class="line"> create mode 100644 tests/__init__.py</span><br><span class="line"> create mode 100644 tests/test_blockchain.py</span><br></pre></td></tr></table></figure></div></li>
<li><p>看一下git branch tree</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/git-fork-upstream.png"
                      alt="alt"
                ></p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>冬季嵊泗3日游行程安排</title>
    <url>/2017/12/26/%E5%B5%8A%E6%B3%97%E8%A1%8C%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Day-One"><a href="#Day-One" class="headerlink" title="Day One"></a>Day One</h3><ul>
<li>9：30AM出发， 上海黄浦区旅游集散中心，外马路1588号。 四号线1号口出来就是。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/tourist_center.png"
                      alt="alt"
                ></li>
<li>下午1点到李柱山码头，打车到酒店，预计50元。地址：菜园镇金沙路101号。记得领取酒店免费两张基湖沙滩门票<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/hotel.png"
                      alt="alt"
                ></li>
<li>吃中饭， 可以在700米附近的大排档，也可以在酒店</li>
<li>下午时间多可以去大悲山和东海渔村，坐公交，菜园-五龙线。时间少可以在基湖沙滩看日落。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/dabeishan.png"
                      alt="alt"
                ></li>
<li>晚饭在酒店附近吃排档。</li>
<li>本岛巴士<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/bus.png"
                      alt="alt"
                ></li>
<li>微信预订船票到花鸟岛, 但是不能预订从小花园到花鸟的船票。</li>
<li>注意天气情况，风大可能无法出船！</li>
</ul>
<h3 id="Day-Two"><a href="#Day-Two" class="headerlink" title="Day Two"></a>Day Two</h3><ul>
<li>早上6点起，酒店早饭，7：30赶到菜园码头开船到花鸟岛，9点到达。14点返回本岛。15：30到菜园码头。<ul>
<li>码塔线，从码头开始一直到<strong>花鸟灯塔</strong>全长约5公里</li>
<li>午饭在路上解决<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/huaniao.png"
                      alt="alt"
                ></li>
</ul>
</li>
<li>逛一下菜园镇，然后到大悲山（如果第一没去）或者基湖沙滩。</li>
<li>返回酒店</li>
</ul>
<h3 id="Day-Three"><a href="#Day-Three" class="headerlink" title="Day Three"></a>Day Three</h3><ul>
<li>4点起床，到六井谭看2018年第一缕日出，然后和尚景区，南长涂。镇上吃完中饭，打道回府。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/liujingtan.png"
                      alt="alt"
                ></li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>必带物品<ul>
<li>手套，围巾，帽子等御寒防风物品</li>
<li>可带暖宝宝</li>
</ul>
</li>
<li>可带<ul>
<li>铲子</li>
<li>水桶</li>
<li>鱼竿</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>SED and AWK</title>
    <url>/2018/04/02/sed-and-awk/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SED和AWK都是平时会用的Linux命令，正好看到NYU的一个PPT, 觉得不错，做一下总结。</p>
<h2 id="SED"><a href="#SED" class="headerlink" title="SED"></a>SED</h2><p>sed是一个流式、非交互的文本编辑器。类似grep, sed会读取一行文本然后查找一个pattern模板,再根据匹配与否做相应的动作。sed是可以改变文件内容的。<br>sed作为非交互文本编辑器需要以脚本执行命令，有一个叫ed的交互式编辑器可以执行相同的命令。sed也可以认为是一个unix过滤器（如果不改变原输入）。<br>所有的sed指令会在每一行执行，如果某一行执行了一行命令，后续还有命令会在这个改变的行继续执行指令。</p>
<ul>
<li>优点：正则、快速、简洁</li>
<li>缺点：难以记忆、不能回退、不能前向引用、不能处理数字、语法笨拙</li>
</ul>
<h3 id="sed脚本结构"><a href="#sed脚本结构" class="headerlink" title="sed脚本结构"></a>sed脚本结构</h3><p><code>[address[,address]][!]command[arguments]</code><br>sed脚本由一些命令组成，每一个命令由最多两个可选地址（address)和一个指令action组成, 如上所示（多个action可以用{}包住）。当一行输入时，sed读取一行命令，把它存入 <em>pattern space</em> 检查address是否匹配当前行，如果满足就会执行指令，(如果没有address,命令会在每行执行).如果不满足就直接跳到下一行命令。<br>当某一行执行完所有命令，sed就会把当前处理过的行输出（处理过的行在pattern space里）。然后再读取下一行，循环执行命令直到文件最后一行。</p>
<h3 id="address"><a href="#address" class="headerlink" title="address"></a>address</h3><p>一个address可以是一个行号或者pattern模式(&#x2F;pattern&#x2F;), 如果是pattern那么它必须是正则表达式(basic regular expression)。<code>$</code>指最后一行。<br>如果有两个address, 那么命令会在这两个address之间执行（包括这两行）。可以使用！取反操作。<code>address!action</code></p>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>sed的指令是一个单独的字母[s,a,i,c,d,p,y,q]。下面是一些例子：</p>
<ul>
<li>6d #删除第六行</li>
<li>&#x2F;$^&#x2F;d #删除所有空行</li>
<li>1,10d #删除1-10行（含）</li>
<li>1，&#x2F;^$&#x2F;d  #删除第一行以下的所有空行</li>
<li>&#x2F;^$&#x2F;,$d  #删除第一个空行到结尾</li>
<li>&#x2F;^ya*y&#x2F;,&#x2F;[0-9]$&#x2F;d # 把yay, yaay,yaaay等，并且以数字结尾的行删除。<br>但使用多个指令时，有一些语法要求，如下。第左括号必须是行结尾，右括号必须是单行结尾。<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[/pattern/[,/pattern]]&#123;</span><br><span class="line">  action1</span><br><span class="line">  action2</span><br><span class="line">  action3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li><strong>打印</strong> <code>[address[,address]]p</code>用来打印pattern space的内容，可以配合<code>-n</code>使用，如果不指定<code>-n</code>, 但是指定p,结果会打印两次！</li>
<li><strong>替换</strong><code>[address(es)]s/pattern/replacement/[flags]</code>, <code>flags</code>可以是[n,g,p],n代表替换几次，g代表pattern space中的全局替换,p代表打印.<br>sed的replacement可以使用几个特殊字符：<ul>
<li><code>&amp;</code>代表所有在pattern中匹配的文本部分，用这个<code>&amp;</code>就可以在replacement中引用pattern中匹配的部分。比如：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># user=&amp;uidX</span><br><span class="line">sed -e &#x27;s/user=&amp;uid/user=&amp;sysuserid./g&#x27;</span><br><span class="line">user=user=&amp;uidsystemid.X</span><br></pre></td></tr></table></figure></div></li>
<li><code>\n</code>代表了在pattern中<code>\(</code>,<code>\)</code>中匹配的部分，用<code>\n</code>可以在replacement中使用。</li>
<li>替换例子：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;the UNIX operating system ...&quot;</span><br><span class="line">s/.NI./wonderful &amp;/</span><br><span class="line">&quot;the wonderful UNIX operating system ...&quot;</span><br><span class="line">---</span><br><span class="line">cat test1</span><br><span class="line">first:seconde</span><br><span class="line">one:two</span><br><span class="line">sed &#x27;s/\(.*\):\(.*\)/\2:\1/&#x27; test1</span><br><span class="line">seconde:fisrt</span><br><span class="line">two:one</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><strong>叠加</strong> <strong>插入</strong> <strong>修改</strong> 这三者的语法类似，需要更新的文本写在语句第二行. insert是在pattern space前面插入文本，<br>append是在pattern space后面增加文本<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[address]a\   #append</span><br><span class="line">test  </span><br><span class="line">[address]i\   #insert</span><br><span class="line">test</span><br><span class="line">[address(es)]c\   #change</span><br><span class="line">test</span><br></pre></td></tr></table></figure></div>
<ul>
<li>insert例子<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/&lt;Insert Text Here&gt;/i\</span><br><span class="line">Line 1 of inserted text\</span><br><span class="line">\        Line 2 of inserted text</span><br><span class="line"></span><br><span class="line">Line 1 of inserted text</span><br><span class="line">             Line 2 of inserted text</span><br><span class="line">&lt;Insert Text Here&gt;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><code>y</code>是sed的逐字替换，<code>[address[,address]]y/abc/xyz</code></li>
<li><code>q</code>是退出读取新的行，<code>sed &#39;110q&#39; filename</code>读取110行</li>
</ul>
<h3 id="hold-space"><a href="#hold-space" class="headerlink" title="hold space"></a>hold space</h3><p>sed的临时交换空间</p>
<h3 id="sed语法"><a href="#sed语法" class="headerlink" title="sed语法"></a>sed语法</h3><p><code>sed [-n][-e][&#39;command&#39;][file...]</code><br><code>sed [-n][-f scriptfile][file...]</code><br><code>-n</code>只打印print命令指定的内容。<code>-e</code>后面跟command, 可以多条<code>-e</code>用于指定多个command, <code>-f</code>后面指定脚本，在脚本的第一行使用<code>#n</code>, 等同于<code>-n</code><br><code>-i</code>直接在原输入文件做修改。</p>
<h3 id="sed的特殊字符"><a href="#sed的特殊字符" class="headerlink" title="sed的特殊字符"></a>sed的特殊字符</h3><p>sed中<code>$.*[\]^</code>必须转义，除非这些字符在[…]中，而<code>()&#123;&#125;+?|</code>有特殊的作用，转义的话就变成特殊用法了。如果需要插入环境变量，sed的命令需要使用 <strong>双引号</strong>。</p>
<h2 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h2><p>awk是三个发明者的名字首字母, awk的发明是为了提供一个可编程的过滤器来处理文本和数字，awk是一种<br><strong>pattern-action</strong> 语言，这点和sed一样。但是和sed处理行不同，awk处理的是字段。(当然它们输入都是读取一行)<br>nawk是awk的新标准，用于大型awk程序，gawk是nawk的GNU版本。awk可以从文件、<br>重定向、pipe和标准输入建立输入。awk的语言有点像C,但是会自动处理输入，字段分割，初始化内存和管理。<br>数据类型支持字符串和数字，不需要变量类型声明。awk是一个非常优秀的原型语言，你可以一行一行加上程序逻辑直到满足需求。</p>
<h3 id="awk比sed好的地方"><a href="#awk比sed好的地方" class="headerlink" title="awk比sed好的地方"></a>awk比sed好的地方</h3><ul>
<li>方便数字处理</li>
<li>变量和控制流</li>
<li>方便找到行中的字段</li>
<li>灵活的打印功能print</li>
<li>内置算数和字符函数</li>
<li>类C语法</li>
</ul>
<h3 id="awk的语法结构"><a href="#awk的语法结构" class="headerlink" title="awk的语法结构"></a>awk的语法结构</h3><p>awk的语法由三部分组成：</p>
<ul>
<li>可选的BEGIN部分，用于先于文本输入执行逻辑</li>
<li>pattern-action部分，根据输入数据，如果有pattern匹配，就采取对应的action。awk不会改变原输入文件, 可以用<code>&gt;</code>重定向输出文件。<ul>
<li>每一个awk程序必须有一个pattern或者一个action, 或者两者都有。如果没有指定pattern, 默认pattern是匹配所有的行; 没有指定action,默认action是打印当前记录。patterns通过简单文本展示，action需要大括号{}包住来区分两者。</li>
<li>Patterns模式， 是一个选择器，它决定了后续的action是否执行。pattern可以是正则表达式（”&#x2F;&#x2F;“包住)，关系（大于等于）或者字符串匹配，”!”感叹号反向匹配，或通过”&amp;&amp;”或”||“任意组合。BEGIN和END是一个特殊的pattern, 用于初始化和总结。</li>
<li>Actions行动。action可以是一组类C表达式，也可以是数字或字符串表达式、赋值或格式化输出字符串流。action会在匹配的每一行执行，如果pattern没有提供，action会在每一行执行，如果action没有提供，所有pattern匹配的行会被打印到标准输出。action和pattern需要用有无{}来区分(有{}就是action)。</li>
</ul>
</li>
<li>可选的END部分，用于文本处理完后进一步执行逻辑<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> |awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">BEGIN &#123;print &quot;all html file&quot;&#125;</span></span><br><span class="line"><span class="string">/\.html$/ &#123;print&#125;</span></span><br><span class="line"><span class="string">END &#123;print &quot;There we go!&quot;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="运行awk的方式"><a href="#运行awk的方式" class="headerlink" title="运行awk的方式"></a>运行awk的方式</h3><p>可以有三种方式执行awk命令：</p>
<ul>
<li>awk ‘program’ input_file(s)<ul>
<li>程序和输入文件通过命令行提供</li>
</ul>
</li>
<li>awk ‘program’<ul>
<li>程序通过命令行提供，输入通过标准输入</li>
</ul>
</li>
<li>awk -f program_file input_file(s)<ul>
<li>程序是从文件读入的</li>
</ul>
</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>awk可以定义变量，不需要声明类型。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">BEGIN &#123; sum = 0 &#125;</span><br><span class="line">&#123; sum++ &#125;</span><br><span class="line">END &#123; print sum &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="条目-Records"><a href="#条目-Records" class="headerlink" title="条目(Records)"></a>条目(Records)</h3><p>awk一行是一条记录，默认记录条目分隔符是换行符（\n)，但是可以是任何其他正则表达式。通过在BEGIN设置RS(record seperator).<br>NR是一个变量记录着当期条目的序号。</p>
<h3 id="字段（Fields"><a href="#字段（Fields" class="headerlink" title="字段（Fields)"></a>字段（Fields)</h3><p>awk里每一行输入都会被分成字段，FS(field separator)可以指定分隔符，默认是空格。通过awk -F（分隔符）指定分隔符。<br><code>$0</code>是整行，<code>$1</code>是第一个字段，一次递推。只有字段可以被通过<code>$</code>表示，变量无法这么做。</p>
<h3 id="awk输出"><a href="#awk输出" class="headerlink" title="awk输出"></a>awk输出</h3><ul>
<li>打印某个字段， action写成<code>&#123;print $1, $3&#125;</code>可以打印第一和第三个字段，默认采用空格分割。</li>
<li>NF(Number of Fields), 当前字段序号，<code>&#123;print NF, $1, $NF, $(NF-2)&#125;</code>打印当前字段序号，第一个字段，最后一个字段, 倒数第三个字段。</li>
<li>可以对着$1做算术计算， <code>&#123;print $1*$2&#125;</code></li>
<li>打印行号， <code>&#123;print NR, $0&#125;</code></li>
<li>在打印的字段周围加一些字符，<code>&#123;print &quot;total pay for&quot;, $1, &quot;is&quot;, $2*$3&#125;</code></li>
<li>printf. awk也提供格式化输出，<code>printf(format, val1, val2, val3)</code>, {printf(“total pay for %s is $%.2f\n”, $1, $2*$3)}, 注意空格和换行需要手动输入，awk不会帮你插入。</li>
</ul>
<h3 id="选择器（selecton"><a href="#选择器（selecton" class="headerlink" title="选择器（selecton)"></a>选择器（selecton)</h3><p>awk patterns十分适合选择某些行做处理，比如</p>
<ul>
<li><code>$2 &gt;= 5 &#123;print&#125;</code>比较选择</li>
<li><code>$2*$3 &gt; 50 &#123;printf(&quot;%6.2f for %s\n&quot;, $2*$3,$1)&#125;</code> 计算</li>
<li><code>$1 == &quot;NYU&quot;</code>通过文本选择<code>$2 ~ /NYU/</code></li>
<li><code>$2 &gt;= 4 || $3 &gt;= 20</code>组合比较</li>
<li><code>NR &gt;= 10 &amp;&amp; NR &lt;= 20</code>通过行号</li>
</ul>
<h3 id="算术和变量"><a href="#算术和变量" class="headerlink" title="算术和变量"></a>算术和变量</h3><p>awk变量是数字类型或字符类型，用户定义的变量是不能用$的（unadorned), 默认用户定义的变量初始化为null, 值为0. 变量有这些：</p>
<ul>
<li>$0, $1, $NF</li>
<li>NR</li>
<li>NF</li>
<li>FILENAME. 当前输入文件的名称</li>
<li>FS</li>
<li>OFS. 输出字段分隔符</li>
<li>ARGC&#x2F;ARGV. argument count&#x2F;argument value array<ul>
<li>这两个变量用于从命令行得到参数<br>awk的运算符一共有如下这些：</li>
</ul>
</li>
<li>赋值。 &#x3D;</li>
<li>关系比较。 &#x3D;&#x3D;， &gt;&#x3D;, &lt;等等</li>
<li>逻辑比较。 ||， &amp;&amp;， ！</li>
<li>算术运算符。+，-，&#x2F;, %</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$3 &gt; 15 &#123;emp=emp+1&#125;</span><br><span class="line">END &#123;print emp, &quot;employees worked more than 15 hrs&quot;&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="处理文本"><a href="#处理文本" class="headerlink" title="处理文本"></a>处理文本</h3><p>awk处理文本的强大之处是可以方便地把数字和字符转换。</p>
<ul>
<li>字符串拼接<code>&#123;names=names $1 &quot; &quot;&#125; END &#123;print names&#125;</code></li>
</ul>
<h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><p>awk有一些内建函数，比如length（wc简化版），<code>&#123;nc = nc+length($0)+1&#125;</code>; 比如substr(s,m,n), 生成字符s的子集，位置从s的m到n.</p>
<ul>
<li>算术函数。 sin, cos, atan, exp, int, log,rand,sqrt</li>
<li>字符函数。length,substr, split</li>
<li>输出。 print, printf</li>
<li>特殊用途。<code>system（&quot;clear&quot;)</code>执行unit命令。<code>exit</code>立即从输入退出，进入END区。</li>
</ul>
<h3 id="控制流if"><a href="#控制流if" class="headerlink" title="控制流if"></a>控制流if</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$2 &gt; 6 &#123;n=n+1; pay=pay+$2*$3&#125;</span><br><span class="line">END &#123;if (n&gt;0) print n else print &quot;no&quot;&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; i= 1</span><br><span class="line">  while (i&lt;= $3)&#123;</span><br><span class="line">    printf(&quot;\t%.2f\n&quot;, $1*(1+$2)^i)</span><br><span class="line">    i = i+1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">  statement1</span><br><span class="line">&#125;while(expr)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;for (i=1; i&lt;=$3;i=i+1)</span><br><span class="line">printf(&quot;\t%.2f\n&quot;, $1*(1+$2)^i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="数组（Arrays"><a href="#数组（Arrays" class="headerlink" title="数组（Arrays)"></a>数组（Arrays)</h3><p>awk的数组不需要声明。数组的下标可以是数字和字符。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; line[NR] = $0 &#125;</span><br><span class="line">END &#123;</span><br><span class="line">  for (i=NR; i&gt;0; i=i-1)&#123;</span><br><span class="line">    print line[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; for (v in array)&#123;</span><br><span class="line">    print array[v]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Subscription Mode</title>
    <url>/2023/01/08/Subscription-Mode/</url>
    <content><![CDATA[<h2 id="Zien’s-Subscription-Mode"><a href="#Zien’s-Subscription-Mode" class="headerlink" title="Zien’s Subscription Mode"></a>Zien’s Subscription Mode</h2><p>最近看了左霆的《订阅经济：创造可持续增长的未来》，有颇多的想法。整体上这边书介绍了订阅经济的商业模式和可行性, 我对第二部分的内容关于如何建立“订阅文化”比较感兴趣，因为它教你如何去建立公司文化、组织架构和其他种种可能遇到的问题及挑战。当然，作为一本主要推销作者个人和公司的书籍，对于“How”这一部分作者还是浅尝辄止，有些点不够深入。可能正是这样，读者意识到了问题但是不知道怎么去做，才更有可能去购买他公司的产品吧~顺便说一下，他家的产品是订阅管理系统，主要功能有:</p>
<ul>
<li>自动化订阅管理</li>
<li>报告和分析</li>
<li>订阅产品管理<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/zuora-subscription.png"
                      alt="zuora"
                ></li>
</ul>
<h3 id="订阅模式的财务指标"><a href="#订阅模式的财务指标" class="headerlink" title="订阅模式的财务指标"></a>订阅模式的财务指标</h3><p>获客成本、生命周期客户价值、年经常性收益、每位客户带来的平均收益</p>
<h3 id="IT运营转变"><a href="#IT运营转变" class="headerlink" title="IT运营转变"></a>IT运营转变</h3><p>IT基础设施需要是以客户为中心建立的，而非围绕产品销售建立的。所以传统的IT组织架构需要往<code>PADRE</code>方向转变，他们分别是，后面会有详细介绍。需要支持的是这个架构比较适合互联网企业，大型非互联网集团公司可能需要相应调整，但是整体方向不变。</p>
<ul>
<li>Pipeline渠道</li>
<li>Acquire获客</li>
<li>Deploy部署</li>
<li>Run运营</li>
<li>Expand扩展</li>
</ul>
<h3 id="Innovation-always-in-Beta"><a href="#Innovation-always-in-Beta" class="headerlink" title="Innovation: always in Beta"></a>Innovation: always in Beta</h3><p>敏捷产品开发的一个关键就是在最终产品上线前有客户和利益相关者参与开发过程，目标是了解异常情景，帮助实现质量保证。学习gmail那样始终处于beta版本，始终让客户参与开发提升产品功能和质量。</p>
<h3 id="customer-centric"><a href="#customer-centric" class="headerlink" title="customer-centric"></a>customer-centric</h3><p>客户作为永远的创新伙伴, 创新不会凭空发生，它是一个概念在一段时间内持续迭代的结果。让产品永远处于测试状态中。</p>
<h3 id="Rules-for-subscription-services"><a href="#Rules-for-subscription-services" class="headerlink" title="Rules for subscription services"></a>Rules for subscription services</h3><p>个体互动高于流程和工具、可运行的软件高于详尽文档、客户合作高于合同谈判、响应变化高于遵循计划。</p>
<h3 id="营销4P的改变"><a href="#营销4P的改变" class="headerlink" title="营销4P的改变"></a>营销4P的改变</h3><p>产品、价格、渠道、促销（4P）将随着产品向服务转变也相应做出改变。</p>
<h4 id="对渠道商的改变"><a href="#对渠道商的改变" class="headerlink" title="对渠道商的改变"></a>对渠道商的改变</h4><p>以工作坊、白皮书、研讨会等方式培训渠道商订阅模式的通识教育，原有大订单以年度维护计划等额外服务的形式进行。教会经销商如何经营长期的合作关系，而不是每年加签一份合同。一个可行的时间表：前三个月关注转化率，接下来的六个月关注使用率，最后三个月为续费及相关的潜在销售准备打包服务。并且将这些数据分享给经销商。</p>
<h4 id="对促销的改变"><a href="#对促销的改变" class="headerlink" title="对促销的改变"></a>对促销的改变</h4><p>需要在社交网络上讲一个成功的故事，特别是把你的服务和用户放进一个更广的社交故事之中。先是气势恢宏的商业转型故事，接下来是市场故事，最后才是产品故事。你想创建一个你自己版本的艺术馆，其目标就是带领参观者按照次序走完“三间屋子”。“第一间屋子”根本不涉及你的公司，它介绍的是你公司所诞生的背景，它讲述的是你在广阔的商业世界中所观察到的一切，恰恰是这些，让你的业务应运而生。只有当你建立了背景之后，才能走进“第二间屋子”，并阐明价值——基于角色和行业的客观效益。现在，你可以再深挖一点儿，给出具体的基于角色的建议、行业趋势及相关案例研究。最后，“第三间屋子”是关于产品自身。</p>
<h4 id="定价的改变"><a href="#定价的改变" class="headerlink" title="定价的改变"></a>定价的改变</h4><p>定价与潜在客户无法预算或预估的某个使用参数联系起来。两种基本定价模式：</p>
<ul>
<li>消费驱动型增长（使用提升），以量取胜</li>
<li>功能驱动型增长（服务创新），理想的情况是，假如你提供青铜&#x2F;白银&#x2F;黄金等级服务，70%的订阅用户都在白银和黄金类别中。</li>
</ul>
<h3 id="销售"><a href="#销售" class="headerlink" title="销售"></a>销售</h3><p>资产转移模式转向长期的关系。对于订阅模式，销售更需要做的事：</p>
<ul>
<li>获得更多的客户</li>
<li>提升这些客户的价值</li>
<li>更长久地拥有这些客户</li>
</ul>
<p>需要采取多种策略来维持增长。他们分别是：</p>
<ul>
<li>选择合适的初始客户。如选择小型一些的企业，他们作为初始用户，不会像大公司那样需要面面俱到的功能和服务，导致本企业无法支持而倒闭。同时刚开始控制销售团队规模，让这些销售和客户建立长期关系而不是基于拿到佣金。</li>
<li>降低客户流失率。降低客户流失率一个很关键的问题在于用户采纳程度，所以需要团队培训客户更好地使用产品。同时配合销售组合，通过广泛的解决方案解决广泛的问题的能力可以降低客户流失率。</li>
<li>扩大销售团队。扩大销售团队时需要注意提升混合销售模式（传统销售模式和自助式销售），并且提升自动化来帮助内部销售流程运作。</li>
<li>通过追加销售和交叉销售实现增值。追加销售指功能更丰富且价格更高的升级服务。交叉销售是指销售额外的服务，提供更加全面的解决方案策略，希望拥有交叉销售能力的订阅式企业，需要不断增加新的服务、特点、功能和内容，从而吸引客户从服务中获得更多价值。在成熟的订阅服务中，追加销售和交叉销售平均可以带来20%的收入。同时还有其他好处，包括降低客户流失率，从而降低你的获客成本。负责管理现有客户的销售可以叫“客户成功经理”。</li>
<li>进入新的细分市场。</li>
<li>走向国际。需要考虑第一，监管相关的内容——营业执照、税收、数据驻留要求；第二，支付相关的内容——替代支付网关、当地货币、信用卡等等；第三，店铺本身——人力资源、员工聘用等等。</li>
<li>将收购带来的增长机会最大化。</li>
<li>优化定价与打包组合。订阅式企业需要通过定价持续优化收益</li>
</ul>
<h3 id="订阅经济利润表"><a href="#订阅经济利润表" class="headerlink" title="订阅经济利润表"></a>订阅经济利润表</h3><p>年度经常性收入<code>Annual recurring revenue</code>和月度经常性收入<code>Monthly recurring revenue</code>是订阅经济利润表核心。具体公示表现为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ARRn+1 = ARRn - Churn + ACV(Annual contract value)</span><br></pre></td></tr></table></figure></div>
<p>因为订阅经济认为营销和销售的投入会提升下一年ACV,同时它们也不会作为经常性成本，而是增长成本，而增长成本对未来的经常性收入有直接的帮助。所以<code>ACV = sales&amp;marketing * rate</code>, 对于企业而言，如何提升销售和营销的投入对未来订阅合同的转化率至关重要。<br>简化的订阅利润表为：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/ARR.png"
                     
                ></p>
<h3 id="PADRE-x2F-PPM运营模型"><a href="#PADRE-x2F-PPM运营模型" class="headerlink" title="PADRE&#x2F;PPM运营模型"></a>PADRE&#x2F;PPM运营模型</h3><p>以客户为中心的组织架构可以由8大子系统有机组成，由PADRE+3个基本部分PPM组成。公司的组织不一定完全按照这个模式设立，但是这8个子系统是必须有的基础，并且可以跨功能协作。</p>
<ul>
<li>Pipeline渠道。子系统的主要目标是建立市场意识，并转化为需求。具体渠道包括网络和社交媒体，公共关系，事件营销。</li>
<li>Acquire获客。就是所谓的“买家之旅”。潜在客户是如何做决策的？他们成功的标准是什么？他们还有什么替代解决方案？什么可能是他们反对的？他们必须向谁进行确认？他们的伴侣？家人？老板？首席财务官？还是团队？</li>
<li>Deploy部署。</li>
<li>Run运营。持续运营能力对于客户的体验至关重要。</li>
<li>Expand扩展。。你需要你的订阅用户能够做三件事：留下、增长、支持。<br>三个基础部分包括：人、产品和钱。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/PRADE-PPM.png"
                     
                ><br>基于PADRE模型，运营公司就知道要关注渠道覆盖、销售数据、新采用的商标、客户保留统计数据、扩展速度，并且分享给公司每个人。建立PADRE这种文化确保有利于组织发展的知识不会过于分散。</li>
</ul>
]]></content>
      <tags>
        <tag>Subscription mode,Zien</tag>
      </tags>
  </entry>
  <entry>
    <title>FHIR-Resource-Definition</title>
    <url>/2023/02/20/FHIR-Resource-Definition/</url>
    <content><![CDATA[<h1 id="FHIR资源定义"><a href="#FHIR资源定义" class="headerlink" title="FHIR资源定义"></a>FHIR资源定义</h1><blockquote>
<p>本文主要记录FHIRv4.3.0的资源<code>Resource</code>内容是如何定义的。实际数据交换时，资源可以用不同的格式来表示: <code>XML</code>、<code>JSON</code>、<code>Turtle</code>和<code>UML</code>. 未来批量数据<code>Bulk Data Formats</code>的定义也将发布. </p>
</blockquote>
<h3 id="Resource-Definition"><a href="#Resource-Definition" class="headerlink" title="Resource Definition"></a>Resource Definition</h3><p>FHIR资源指一个规格标准定义如何展示和健康相关的某个概念, 当前版本一共有146种资源，主要包括临床信息，人员与组织，财务，安全和术语。资源可以用几种不同的方法来定义:</p>
<ul>
<li>一种是层级表格，以逻辑视图的方式展示内容, 简称逻辑表<code>Logical table</code></li>
<li>UML 统一模型语言</li>
<li>片假XML语法</li>
<li>片假JSON</li>
<li>片假Turtle</li>
</ul>
<p>除了上述语法，还有其他格式可以使用，包括<code>W3C schema</code>, <code>Schematron</code>, <code>JSON Schema</code>和<code>StructureDefinition</code>.</p>
<h4 id="Logical-Table-逻辑表"><a href="#Logical-Table-逻辑表" class="headerlink" title="Logical Table 逻辑表"></a>Logical Table 逻辑表</h4><p>逻辑表以树形结构来表示资源，并固定几个特定列， 如名称、标志、类型等。相对其它表示方式，用表格的形式显得更加直观和整洁。</p>
<table>
<thead>
<tr>
<th>Column</th>
<th>Content</th>
</tr>
</thead>
<tbody><tr>
<td>Name</td>
<td>资源中元素的名字，如XML中manifest清单，JSON&#x2F;RDF的属性名。有些名字结尾有[x]代表下面详细的介绍。同时名字前面还有一个图标标记类型。</td>
</tr>
<tr>
<td>Flags</td>
<td>一组标记表示实现时该如何处理该元素。比如这个元素必须被支持或它是可以选择的。</td>
</tr>
<tr>
<td>Card</td>
<td>基。 该元素在资源中允许出现的次数的下限和上限。</td>
</tr>
<tr>
<td>Type</td>
<td>元素的类型。注意，元素的类型有两种含义，取决于该元素是否有定义的子元素。如果元素有子代，那么元素有一个匿名的类型，由子元素给定具体的类型。如果元素没有子代，那么该元素可以被预置的类型所指定。</td>
</tr>
<tr>
<td>Description&amp;Contraints</td>
<td>元素的描述，约束的细节。比如那些情况适用编码的元素。</td>
</tr>
</tbody></table>
<center>表一. 逻辑表固定字段</center>

<p><strong>举例:</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/filess/img17@main/2023/02/20/1676860770692-3f9519a8-782f-40b4-b462-4a1523e51b2a.png"
                     
                ></p>
<p><strong>对于Type类型的图标：</strong></p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_resource.png"
                      style="display: inline; margin:auto;" alt="resource" 
                >代表一个基础资源。</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_element.gif"
                      style="display: inline; margin:auto;" alt="element"
                >资源中的元素，同时此元素还可以定义子元素</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_choice.gif"
                      style="display: inline; margin:auto;" alt="type choice"
                >此元素可以有多个不同的类型</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_primitive.png"
                      style="display: inline; margin:auto;" alt="基础类型" 
                >代表基础类型元素，基础类型都以小写字母开头</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_datatype.gif"
                      style="display: inline; margin:auto;" alt="复合类型" 
                >元素的数据类型描述了其它的元素，称为复合类型，复合类型用大写字母开头</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_reference.png"
                      style="display:inline; margin:auto;" alt="reference"
                >子元素可以引用另一个资源</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_reuse.png"
                      style="display:inline; margin:auto;" alt="reuse"
                >此元素和同一个资源内另一个元素内容一样</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_slice.png"
                      style="display:inline; margin:auto;" alt="切片集"
                >引入切片集合, 具体见profile中定义.</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_extension_complex.png"
                       style="display:inline; margin:auto;" alt="complet extension" 
                >复杂嵌套扩展</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_extension_simple.png"
                      style="display:inline; margin:auto;" alt="simple extension" 
                >简单扩展，只扩展一个值没有嵌套</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_modifier_extension_complex.png"
                      style="display:inline; margin:auto;" atl="complex modifier" 
                >复杂修改扩展</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_modifier_extension_simple.png"
                      style="display:inline; margin:auto;" alt="simple modifier" 
                > 简单修改扩展</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hl7.org/fhir/icon_profile.png"
                      style="display:inline; margin:auto;" alt="rootprofile" 
                >逻辑概貌的根</li>
</ul>
<p><strong>对于Flag标志的图标</strong></p>
<ul>
<li><code>?!</code>: 这个元素是一个正在建设的元素</li>
<li><code>S</code>: 这个元素必须被支持</li>
<li><code>Σ</code>: 此元素是汇总集合的一部分</li>
<li><code>I</code>: 此元素定义了约束或被约束</li>
<li><code>《A》</code>抽象类型</li>
<li><code>《I》</code>此资源是接口定义</li>
<li><a style="padding-left: 3px; padding-right: 3px; border: 1px grey solid; font-weight: bold; color: black; background-color: #ffe6e6" >TU</a>此元素是试用状态</li>
<li><a style="padding-left: 3px; padding-right: 3px; border: 1px grey solid; font-weight: bold; color: black; background-color: #e6ffe6">N</a>该元素的标准状态为规范性，既正式状态。</li>
<li><a style="padding-left: 3px; padding-right: 3px; border: 1px grey solid; font-weight: bold; color: black; background-color: #efefef" >D</a>该元素的标准状态是起草阶段。</li>
</ul>
<p><strong>其它注意项</strong></p>
<ul>
<li>资源和元素是大小写敏感的</li>
<li>任何元素是基础类型的，它会有一个<code>value</code>的属性来表示具体的数值</li>
<li>元素都有一个基数，来表示这个元素会出现或者必须出现多少次</li>
<li>元素复用方面，如果子元素和另一个子元素有相同的数据类型，那么可以这样表示：<code>see[name]</code>括号中name是另子元素的名称。</li>
<li>每个元素名都会在数值字典里有正式的定义名，通过超链接找到对应的关系。</li>
<li>有些元素可能会有<code>id</code>的属性用来内部引用，上面的例子没有显示出来这个<code>id</code>。</li>
<li>FHIR的元素永不为空。如果有一个元素在资源里出现，那么它要么必须有值，要么它的子元素定义，或者其他扩展。</li>
<li>基础类的元素是所有资源共有的，所以不会在表格中展示。这些共用的元素在基类<a class="link"   href="http://hl7.org/fhir/resource.html" >Resource <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="http://hl7.org/fhir/domainresource.html" >DomainResource <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中定义。<br>元素的数据类型表示一般是type类型直接体现的，但是有两个特例：</li>
<li>如果元素支持多个类型（名字结尾[x]）, 那么类似可以是一系列选项，用<code>|</code>来分割。</li>
<li>如果一个类型是<code>Reference</code>或<code>canonical</code>, 那么数据类型将直接列出可能的引用或者profile链接。如果链接到profile, 参考的类型可能被<code>profiled</code>， 比如元素的实例必须遵循特定profile或者一组profile列表。特定的url使用<code>&#123;&#125;</code>来表示。</li>
</ul>
<h4 id="数据类型的选择"><a href="#数据类型的选择" class="headerlink" title="数据类型的选择"></a>数据类型的选择</h4><p>有些元素可能有多个数据类型的选择，这样的情况需要使用<code>name[x]</code>来定义元素名，<code>[x]</code>指定实际使用的数据类型。如果想要某个元素只重复一次数据类型，那么它的基数只能是1. </p>
<h4 id="格式的序列化"><a href="#格式的序列化" class="headerlink" title="格式的序列化"></a>格式的序列化</h4><p>可以使用如下方式序列化资源：</p>
<ul>
<li>JSON</li>
<li>XML</li>
<li>RDF(Turtle)</li>
</ul>
<p>系统必须在<a class="link"   href="http://hl7.org/fhir/capabilitystatement.html" >Capability Statement <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>声明它支持的格式. 如果一个服务器收到它不支持的格式请求，那么需要返回<code>406 Not Acceptable</code>. 如果客户端post一个不支持的格式，那么返回<code>416 Unsupported Media Type</code>.<br>比较推荐的做法是支持JSON和XML格式，以适用于不同的技术栈。RDF比较适用于数据分析而不是数据交换。</p>
<h4 id="批量数据格式（建设中）"><a href="#批量数据格式（建设中）" class="headerlink" title="批量数据格式（建设中）"></a>批量数据格式（建设中）</h4><p>当FHIR需要交换批量数据如1000条以上数据的时候，批量数据格式就可以用上了。目前建议的支持格式有：</p>
<ul>
<li>ND-JSON(New line delimited JSON)</li>
<li>Google Protobuf</li>
<li>Apache Parquet&#x2F;Avro</li>
</ul>
<h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li><a class="link"   href="http://hl7.org/fhir/formats.html#" >FHIR Resource Definition <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Servitization in Subscription Mode</title>
    <url>/2023/02/23/servitization-in-subscription-mode/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Servitization is shift from a product only focus to a strategy where products<br>and services are bundled in various combinations. The shift could also be the focus from goods, technology and manufacturing to services, intangible resources, co-creation of value and relationships. Some scholars call it Prodcut Service System aka PSS. Nowadays more and more tranditional companies increase the influence of services in their traditional business to secure their competitive position.<br>It is driven by the growing complexity of products and the demand for individualization. Nowadays the extended target is to enhance the performance of products through the integration of services and digital components.</p>
<h2 id="Servitization-Process"><a href="#Servitization-Process" class="headerlink" title="Servitization Process"></a>Servitization Process</h2><p>General speaking, there are serveral steps to take so as a company transfers from product-centric to customer-centric </p>
<h2 id="Key-Characterics-of-subscription-model"><a href="#Key-Characterics-of-subscription-model" class="headerlink" title="Key Characterics of subscription model"></a>Key Characterics of subscription model</h2><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
      <tags>
        <tag>subscription model, Servitization</tag>
      </tags>
  </entry>
  <entry>
    <title>Transformer Intepretion and Code</title>
    <url>/2023/04/02/Transformer-Architecture-code/</url>
    <content><![CDATA[<h2 id="Attention-is-all-your-need"><a href="#Attention-is-all-your-need" class="headerlink" title="Attention is all your need"></a>Attention is all your need</h2><p><code>Attention is all your need</code>这篇谷歌的<code>transformer</code>开山之作奠定了如今大热的GPT和机器视觉领域神经网络的基础架构。本文将在理解论文的基础上，结合其它材料，进一步深入了解具体代码实现（pytorch），并给出一个<code>fine tune</code>的实际应用例子。</p>
<h3 id="Paper-Introduction"><a href="#Paper-Introduction" class="headerlink" title="Paper Introduction"></a>Paper Introduction</h3><p><code>Transformer</code>是第一个提出只使用<code>attention</code>+<code>residual connection</code>+<code>MLP</code>架构的神经网络, 起初论文用这种架构去做序列到序列的文本翻译工作，相比<code>RNN</code>和<code>CNN</code>, <code>transformer</code>在大规模训练集上的表现更好，同时这个架构也提高了计算并行性和计算效率。那么为什么它会表现地更好? 初步的研究发现，原因有如下几点：</p>
<ul>
<li><code>transformer</code>在网络中引入了更少的<code>inductive bias</code>归纳偏置，所以有更好的泛化性，对于没有训练过的样本就有更好的表现; </li>
<li>同时attention机制可以全局地计算出序列之间的相关性，相对CNN可以更好地理解上下文，而不是局限卷积窗口特征;</li>
<li>更少的网络深度减少了长距离传输梯度消失的问题，相对RNN就有更好的长输入表现;</li>
<li>当然<code>transformer</code>引入残差连接也是性能提升的另一个因素，具体还有其他原因分析还待进一步研究。</li>
</ul>
<h3 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h3><p><code>transformer</code>使用了<code>encoder-decoder</code>编码器-解码器架构, 整体架构论文完美地画了出来。实现的代码如下:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/transformer_arch.png"
                      alt="arch"
                ></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn.functional <span class="keyword">import</span> log_softmax</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EncoderDecoder</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Standard encoder decoder class.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, encoder, decoder, src_embed, tgt_embed, generator</span>):</span><br><span class="line">        <span class="built_in">super</span>(EncoderDecoder, self).__init__()</span><br><span class="line">        self.encoder = encoder</span><br><span class="line">        self.decoder = decoder</span><br><span class="line">        self.src_embed = src_embed</span><br><span class="line">        self.tgt_embed = tgt_embed</span><br><span class="line">        self.generator = generator</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, src, src_mask</span>):</span><br><span class="line">        <span class="keyword">return</span> self.encoder(self.src_embed(src), src_mask)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, memory, src_mask, tgt, tgt_mask</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;memory is feed by encoder output as interim input for decoder&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, src, tgt, src_mask, tgt_mask</span>):</span><br><span class="line">        <span class="keyword">return</span> self.decode(self.encode(src, src_mask), src_mask, tgt, tgt_mask)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generator</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;standard linear + softmax generator&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, vocab</span>):</span><br><span class="line">        <span class="built_in">super</span>(Generator, self).__init__()</span><br><span class="line">        self.projection = nn.Linear(d_model, vocab)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> log_softmax(self.projection(x), dim=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>
<p>上图中编码器和解码器实际上是由6个一样的网络串行堆叠而成，它的大致架构如下图:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/stacked_encoder_decoder.webp"
                      alt="stacked_transformer"
                ></p>
<h4 id="编码器输入"><a href="#编码器输入" class="headerlink" title="编码器输入"></a>编码器输入</h4><p>对于翻译序列的例子，在数据输入阶段经过了如下流程：</p>
<ol>
<li>当输入句子X(x1,x2…xn), 模型先对其做<code>embedding</code>,生成每个词对应的向量Z(z1,z2…zn). </li>
<li>然后在Z后加入位置编码信息，位置信息可以用余弦来表示，随后加入编码器输入。正弦和余弦的公式是：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.666ex;" xmlns="http://www.w3.org/2000/svg" width="28.168ex" height="3.452ex" role="img" focusable="false" viewBox="0 -789.7 12450.2 1525.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z"></path><path id="MJX-1-TEX-N-45" d="M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-1-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path id="MJX-1-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-1-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-I-1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-1-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="50" xlink:href="#MJX-1-TEX-N-50"></use><use data-c="45" xlink:href="#MJX-1-TEX-N-45" transform="translate(681,0)"></use></g></g><g data-mml-node="mo" transform="translate(1362,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1751,0)"><use data-c="1D45D" xlink:href="#MJX-1-TEX-I-1D45D"></use></g><g data-mml-node="mi" transform="translate(2254,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(2739,0)"><use data-c="1D460" xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(3208,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mn" transform="translate(3652.7,0)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(4152.7,0)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(4497.7,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(5164.4,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6220.2,0)"><g data-mml-node="mi"><use data-c="73" xlink:href="#MJX-1-TEX-N-73"></use><use data-c="69" xlink:href="#MJX-1-TEX-N-69" transform="translate(394,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(672,0)"></use></g></g><g data-mml-node="mo" transform="translate(7448.2,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(7837.2,0)"><g data-mml-node="mrow" transform="translate(1596.9,477.2) scale(0.707)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-1-TEX-I-1D45D"></use></g><g data-mml-node="mi" transform="translate(503,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(988,0)"><use data-c="1D460" xlink:href="#MJX-1-TEX-I-1D460"></use></g></g><g data-mml-node="msup" transform="translate(220,-720.6) scale(0.707)"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(1000,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(1500,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(2000,0)"></use></g><g data-mml-node="mfrac" transform="translate(2533,495.9) scale(0.707)"><g data-mml-node="mrow" transform="translate(1535,394)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500,0)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mrow" transform="translate(220,-534)"><g data-mml-node="mi"><use data-c="1D437" xlink:href="#MJX-1-TEX-I-1D437"></use></g><g data-mml-node="mi" transform="translate(828,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1706,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(2191,0)"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(2711,0)"><use data-c="1D452" xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(3177,0)"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"></use></g></g><rect width="3675" height="60" x="120" y="220"></rect></g></g><rect width="3984" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(12061.2,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Embeddings</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, vocab</span>):</span><br><span class="line">        <span class="built_in">super</span>(Embeddings, self).__init__()</span><br><span class="line">        self.lut = nn.Embedding(vocab, d_model)  <span class="comment"># look up table</span></span><br><span class="line">        self.d_model = d_model</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lut(x) * math.sqrt(self.d_model)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PositionalEncoding</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, dropout, max_len=<span class="number">5000</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;dropout is random set to zero in some points to prevent overfitting&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(PositionalEncoding, self).__init__()</span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line"></span><br><span class="line">        pe = torch.zeros(max_len, d_model) <span class="comment"># 5000*512 tensor</span></span><br><span class="line">        position = torch.arange(<span class="number">0</span>, max_len).unsqueeze(<span class="number">1</span>) <span class="comment"># 5000*1</span></span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, d_model, <span class="number">2</span>) * -(math.log(<span class="number">10000.0</span>)/d_model))</span><br><span class="line">        <span class="comment"># 用指数转变把除法改成乘法, -1幂</span></span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term)</span><br><span class="line">        pe[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(position * div_term)</span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 保存状态</span></span><br><span class="line">        self.register_buffer(<span class="string">&quot;pe&quot;</span>, pe)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># todo why requires gradients?</span></span><br><span class="line">        <span class="keyword">return</span> self.dropout(x + self.pe[:, : x.size(<span class="number">1</span>)].requires_grad_(<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></div>

<h4 id="编码器层"><a href="#编码器层" class="headerlink" title="编码器层"></a>编码器层</h4><p>编码器由6个一样的网络串行组成，每个网络由一个多头注意力层和<code>Feed forward</code>前向反馈网络层组成。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clones</span>(<span class="params">module, N</span>):</span><br><span class="line">    <span class="keyword">return</span> nn.ModuleList([copy.deepcopy(module) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encoder</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, layer, N</span>):</span><br><span class="line">        <span class="built_in">super</span>(Encoder, self).__init__()</span><br><span class="line">        self.layers = clones(layer, N)</span><br><span class="line">        self.norm = LayerNorm(layer.size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, mask</span>):</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x, mask)</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></table></figure></div>

<h4 id="多头注意层"><a href="#多头注意层" class="headerlink" title="多头注意层"></a>多头注意层</h4><p>多头注意层是输入（K,V,Q）经过8个可学习的线性投影，再经过并行的自注意机制（点积计算），最后把结果相加并且投影缩放回来。这篇论文用的自注意力机制是<code>scaled dot product</code>即阶化的点积。整体自注意力层和多头层论文也很好地画了出来。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/multihead.png"
                      alt="attention"
                ><br>自注意计算的公式是: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.334ex;" xmlns="http://www.w3.org/2000/svg" width="37.949ex" height="3.76ex" role="img" focusable="false" viewBox="0 -1072.4 16773.3 1661.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-41" d="M255 0Q240 3 140 3Q48 3 39 0H32V46H47Q119 49 139 88Q140 91 192 245T295 553T348 708Q351 716 366 716H376Q396 715 400 709Q402 707 508 390L617 67Q624 54 636 51T687 46H717V0H708Q699 3 581 3Q458 3 437 0H427V46H440Q510 46 510 64Q510 66 486 138L462 209H229L209 150Q189 91 189 85Q189 72 209 59T259 46H264V0H255ZM447 255L345 557L244 256Q244 255 345 255H447Z"></path><path id="MJX-1-TEX-N-74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path id="MJX-1-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-1-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path><path id="MJX-1-TEX-I-1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path id="MJX-1-TEX-N-66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-1-TEX-N-78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"></path><path id="MJX-1-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-1-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="41" xlink:href="#MJX-1-TEX-N-41"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(750,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(1139,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1528,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(1972,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(2528,0)"></use><use data-c="69" xlink:href="#MJX-1-TEX-N-69" transform="translate(2917,0)"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(3195,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(3695,0)"></use></g></g><g data-mml-node="mo" transform="translate(4251,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4640,0)"><use data-c="1D444" xlink:href="#MJX-1-TEX-I-1D444"></use></g><g data-mml-node="mo" transform="translate(5431,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5875.7,0)"><use data-c="1D43E" xlink:href="#MJX-1-TEX-I-1D43E"></use></g><g data-mml-node="mo" transform="translate(6764.7,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(7209.3,0)"><use data-c="1D449" xlink:href="#MJX-1-TEX-I-1D449"></use></g><g data-mml-node="mo" transform="translate(7978.3,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(8645.1,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9700.9,0)"><g data-mml-node="mi"><use data-c="73" xlink:href="#MJX-1-TEX-N-73"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(394,0)"></use><use data-c="66" xlink:href="#MJX-1-TEX-N-66" transform="translate(894,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(1200,0)"></use><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D" transform="translate(1589,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(2422,0)"></use><use data-c="78" xlink:href="#MJX-1-TEX-N-78" transform="translate(2922,0)"></use></g></g><g data-mml-node="mo" transform="translate(13150.9,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(13539.9,0)"><g data-mml-node="mrow" transform="translate(220,477.2) scale(0.707)"><g data-mml-node="mi"><use data-c="1D444" xlink:href="#MJX-1-TEX-I-1D444"></use></g><g data-mml-node="msup" transform="translate(791,0)"><g data-mml-node="mi"><use data-c="1D43E" xlink:href="#MJX-1-TEX-I-1D43E"></use></g><g data-mml-node="mi" transform="translate(974,363) scale(0.707)"><use data-c="1D447" xlink:href="#MJX-1-TEX-I-1D447"></use></g></g></g><g data-mml-node="msqrt" transform="translate(392.7,-473.3) scale(0.707)"><g transform="translate(853,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(0,18)"><use data-c="221A" xlink:href="#MJX-1-TEX-N-221A"></use></g><rect width="971.4" height="42.4" x="853" y="775.6"></rect></g><rect width="1835.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(15615.3,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(16004.3,0)"><use data-c="1D449" xlink:href="#MJX-1-TEX-I-1D449"></use></g></g></g></svg></mjx-container></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">attention</span>(<span class="params">query, key, value, mask=<span class="literal">None</span>, dropout=<span class="literal">None</span></span>):</span><br><span class="line">    d_k = query.size(-<span class="number">1</span>) <span class="comment"># dim number</span></span><br><span class="line">    scores = torch.matmul(query, key.transpose(-<span class="number">2</span>, -<span class="number">1</span>)) / math.sqrt(d_k)</span><br><span class="line">    <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        scores = scores.masked_fill(mask==<span class="number">0</span>, -<span class="number">1e9</span>) <span class="comment"># 掩码是0的位置赋值很小的数</span></span><br><span class="line">    p_attn = scores.softmax(dim=-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        p_attn = dropout(p_attn) <span class="comment"># set p_attn% to 0</span></span><br><span class="line">    <span class="keyword">return</span> torch.matmul(p_attn, value), p_attn</span><br></pre></td></tr></table></figure></div>

<p>多头注意力机制的公式是: </p>
<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.682ex;" xmlns="http://www.w3.org/2000/svg" width="98.677ex" height="2.919ex" role="img" focusable="false" viewBox="0 -988.6 43615.4 1290.2" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"></path><path id="MJX-1-TEX-N-75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path id="MJX-1-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-1-TEX-N-48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z"></path><path id="MJX-1-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-1-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-1-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path><path id="MJX-1-TEX-I-1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path id="MJX-1-TEX-N-68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-1-TEX-I-1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-A0" d=""></path><path id="MJX-1-TEX-N-77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z"></path><path id="MJX-1-TEX-N-72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path id="MJX-1-TEX-N-41" d="M255 0Q240 3 140 3Q48 3 39 0H32V46H47Q119 49 139 88Q140 91 192 245T295 553T348 708Q351 716 366 716H376Q396 715 400 709Q402 707 508 390L617 67Q624 54 636 51T687 46H717V0H708Q699 3 581 3Q458 3 437 0H427V46H440Q510 46 510 64Q510 66 486 138L462 209H229L209 150Q189 91 189 85Q189 72 209 59T259 46H264V0H255ZM447 255L345 557L244 256Q244 255 345 255H447Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4D" xlink:href="#MJX-1-TEX-N-4D"></use><use data-c="75" xlink:href="#MJX-1-TEX-N-75" transform="translate(917,0)"></use><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C" transform="translate(1473,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(1751,0)"></use><use data-c="69" xlink:href="#MJX-1-TEX-N-69" transform="translate(2140,0)"></use><use data-c="48" xlink:href="#MJX-1-TEX-N-48" transform="translate(2418,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(3168,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(3612,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(4112,0)"></use></g></g><g data-mml-node="mo" transform="translate(4668,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(5057,0)"><use data-c="1D444" xlink:href="#MJX-1-TEX-I-1D444"></use></g><g data-mml-node="mo" transform="translate(5848,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(6292.7,0)"><use data-c="1D43E" xlink:href="#MJX-1-TEX-I-1D43E"></use></g><g data-mml-node="mo" transform="translate(7181.7,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(7626.3,0)"><use data-c="1D449" xlink:href="#MJX-1-TEX-I-1D449"></use></g><g data-mml-node="mo" transform="translate(8395.3,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(9062.1,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10117.9,0)"><g data-mml-node="mi"><use data-c="43" xlink:href="#MJX-1-TEX-N-43"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(722,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(1222,0)"></use><use data-c="63" xlink:href="#MJX-1-TEX-N-63" transform="translate(1778,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(2222,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(2722,0)"></use></g></g><g data-mml-node="mo" transform="translate(13228.9,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13617.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="68" xlink:href="#MJX-1-TEX-N-68"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(556,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(1000,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1500,0)"></use></g><g data-mml-node="mn" transform="translate(2089,-150) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(16110.4,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(16555.1,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g><g data-mml-node="mo" transform="translate(16999.8,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g><g data-mml-node="mo" transform="translate(17444.4,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g><g data-mml-node="mo" transform="translate(17889.1,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(18333.8,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="68" xlink:href="#MJX-1-TEX-N-68"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(556,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(1000,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1500,0)"></use></g><g data-mml-node="mi" transform="translate(2089,-150) scale(0.707)"><use data-c="68" xlink:href="#MJX-1-TEX-N-68"></use></g></g></g><g data-mml-node="mo" transform="translate(20865.9,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="msup" transform="translate(21254.9,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,363) scale(0.707)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g><g data-mml-node="mspace" transform="translate(22980.6,0)"></g><g data-mml-node="mtext" transform="translate(22980.6,0)"><use data-c="A0" xlink:href="#MJX-1-TEX-N-A0"></use><use data-c="77" xlink:href="#MJX-1-TEX-N-77" transform="translate(250,0)"></use><use data-c="68" xlink:href="#MJX-1-TEX-N-68" transform="translate(972,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1528,0)"></use><use data-c="72" xlink:href="#MJX-1-TEX-N-72" transform="translate(1972,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(2364,0)"></use><use data-c="A0" xlink:href="#MJX-1-TEX-N-A0" transform="translate(2808,0)"></use></g><g data-mml-node="mtext" transform="translate(26038.6,0)"><use data-c="A0" xlink:href="#MJX-1-TEX-N-A0"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(26288.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="68" xlink:href="#MJX-1-TEX-N-68"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(556,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(1000,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1500,0)"></use></g><g data-mml-node="mi" transform="translate(2089,-150) scale(0.707)"><use data-c="69" xlink:href="#MJX-1-TEX-N-69"></use></g></g></g><g data-mml-node="mo" transform="translate(28902,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(29957.8,0)"><g data-mml-node="mi"><use data-c="41" xlink:href="#MJX-1-TEX-N-41"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(750,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(1139,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1528,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(1972,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(2528,0)"></use><use data-c="69" xlink:href="#MJX-1-TEX-N-69" transform="translate(2917,0)"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(3195,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(3695,0)"></use></g></g><g data-mml-node="mo" transform="translate(34208.8,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(34597.8,0)"><use data-c="1D444" xlink:href="#MJX-1-TEX-I-1D444"></use></g><g data-mml-node="msubsup" transform="translate(35388.8,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,490.8) scale(0.707)"><use data-c="1D444" xlink:href="#MJX-1-TEX-I-1D444"></use></g><g data-mml-node="mi" transform="translate(977,-293.8) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(37134.3,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(37579,0)"><use data-c="1D43E" xlink:href="#MJX-1-TEX-I-1D43E"></use></g><g data-mml-node="msubsup" transform="translate(38468,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,363) scale(0.707)"><use data-c="1D43E" xlink:href="#MJX-1-TEX-I-1D43E"></use></g><g data-mml-node="mi" transform="translate(977,-284.4) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(40282.8,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(40727.5,0)"><use data-c="1D449" xlink:href="#MJX-1-TEX-I-1D449"></use></g><g data-mml-node="msubsup" transform="translate(41496.5,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,369.2) scale(0.707)"><use data-c="1D449" xlink:href="#MJX-1-TEX-I-1D449"></use></g><g data-mml-node="mi" transform="translate(977,-293.8) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(43226.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>
<p><strong>Where</strong> the projections are parameter matrices:</p>
<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.682ex;" xmlns="http://www.w3.org/2000/svg" width="68.302ex" height="2.919ex" role="img" focusable="false" viewBox="0 -988.6 30189.5 1290.2" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path><path id="MJX-1-TEX-I-1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path><path id="MJX-1-TEX-D-211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-1-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path><path id="MJX-1-TEX-I-1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path><path id="MJX-1-TEX-I-1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-1-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,490.8) scale(0.707)"><use data-c="1D444" xlink:href="#MJX-1-TEX-I-1D444"></use></g><g data-mml-node="mi" transform="translate(977,-293.8) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(2023.3,0)"><use data-c="2208" xlink:href="#MJX-1-TEX-N-2208"></use></g><g data-mml-node="msup" transform="translate(2968.1,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="211D" xlink:href="#MJX-1-TEX-D-211D"></use></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1889,0)"></use><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C" transform="translate(2333,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(2449.3,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="msub" transform="translate(3227.3,0)"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g></g></g><g data-mml-node="mo" transform="translate(6742,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="msubsup" transform="translate(7186.6,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,363) scale(0.707)"><use data-c="1D43E" xlink:href="#MJX-1-TEX-I-1D43E"></use></g><g data-mml-node="mi" transform="translate(977,-284.4) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(9279.2,0)"><use data-c="2208" xlink:href="#MJX-1-TEX-N-2208"></use></g><g data-mml-node="msup" transform="translate(10224,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="211D" xlink:href="#MJX-1-TEX-D-211D"></use></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1889,0)"></use><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C" transform="translate(2333,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(2449.3,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="msub" transform="translate(3227.3,0)"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g></g></g><g data-mml-node="mo" transform="translate(13997.9,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="msubsup" transform="translate(14442.6,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,369.2) scale(0.707)"><use data-c="1D449" xlink:href="#MJX-1-TEX-I-1D449"></use></g><g data-mml-node="mi" transform="translate(977,-293.8) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(16450.3,0)"><use data-c="2208" xlink:href="#MJX-1-TEX-N-2208"></use></g><g data-mml-node="msup" transform="translate(17395.1,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="211D" xlink:href="#MJX-1-TEX-D-211D"></use></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1889,0)"></use><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C" transform="translate(2333,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(2449.3,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="msub" transform="translate(3227.3,0)"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><use data-c="1D463" xlink:href="#MJX-1-TEX-I-1D463"></use></g></g></g></g><g data-mml-node="mi" transform="translate(21151,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(21680,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(22280,0)"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="msup" transform="translate(22800,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mi" transform="translate(1136.2,363) scale(0.707)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g><g data-mml-node="mo" transform="translate(24803.5,0)"><use data-c="2208" xlink:href="#MJX-1-TEX-N-2208"></use></g><g data-mml-node="msup" transform="translate(25748.3,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="211D" xlink:href="#MJX-1-TEX-D-211D"></use></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="msub" transform="translate(576,0)"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><use data-c="1D463" xlink:href="#MJX-1-TEX-I-1D463"></use></g></g><g data-mml-node="mo" transform="translate(1521.9,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="msub" transform="translate(2299.9,0)"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1889,0)"></use><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C" transform="translate(2333,0)"></use></g></g></g></g></g><g data-mml-node="mo" transform="translate(29911.5,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g></g></g></svg></mjx-container>

<p>多头注意力代码如下:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiHeadAttention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, h=<span class="number">8</span>, dropout=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MultiHeadAttention, self).__init__()</span><br><span class="line">        self.d_k = d_model // h</span><br><span class="line">        self.h = h</span><br><span class="line">        self.linears = clones(nn.Linear(d_model, d_model), <span class="number">4</span>)</span><br><span class="line">        self.attn = <span class="literal">None</span></span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, query, key, value, mask=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            mask = mask.unsqueeze(<span class="number">1</span>)</span><br><span class="line">        nbatches = query.size(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># projection to h * d_k, split by adding dimension</span></span><br><span class="line">        query, key, value = [</span><br><span class="line">            lin(x).view(nbatches, -<span class="number">1</span>, self.h, self.d_k).transpose(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">for</span> lin, x <span class="keyword">in</span> <span class="built_in">zip</span>(self.linears, (query, key, value))</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># self attention</span></span><br><span class="line">        x, self.attn = attention(query, key, value, mask=mask, dropout=self.dropout)</span><br><span class="line">        <span class="comment"># concate and linear again</span></span><br><span class="line">        x = (x.transpose(<span class="number">1</span>,<span class="number">2</span>).contiguous().view(nbatches, -<span class="number">1</span>, self.h * self.d_k))</span><br><span class="line">        <span class="keyword">del</span> query</span><br><span class="line">        <span class="keyword">del</span> key</span><br><span class="line">        <span class="keyword">del</span> value</span><br><span class="line">        <span class="keyword">return</span> self.linears[-<span class="number">1</span>](x)</span><br></pre></td></tr></table></figure></div>

<h4 id="前馈网络"><a href="#前馈网络" class="headerlink" title="前馈网络"></a>前馈网络</h4><p>前向反馈网络就是一个2层感知机MLP，经过一层ReLU然后再经过一层线性层, 公式如下: </p>
<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.82ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15832.3 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-46" d="M128 619Q121 626 117 628T101 631T58 634H25V680H582V676Q584 670 596 560T610 444V440H570V444Q563 493 561 501Q555 538 543 563T516 601T477 622T431 631T374 633H334H286Q252 633 244 631T233 621Q232 619 232 490V363H284Q287 363 303 363T327 364T349 367T372 373T389 385Q407 403 410 459V480H450V200H410V221Q407 276 389 296Q381 303 371 307T348 313T327 316T303 317T284 317H232V189L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path id="MJX-1-TEX-N-4E" d="M42 46Q74 48 94 56T118 69T128 86V634H124Q114 637 52 637H25V683H232L235 680Q237 679 322 554T493 303L578 178V598Q572 608 568 613T544 627T492 637H475V683H483Q498 680 600 680Q706 680 715 683H724V637H707Q634 633 622 598L621 302V6L614 0H600Q585 0 582 3T481 150T282 443T171 605V345L172 86Q183 50 257 46H274V0H265Q250 3 150 3Q48 3 33 0H25V46H42Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-1-TEX-N-78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="46" xlink:href="#MJX-1-TEX-N-46"></use><use data-c="46" xlink:href="#MJX-1-TEX-N-46" transform="translate(653,0)"></use><use data-c="4E" xlink:href="#MJX-1-TEX-N-4E" transform="translate(1306,0)"></use></g></g><g data-mml-node="mo" transform="translate(2056,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2445,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(3017,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(3683.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(4739.6,0)"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(833,0)"></use><use data-c="78" xlink:href="#MJX-1-TEX-N-78" transform="translate(1333,0)"></use></g><g data-mml-node="mo" transform="translate(6600.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(6989.6,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(7489.6,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(7934.2,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="msub" transform="translate(8506.2,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mn" transform="translate(977,-150) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mo" transform="translate(10109,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(11109.2,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mo" transform="translate(11974.8,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="msub" transform="translate(12363.8,0)"><g data-mml-node="mi"><use data-c="1D44A" xlink:href="#MJX-1-TEX-I-1D44A"></use></g><g data-mml-node="mn" transform="translate(977,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(13966.5,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(14966.8,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g></svg></mjx-container>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PositionwiseFeedForward</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, d_ff, dropout=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(PositionwiseFeedForward, self).__init__()</span><br><span class="line">        self.w1 = nn.Linear(d_model, d_ff)</span><br><span class="line">        self.w2 = nn.Linear(d_ff, d_model)</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.w2(self.dropout(self.w1(x).relu()))</span><br></pre></td></tr></table></figure></div>

<h4 id="LayerNorm"><a href="#LayerNorm" class="headerlink" title="LayerNorm"></a>LayerNorm</h4><p>在每个子层输出还需要做layerNorm和残差连接. LayerNorm的大致公式如下图, LayerNorm主要是将样本值在特征维度上做归一化处理:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/layernorm.png"
                      alt="layerNorm"
                ></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LayerNorm</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, features, eps=<span class="number">1e-6</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(LayerNorm, self).__init__()</span><br><span class="line">        self.gamma = nn.Parameter(torch.ones(features))</span><br><span class="line">        self.beta = nn.Parameter(torch.zeros(features))</span><br><span class="line">        self.eps = eps</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 计算均值和方差</span></span><br><span class="line">        mean = x.mean(dim=-<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        var = x.var(dim=-<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 归一化</span></span><br><span class="line">        x = (x - mean) / torch.sqrt(var + self.eps)</span><br><span class="line">        <span class="comment"># 线性化</span></span><br><span class="line">        x = self.gamma.unsqueeze(-<span class="number">1</span>) * x + self.beta.unsqueeze(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></div>

<h4 id="残差连接"><a href="#残差连接" class="headerlink" title="残差连接"></a>残差连接</h4><p>每个子层的输出将通过残差连接，然后再通过<code>LayerNorm</code>, 这里代码实现将先进行归一化然后再做dropout<a class="link"   href="http://jmlr.org/papers/v15/srivastava14a.html" >(cite) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>最后再进行残差连接, 目的是为了代码简单。<br>子层输出经过公式: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="51.982ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 22976.1 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-24" d="M162 187Q162 164 146 149T109 133H103V130Q108 115 115 105Q122 92 131 82T150 64T170 52T190 44T206 40T220 37L227 36V313Q190 320 162 335Q116 358 86 404T55 508Q55 567 85 614T165 685Q186 696 225 704H227V750H273V704L286 703Q369 690 413 631Q441 588 444 531Q444 514 443 509Q439 490 425 479T391 468Q368 468 353 483T337 522Q337 546 353 560T390 575L394 576V578Q386 599 372 614T342 637T314 649T288 656L273 658V408L288 405Q329 394 355 376Q396 348 420 300T444 199Q444 130 408 76T313 1Q286 -9 276 -9H273V-56H227V-10H221Q202 -6 193 -4T155 11T108 41T74 94T55 176V182Q55 227 95 238Q103 240 108 240Q129 240 145 226T162 187ZM225 657Q219 657 204 651T169 632T135 594T121 538Q121 512 131 491T156 457T187 435T213 423T227 420V539Q227 657 225 657ZM378 169Q378 230 339 265T274 301Q273 301 273 169V37Q324 50 351 87T378 169Z"></path><path id="MJX-1-TEX-N-4C" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z"></path><path id="MJX-1-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-1-TEX-N-79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z"></path><path id="MJX-1-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-1-TEX-N-72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path id="MJX-1-TEX-N-4E" d="M42 46Q74 48 94 56T118 69T128 86V634H124Q114 637 52 637H25V683H232L235 680Q237 679 322 554T493 303L578 178V598Q572 608 568 613T544 627T492 637H475V683H483Q498 680 600 680Q706 680 715 683H724V637H707Q634 633 622 598L621 302V6L614 0H600Q585 0 582 3T481 150T282 443T171 605V345L172 86Q183 50 257 46H274V0H265Q250 3 150 3Q48 3 33 0H25V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-53" d="M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z"></path><path id="MJX-1-TEX-N-75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z"></path><path id="MJX-1-TEX-N-62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-1-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="24" xlink:href="#MJX-1-TEX-N-24"></use></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mi"><use data-c="4C" xlink:href="#MJX-1-TEX-N-4C"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(625,0)"></use><use data-c="79" xlink:href="#MJX-1-TEX-N-79" transform="translate(1125,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(1653,0)"></use><use data-c="72" xlink:href="#MJX-1-TEX-N-72" transform="translate(2097,0)"></use><use data-c="4E" xlink:href="#MJX-1-TEX-N-4E" transform="translate(2489,0)"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(3239,0)"></use><use data-c="72" xlink:href="#MJX-1-TEX-N-72" transform="translate(3739,0)"></use><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D" transform="translate(4131,0)"></use></g></g><g data-mml-node="mo" transform="translate(5464,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(5853,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(6647.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7647.4,0)"><g data-mml-node="mi"><use data-c="53" xlink:href="#MJX-1-TEX-N-53"></use><use data-c="75" xlink:href="#MJX-1-TEX-N-75" transform="translate(556,0)"></use><use data-c="62" xlink:href="#MJX-1-TEX-N-62" transform="translate(1112,0)"></use><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C" transform="translate(1668,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(1946,0)"></use><use data-c="79" xlink:href="#MJX-1-TEX-N-79" transform="translate(2446,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(2974,0)"></use><use data-c="72" xlink:href="#MJX-1-TEX-N-72" transform="translate(3418,0)"></use></g></g><g data-mml-node="mo" transform="translate(11457.4,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(11846.4,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(12418.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(12807.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13196.4,0)"><g data-mml-node="mo"><use data-c="24" xlink:href="#MJX-1-TEX-N-24"></use></g></g><g data-mml-node="mo" transform="translate(13696.4,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(14141.1,0)"><use data-c="1D464" xlink:href="#MJX-1-TEX-I-1D464"></use></g><g data-mml-node="mi" transform="translate(14857.1,0)"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="mi" transform="translate(15433.1,0)"><use data-c="1D452" xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(15899.1,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(16350.1,0)"><use data-c="1D452" xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(16816.1,0)"><g data-mml-node="mo"><use data-c="24" xlink:href="#MJX-1-TEX-N-24"></use></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(17316.1,0)"><g data-mml-node="mi"><use data-c="53" xlink:href="#MJX-1-TEX-N-53"></use><use data-c="75" xlink:href="#MJX-1-TEX-N-75" transform="translate(556,0)"></use><use data-c="62" xlink:href="#MJX-1-TEX-N-62" transform="translate(1112,0)"></use><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C" transform="translate(1668,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(1946,0)"></use><use data-c="79" xlink:href="#MJX-1-TEX-N-79" transform="translate(2446,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(2974,0)"></use><use data-c="72" xlink:href="#MJX-1-TEX-N-72" transform="translate(3418,0)"></use></g></g><g data-mml-node="mo" transform="translate(21126.1,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(21515.1,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(22087.1,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(22476.1,0)"><g data-mml-node="mo"><use data-c="24" xlink:href="#MJX-1-TEX-N-24"></use></g></g></g></g></svg></mjx-container> </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SublayerConnection</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A residual connection followed by a layer norm.</span></span><br><span class="line"><span class="string">    Note for code simplicity the norm is first as opposed to last.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size, dropout</span>):</span><br><span class="line">        <span class="built_in">super</span>(SublayerConnection, self).__init__()</span><br><span class="line">        self.norm = LayerNorm(size)</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, sublayer</span>):</span><br><span class="line">        <span class="string">&quot;Apply residual connection to any sublayer with the same size.&quot;</span></span><br><span class="line">        <span class="keyword">return</span> x + self.dropout(sublayer(self.norm(x)))</span><br></pre></td></tr></table></figure></div>

<p>整个编码层代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EncoderLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size, self_attn, feed_forward, dropout</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.self_attn = self_attn</span><br><span class="line">        self.feed_forward = feed_forward</span><br><span class="line">        self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">2</span>)</span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, mask</span>):</span><br><span class="line">        x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, mask))</span><br><span class="line">        <span class="keyword">return</span> self.sublayer[<span class="number">1</span>](x, self.feed_forward)</span><br></pre></td></tr></table></figure></div>

<h4 id="解码器层"><a href="#解码器层" class="headerlink" title="解码器层"></a>解码器层</h4><p>解码器层比编码器多了一个带<code>mask</code>的多头注意力层，同时编码器的输出也会是解码器的输入，另一个输入是编码器按位之前已经生成结果。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Decoder</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, layer, N</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.layers = clones(layer, N)</span><br><span class="line">        self.norm = LayerNorm(layer.size)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, memory, src_mask, tgt_mask</span>):</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x, memory, src_mask, tgt_mask)</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecoderLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size, self_attn, src_attn, feed_forward, dropout</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;(k,v) from sources called src_attn&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.size = size</span><br><span class="line">        self.self_attn = self_attn</span><br><span class="line">        self.src_attn = src_attn</span><br><span class="line">        self.feed_forward = feed_forward</span><br><span class="line">        self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, memory, src_mask, tgt_mask</span>):</span><br><span class="line">        m = memory</span><br><span class="line">        x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, tgt_mask))</span><br><span class="line">        x = self.sublayer[<span class="number">1</span>](x, <span class="keyword">lambda</span> x: self.src_attn(x, m, m, src_mask))</span><br><span class="line">        <span class="keyword">return</span> self.sublayer[<span class="number">2</span>](x, self.feed_forward)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subsequent_mask</span>(<span class="params">size</span>):</span><br><span class="line">    <span class="string">&quot;Mask out subsequent positions.&quot;</span></span><br><span class="line">    attn_shape = (<span class="number">1</span>, size, size)</span><br><span class="line">    subsequent_mask = torch.triu(torch.ones(attn_shape), diagonal=<span class="number">1</span>).<span class="built_in">type</span>(</span><br><span class="line">        torch.uint8</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> subsequent_mask == <span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<h3 id="整体模型"><a href="#整体模型" class="headerlink" title="整体模型"></a>整体模型</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_model</span>(<span class="params"></span></span><br><span class="line"><span class="params">    src_vocab, tgt_vocab, N=<span class="number">6</span>, d_model=<span class="number">512</span>, d_ff=<span class="number">2048</span>, h=<span class="number">8</span>, dropout=<span class="number">0.1</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;Helper: Construct a model from hyperparameters.&quot;</span></span><br><span class="line">    c = copy.deepcopy</span><br><span class="line">    attn = MultiHeadedAttention(h=h, d_model=model)</span><br><span class="line">    ff = PositionwiseFeedForward(d_model=model, d_ff=d_ff, dropout=dropout)</span><br><span class="line">    position = PositionalEncoding(d_model, dropout)</span><br><span class="line">    model = EncoderDecoder(</span><br><span class="line">        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),</span><br><span class="line">        Decoder(DecoderLayer(d_model, c(attn), c(attn), c(ff), dropout), N),</span><br><span class="line">        nn.Sequential(Embeddings(d_model, src_vocab), c(position)),</span><br><span class="line">        nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),</span><br><span class="line">        Generator(d_model, tgt_vocab),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This was important from their code.</span></span><br><span class="line">    <span class="comment"># Initialize parameters with Glorot / fan_avg.</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters():</span><br><span class="line">        <span class="keyword">if</span> p.dim() &gt; <span class="number">1</span>:</span><br><span class="line">            nn.init.xavier_uniform_(p)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有训练的模型测试记录能力，结果是不能记忆输入。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inference_test</span>():</span><br><span class="line">    test_model = make_model(<span class="number">11</span>, <span class="number">11</span>, <span class="number">2</span>)</span><br><span class="line">    test_model.<span class="built_in">eval</span>()</span><br><span class="line">    src = torch.LongTensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])</span><br><span class="line">    src_mask = torch.ones(<span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    memory = test_model.encode(src, src_mask)</span><br><span class="line">    ys = torch.zeros(<span class="number">1</span>, <span class="number">1</span>).type_as(src)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        out = test_model.decode(</span><br><span class="line">            memory, src_mask, ys, subsequent_mask(ys.size(<span class="number">1</span>)).type_as(src.data)</span><br><span class="line">        )</span><br><span class="line">        prob = test_model.generator(out[:, -<span class="number">1</span>])</span><br><span class="line">        _, next_word = torch.<span class="built_in">max</span>(prob, dim=<span class="number">1</span>)</span><br><span class="line">        next_word = next_word.data[<span class="number">0</span>]</span><br><span class="line">        ys = torch.cat(</span><br><span class="line">            [ys, torch.empty(<span class="number">1</span>, <span class="number">1</span>).type_as(src.data).fill_(next_word)], dim=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Example Untrained Model Prediction:&quot;</span>, ys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_tests</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        inference_test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_example</span>(<span class="params">fn, args=[]</span>):</span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> fn(*args)</span><br><span class="line"></span><br><span class="line">show_example(run_tests)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>transformer, AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Use CDS Authoring Tool</title>
    <url>/2023/06/12/Use-CDS-Authoring/</url>
    <content><![CDATA[<h1 id="使用CDS作者工具"><a href="#使用CDS作者工具" class="headerlink" title="使用CDS作者工具"></a>使用CDS作者工具</h1><blockquote>
<p>CDS Connect 作者工具是一种用于创建临床决策支持规则的工具。此工具提供了一个用户友好的界面，供医疗保健专业人员和技术人员使用。它允许用户创建、编辑和管理临床决策支持规则，这些规则可以帮助医生在临床实践中做出更明智的决策。</p>
</blockquote>
<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p><code>CDS Connect</code>项目开源了一个工具<a class="link"   href="https://github.com/AHRQ-CDS/AHRQ-CDS-Connect-Authoring-Tool" >Authoring tool <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>用于快速创建临床辅助的规则、内容。有了这个工具可以方便地编写CQL（Clinical Quality Language）表达，而不用非常了解语法细节。该工具使用基于标准化的临床知识表示形式，如CQL和FHIR（Fast Healthcare Interoperability Resources）。用户可以根据特定的临床指南、研究结果和实践经验，使用这些规则来定义临床决策的逻辑和条件。CDS Connect 作者工具还提供了验证和测试功能，以确保创建的规则能够正确地应用于真实的临床环境。它还支持与其他系统的集成，可以将创建的规则导出为可用于不同临床决策支持系统的格式。下面就配合官方文档，简单地用一个例子作一下演示。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><code>Element</code>元素。CDS每条规则由元素组成，每个元素描述了一条规则用于决定某个患者是否满足临床辅助推荐的标准。</li>
<li><code>Inclusion</code>包含。即患者满足某个元素的一条标准。</li>
<li><code>Exclusion</code>排除。即患者不满足某个推荐要求。</li>
<li><code>Subpopulation</code>亚群体。即亚群体需要更多的具体推荐才能作出决定。</li>
<li><code>Base Element</code>基础元素。可以自定义的基础元素。</li>
<li><code>Recommendation</code>推荐。当满足条件是cds给出的建议内容。</li>
<li><code>Parameter</code>参数。可以在运行时动态的输出参数。</li>
</ul>
<h3 id="创建和编辑元素流程"><a href="#创建和编辑元素流程" class="headerlink" title="创建和编辑元素流程"></a>创建和编辑元素流程</h3><p>通常步骤包括：</p>
<ol>
<li><p>首先选择一个元素，元素通常是一个FHIR资源类型，如<code>Condition</code>或<code>Observation</code>。元素的类型也会取决哪些数据需要从患者数据（病例记录）中来。具体的元素类型有：</p>
<ul>
<li><code>Allergy Intolerance</code>过敏不耐受: Instances of the FHIR <code>AllergyIntolerance</code> resource type.</li>
<li><code>Base Elements</code>基本元素: Re-usable elements defined in the “Base Elements” tab. 可重复使用的基本元素。</li>
<li><code>Condition</code>病情: Instances of the FHIR <code>Condition</code> resource type.</li>
<li><code>Demographics</code>人口统计学: Age or Gender as specified in an instance of the FHIR Patient resource type</li>
<li><code>Device</code>设备: Instances of the FHIR <code>Device</code> resource type.</li>
<li><code>Encounter</code>就诊: Instances of the FHIR <code>Encounter</code> resource type.</li>
<li><code>External CQL</code>外部CQL: Named CQL definitions, parameters, and functions from CQL files uploaded in the “External CQL” tab. 来自“外部CQL”标签中上传的命名CQL定义、参数和函数.</li>
<li><code>Immunization</code>免疫: Instances of the FHIR <code>Immunization</code> resource type</li>
<li><code>Medication Statement</code>用药记录: Instances of the FHIR <code>MedicationStatement</code> resource type</li>
<li><code>Medication Request</code>用药请求: Instances of the FHIR <code>MedicationRequest</code>(STU3&#x2F;R4) or MedicationOrder(DSTU2) resource type</li>
<li><code>Observation</code>观测: Instances of the <code>Observation</code> resource type</li>
<li><code>Parameters</code>参数: Parameter values for parameters defined in the “Parameters” tab. 在“参数”标签中定义的参数值.</li>
<li><code>Procedure</code>手术: Instances of the FHIR <code>Procedure</code> resource type</li>
<li><code>ServiceRequest</code>服务请求: Instances of the FHIR <code>ServiceRequest</code> resource type, available only in FHIR R4</li>
</ul>
</li>
<li><p>然后根据所选元素类型，赋予更多的具体含义，如赋予最少一个键值对（这里的键值对是指一组code，这些code会用来匹配患者病历的记录。举个例子，糖尿病会包含多个code来代表不同糖尿病诊断，如一型、二型糖尿病。同时不同的编码系统如ICD-9,ICD-10,SNOMED-CT又有不同值。所以使用键值对可以方便地把所有对应的编码code一次性地和患者电子病历记录匹配起来）或者code编码（单独赋予code需要指定编码系统并验证，如果是第三方编码系统需要指定FHIR兼容的URL），如<code>Condition</code>-&gt;<code>Diabetes</code>症状对应糖尿病，<code>Observation</code>-&gt;<code>LDL Cholesterol Test</code>观测对应LDL胆固醇检测；又如通过表单提供额外的信息(目前仅用于人口统计学)。</p>
</li>
<li><p>命名元素。所有的元素可以被自定义命名，以便更好地体现用意。</p>
</li>
<li><p>备注元素。所有元素也支持被标注，添加评论, 但是评论是不会参与决策逻辑的判别。评论主要的应用场景有：</p>
<ul>
<li>提供创建该元素的理由，或指示在创建该元素时做出的决策以及为何做出该决策。</li>
<li>提供对该元素所包含的复杂逻辑的简要总结，或进一步解释构建该元素的目的。</li>
<li>指示元素逻辑的来源并提供必要的参考文献。</li>
<li>指示实施者可能基于特定场地需求而希望修改的逻辑部分。</li>
</ul>
</li>
<li><p>修改结果。通过自定义修改或者选择内建的表达式进一步过滤结果，得到元素类型需要得出的结果。工具自带的修改器能覆盖一般的场景，同时修改器还可以串联逻辑，应用多个过滤条件得到最终结果。</p>
</li>
</ol>
<p>5.1 （可选）使用自建修改器定义逻辑。如果作者想进行更加精准的控制，可以自建逻辑，有的时候自建修改器可能不如外部导入CQL方便。当前版本（June, 2023）自定义修改器只能对 FHIR 资源实例的列表进行过滤。未来的版本可能提供额外的功能，如排序和返回特定属性。</p>
<p>6.测试artifact。在将 CDS 逻辑部署到测试环境之前进行测试，可以让作者在流程早期发现和修复错误，从而节省时间和金钱。CDS创作工具的测试允许作者上传其自己合成的测试患者，这些患者以FHIR资源形式存在。现存的患者测试数据构造工具主要 <a class="link"   href="https://github.com/AHRQ-CDS/CQL-Testing-Framework" >CQL Testing Framework <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> , <a class="link"   href="https://github.com/synthetichealth/synthea" >Synthea <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> , <a class="link"   href="http://clinfhir.com/" >ClinFHIR <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> , and <a class="link"   href="https://build.fhir.org/ig/HL7/fhir-shorthand/" >FHIR® Shorthand <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> .然后，作者可以针对其中一个或多个患者运行他们的CDS逻辑，并检查结果以确定其是否符合预期。CDS创作工具目前不提供测试患者编辑器，也没有提供结果自动验证的机制（例如，“测试断言”）。对于更高级的测试功能，请考虑使用CDS Connect的<a class="link"   href="https://github.com/AHRQ-CDS/CQL-Testing-Framework" >CQL测试框架 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p>虽然元素本身可以很有用，但通常它们会与其他元素结合使用，以表示更复杂的思想或要求。CDS 作者工具支持以下元素组合方式：</p>
<ul>
<li>与（And）：要求一组布尔元素中的每个元素都为真。</li>
<li>或（Or）：要求一组布尔元素中至少有一个元素为真。</li>
<li>缩进组（Indented Group）：将一组元素组合在一起，表示一个单一的逻辑单元。</li>
<li>交集（Intersect）：找出一组元素中每个元素中都出现的项目集合。使用“交集”组合方式表示应检查每个元素，并仅将与每个元素匹配的项目包含在交集结果中。例如，如果将表示已确认的心肌梗塞的元素与表示过去六个月内的心肌梗塞的元素使用“交集”进行组合，结果将仅包含同时在两个元素集合中的心肌梗塞（即已确认且在过去六个月内）。“交集”组合方式只能在“基本元素（Base Elements）”选项卡中使用“列表操作（List Operations）”元素类型进行应用。</li>
<li>并集（Union）：将多个元素中的项目合并为一个项目集合。使用“并集（Union）”组合方式表示应将所有元素中的所有项目合并为一个项目集合。例如，使用“并集”将LDL-c元素与HDL-c元素组合，将得到所有的LDL-c和HDL-c观测结果。并集只能在“基本元素（Base Elements）”选项卡中使用“列表操作（List Operations）”元素类型应用“并集”组合方式。</li>
</ul>
<h3 id="Subpopulation亚群体页"><a href="#Subpopulation亚群体页" class="headerlink" title="Subpopulation亚群体页"></a>Subpopulation亚群体页</h3><p>作者可以使用“亚人群（Subpopulations）”选项卡来指定将患者分组，组内的亚群体适用标准为更具体的相关建议。虽然亚人群不是必需的，但对于需要提供更细致建议或与特定人群相关的建议而言，它们非常有用。例如，他汀类药物artifact可能会针对10年风险评分为8%的患者和10年风险评分为12%的患者提供不同强度的建议。“亚人群”选项卡允许作者创建所需的亚人群。对于每个亚人群，作者必须指定一个唯一的名称，然后根据上述部分的描述创建和组合元素。</p>
<h3 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h3><p>作者可以使用“基本元素（Base Elements）”创建artifact，基础元素可以是在上下文中多次使用。这样一来，常用元素只需定义一次，就可以在需要的任何地方使用，并可进行进一步修改。作者可以在任何特定上下文之外定义独立的元素，并将这些元素按原样导出为CQL。基于基本元素创建的元素会以浅蓝色进行阴影处理，以便更容易区分。此外，在元素定义的内容中使用“基本元素”标签列出了原始基本元素的名称。如果您点击基本元素名称最右侧的链接图标，将直接进入基本元素的定义页面。请注意，在使用基本元素时会有一些限制。其中之一是您不能删除它。要删除正在使用的基本元素，必须首先删除（或编辑）其所有用到的地方。另一个限制是，如果删除应用表达式会改变基本元素的返回类型，则无法删除该表达式。这确保修改基本元素不会使其使用变得无效。为了删除表达式，请首先删除工件中所有对基本元素的使用。此外，在正在使用的基本元素上无法添加修改器，除非修改器不会改变元素的整体返回类型。如果修改器会改变基本元素的返回类型，则必须先删除工件中所有对基本元素的使用，然后再添加修改器。</p>
<h3 id="推荐页面Recommendation"><a href="#推荐页面Recommendation" class="headerlink" title="推荐页面Recommendation"></a>推荐页面Recommendation</h3><p>推荐页面是CDS artifact在执行后会给临床医生一个推荐，推荐的具体内容可以被编辑并伴随合理的推荐理由。推荐也可以分亚群定制不同的内容。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>在CDS运行时输入参数可以动态的输出结果。参数可以有默认值，主要类型有:<br><code>Boolean, Code, Concept, Integer, DateTime, Decimal, Quantity, String, Time, Interval&lt;Integer&gt;, Interval&lt;DateTime&gt;, Interval&lt;Decimal&gt;, and Interval&lt;Quantity&gt;</code></p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>作者使用“处理错误”选项卡来定义在特定错误条件发生时向最终用户提供哪些信息。例如，作者可能希望在患者健康记录中缺少必要数据时返回错误消息。处理错误是可选的，对于某些用例可能不需要或不实用。</p>
<h3 id="外部CQL"><a href="#外部CQL" class="headerlink" title="外部CQL"></a>外部CQL</h3><p>外部CQL可以通过页面上传并校验格式，外部CQL特别适合某些复杂数学计算和时间关系此工具处理不了的情况。同时外部CQL是read-only的类型。</p>
]]></content>
  </entry>
  <entry>
    <title>Health Data Security Guide</title>
    <url>/2023/02/21/health-data-security-guide/</url>
    <content><![CDATA[<blockquote>
<p>This article is a translation of Chinese national standard GB&#x2F;T39725-2020.</p>
</blockquote>
<h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0. Introduction"></a>0. Introduction</h2><p>Health data includes personal health data and health related data obtained from processed system. With the vigorous development of health application, “Internet + health” and intelligent medical care, various new businesses and applications are emerging, and health data are facing more and more security challenges in all stages of the life cycle, and security issues are frequently occurring. Since the security of health data is related to the safety of patients’ lives, personal information security, social public interest and national security, in order to better protect the security of health data, regulate and promote the integration and sharing of health data, development and application, and promote the development of health business, this health data security guideline is formulated. </p>
<h2 id="1-Scope"><a href="#1-Scope" class="headerlink" title="1. Scope"></a>1. Scope</h2><p>This standard gives the security measures that health data controllers can take when protecting health data.<br>This standard is suitable for guiding health data controllers in the security protection of health data, and can also be used as a reference for health, cyber security-related authorities and third-party assessment organizations to carry out security supervision, management and assessment of health data. </p>
<h2 id="2-Normative-Reference"><a href="#2-Normative-Reference" class="headerlink" title="2. Normative Reference"></a>2. Normative Reference</h2><p>The following documents are essential to the application of this document. Where a reference document is dated, only the dated version applies to this document. Where the reference document is not dated, its latest version (including all the change orders) applies to this document. </p>
<table>
<thead>
<tr>
<th>National standard document code</th>
<th>Category</th>
<th>Document Name</th>
<th>Applicable</th>
</tr>
</thead>
<tbody><tr>
<td>GB&#x2F;T 22080—2016</td>
<td>Information Security tech</td>
<td>Information Security Management System</td>
<td>Required</td>
</tr>
<tr>
<td>GB&#x2F;T 22081—2016</td>
<td>Information Security tech</td>
<td>Information Security Control Practice Guide</td>
<td>Guide</td>
</tr>
<tr>
<td>GB&#x2F;T 22239—2019</td>
<td>Information Security tech</td>
<td>Baseline for Classified protection of cybersecurity</td>
<td>Required</td>
</tr>
<tr>
<td>GB&#x2F;T 25069</td>
<td>Information Security tech</td>
<td>Terminology</td>
<td></td>
</tr>
<tr>
<td>GB&#x2F;T 31168</td>
<td>Information Security tech</td>
<td>Security capability requirements of cloud computing services</td>
<td>Required</td>
</tr>
<tr>
<td>GB&#x2F;T 35273</td>
<td>Information Security tech</td>
<td>Personal information security specification</td>
<td>Guide</td>
</tr>
<tr>
<td>GB&#x2F;T 35274—2017</td>
<td>Information Security tech</td>
<td>Security capability requirements for big data services</td>
<td>Required</td>
</tr>
<tr>
<td>GB&#x2F;T 37964—2019</td>
<td>Information Security tech</td>
<td>Guide for de-identifying personal information</td>
<td>Guide</td>
</tr>
<tr>
<td>ISO 80001</td>
<td></td>
<td>Application of risk management for IT-networks incorporating medical devices</td>
<td></td>
</tr>
</tbody></table>
<h2 id="3-Terms-amp-Definition"><a href="#3-Terms-amp-Definition" class="headerlink" title="3. Terms &amp; Definition"></a>3. Terms &amp; Definition</h2><h3 id="3-1-Personal-health-data"><a href="#3-1-Personal-health-data" class="headerlink" title="3.1 Personal health data"></a>3.1 Personal health data</h3><p>Electronic data that, alone or in combination with other information, can identify a specific natural person or reflect the physical or mental health of a specific natural person Data.<br>Note: Personal health data includes an individual’s past, present or future physical or mental health, received health services and health services paid for, etc. See Appendix A.</p>
<h3 id="3-2-Health-data"><a href="#3-2-Health-data" class="headerlink" title="3.2 Health data"></a>3.2 Health data</h3><p>Personal health data and health-related electronic data obtained by processing<br>Examples: Overall group analysis results, trend forecasts, disease prevention and control statistics, etc., obtained after processing group health data.</p>
<h3 id="3-3-Health-service-professional"><a href="#3-3-Health-service-professional" class="headerlink" title="3.3 Health service professional"></a>3.3 Health service professional</h3><p>A person authorized by a government or industry organization to be qualified to perform specific health work.<br>Example: Doctors.</p>
<h3 id="3-4-Health-service"><a href="#3-4-Health-service" class="headerlink" title="3.4 Health service"></a>3.4 Health service</h3><p>Services provided by a health professional or paraprofessional that have an impact on a health condition.</p>
<h3 id="3-5-Health-data-controller"><a href="#3-5-Health-data-controller" class="headerlink" title="3.5 Health data controller"></a>3.5 Health data controller</h3><p>An organization or individual who can determine the purpose, manner, and scope of health data processing, etc.<br>Example: Organizations that provide health services, health insurance agencies, government agencies, health scientific research institutions, individual clinics, etc.</p>
<h3 id="3-6-Health-information-system"><a href="#3-6-Health-information-system" class="headerlink" title="3.6 Health information system"></a>3.6 Health information system</h3><p>A system for capturing, storing, processing, transmitting, accessing, and destroying health data in a computed form.</p>
<h3 id="3-7-Limited-data-set"><a href="#3-7-Limited-data-set" class="headerlink" title="3.7 Limited data set"></a>3.7 Limited data set</h3><p>Personal health data sets that have been partially de-identified but still are able to identify the corresponding individual and therefore need to be protected.<br>Example: Removal of identifiers directly related to the individual and his or her dependents, family members, and employers from health data.<br>Note: Limited datasets may be used for scientific research, medical&#x2F;health education, and public health purposes without the authorization of the individual.</p>
<h3 id="3-8-Notes-of-treatment"><a href="#3-8-Notes-of-treatment" class="headerlink" title="3.8 Notes of treatment"></a>3.8 Notes of treatment</h3><p>Observations, reflections, treatment, discussions, and conclusions recorded by health professionals in the course of providing health services.<br>Note: Treatment notes have intellectual property attributes and are the property of the health professional and&#x2F;or his or her organization.</p>
<h3 id="3-9-Disclosure"><a href="#3-9-Disclosure" class="headerlink" title="3.9 Disclosure"></a>3.9 Disclosure</h3><p>The act of transferring and sharing health data to specific individuals or organizations, as well as publicly releasing it to unspecified individuals, organizations or society.</p>
<h3 id="3-10-Clinical-research"><a href="#3-10-Clinical-research" class="headerlink" title="3.10 Clinical research"></a>3.10 Clinical research</h3><p>Scientific research activities aimed at exploring the causes, prevention, diagnosis, treatment and prognosis of diseases, initiated by medical institutions, academic research institutions and&#x2F;or medical and health-related companies, with patients or healthy people as research subjects.<br>Note: Clinical research belongs to a branch of medical research.</p>
<h3 id="3-11-Completely-public-sharing"><a href="#3-11-Completely-public-sharing" class="headerlink" title="3.11 Completely public sharing"></a>3.11 Completely public sharing</h3><p>Once data is released, it is difficult to recall and is generally released directly and publicly via the Internet. See [GB&#x2F;T37964—2019, 3.12].</p>
<h3 id="3-12-Controlled-public-sharing"><a href="#3-12-Controlled-public-sharing" class="headerlink" title="3.12 Controlled public sharing"></a>3.12 Controlled public sharing</h3><p>Control the use of data through data use agreements. See [GB&#x2F;T37964—2019, 3.13].</p>
<h3 id="3-13-Enclave-public-sharing"><a href="#3-13-Enclave-public-sharing" class="headerlink" title="3.13 Enclave public sharing"></a>3.13 Enclave public sharing</h3><p>Shared within the physical or virtual territory, data cannot flow outside the territory. See [BG&#x2F;T37964—2019, 3.14].</p>
<h2 id="4-Abbreviations"><a href="#4-Abbreviations" class="headerlink" title="4. Abbreviations."></a>4. Abbreviations.</h2><p>Following are the abbreviations.</p>
<ul>
<li>ACL: （Access Control Lists）</li>
<li>API: （Application Programming Interface）</li>
<li>APP: （Application）</li>
<li>DNA: （Deoxyribonucleic Acid）</li>
<li>EDC:  (Electronic Data Capture)</li>
<li>GCP：（Good Clinical Practice）</li>
<li>HIS: （Hospital Information System）</li>
<li>HIV: （Human Immunodeficiency Virus） </li>
<li>HL7: （Health Level Seven）</li>
<li>ID：（Identity）</li>
<li>IP: （Internet Protocol）</li>
<li>IPSEC：（Internet Protocol Security）</li>
<li>LDS：（Limited Data Set Files）</li>
<li>PIN: （Personal Identity Number） </li>
<li>PUF：（Public Use Files）</li>
<li>RIF: （Research Identifiable Files）</li>
<li>RNA: （Ribonucleic Acid）</li>
<li>SQL: （Structured Query Languages）</li>
<li>TLS：（Transport Layer Security）</li>
<li>USB：（Universal Serial Bus）</li>
<li>VPN: （Virtual Private Network）</li>
<li>XSS：（Cross-site scripting）</li>
</ul>
<h2 id="5-Security-Target"><a href="#5-Security-Target" class="headerlink" title="5. Security Target"></a>5. Security Target</h2><p>Health data controllers are advised to adopt reasonable and appropriate management and technical safeguards to achieve the following objectives<br>a) Ensure the confidentiality, integrity and availability of health data.<br>b) Ensure the legality and compliance of the health data use and disclosure process to protect the security of personal information, public interest and national security.<br>c) Ensure that health data meets business development needs while meeting the above security requirements.</p>
<h2 id="６-Classification"><a href="#６-Classification" class="headerlink" title="６. Classification"></a>６. Classification</h2><h3 id="6-1-Data-Category"><a href="#6-1-Data-Category" class="headerlink" title="6.1  Data Category"></a>6.1  Data Category</h3><p>Health data can be classified as<br>a) Personal attribute, is data that alone or in combination with other information, can identify a specific natural person.<br>b) Health status, is data that reflects or is closely related to the health condition of an individual.<br>c) Medical application data, is data that reflects medical care, outpatient, inpatient, discharge, and other medical services.<br>d) Health payment data, are data related to the costs involved in services such as health or insurance.<br>e) Health resource data, are those data that capture the capacity and characteristics of health providers, health programs, and health systems.<br>f) Public health data, are data related to public utilities that are relevant to the public health of a country or region.</p>
<p>The specific content of each type of data is shown in Table 1. The data elements, data sets, value codes and other related standards used in the health information domain can be found in Appendix B.</p>
<center>Table 1</center>

<table>
<thead>
<tr>
<th>Data Category</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>Personal attribute</td>
<td>1) Demographic information, including name, date of birth, gender, ethnicity, nationality, occupation, address, employer, family member information, contact information, income, marital status, etc. 2) personal identification information, including name, ID card, work permit, residence permit, social security card, images that can identify the individual, health card number, hospitalization number, various types of examination and test-related bill numbers, etc. 3) personal communication information, including personal telephone numbers, mailboxes, account numbers and associated information, etc. 4) personal biometric information, including genetic, fingerprint, voice print, palm print, ear, iris, facial features, etc. 5) personal health monitoring sensor ID, etc.</td>
</tr>
<tr>
<td>Health status</td>
<td>Chief complaint, current and past medical history, physical examination (signs), family history, symptoms, test and examination data, genetic counseling data, health-related data collected by wearable devices, lifestyle, gene sequencing, transcription product sequencing, protein analysis and measurement, metabolic small molecule testing, human microbial testing, etc.</td>
</tr>
<tr>
<td>Medical application data</td>
<td>Outpatient (emergency) medical records, inpatient medical prescriptions, examination and test reports, medication information, course records, surgery records, anesthesia records, blood transfusion records, nursing records, admission records, discharge summaries, referral (hospital) records, informed information, etc.</td>
</tr>
<tr>
<td>Medical payment data</td>
<td>1) Medical transaction information, including medical insurance payment information, transaction amount, transaction records, etc. 2）Insurance information, including insurance status, insurance amount, etc.</td>
</tr>
<tr>
<td>Health Resource data</td>
<td>Basic hospital information, hospital operation data, etc.</td>
</tr>
<tr>
<td>Public health data</td>
<td>Environmental health data, epidemic disease data, disease monitoring data, disease prevention data, birth and death data, etc.</td>
</tr>
</tbody></table>
<h3 id="6-2-Data-Grading"><a href="#6-2-Data-Grading" class="headerlink" title="6.2 Data Grading"></a>6.2 Data Grading</h3><p>Health data can be classified into the following five levels based on the level of data importance, risk level, and the level of possible damage and impact on the individual.<br>(a) Level 1: Data that can be used completely public. This includes data that can be accessed through public channels, such as hospital names, addresses, telephone numbers, etc., which can be directly disclosed to the public on the Internet.<br>(b) Level 2: Data that can be accessed on a large scale. For example, data that cannot identify individuals and can be used for research and analysis by doctors in each department upon application for approval.<br>(c) Level 3: Data that can be accessed on a medium scale and may cause moderate damage to individual subjects if disclosed without authorization. For example, data that has been partially de-identified, but may still be re-identified, is limited to use within the scope of the authorized project team.<br>d) Level 4: Data that is available for access use on a small scale and may cause a high degree of harm to the individual if disclosed without authorization. For example, data that can directly identify an individual is restricted to access and use by health professionals involved in healthcare activities.<br>(e) Level 5: Data that is accessible only to a very small extent and under strictly limited conditions, which, if disclosed without authorization, may cause serious damage to the individual subject. For example, details of specific diseases (e.g., AIDS, STDs) are restricted to access by treating health professionals and require strict controls.</p>
<h3 id="6-3-Roles-Classification"><a href="#6-3-Roles-Classification" class="headerlink" title="6.3 Roles Classification"></a>6.3 Roles Classification</h3><p>For a data-specific scenario, the relevant organizations or individuals can be classified into the following four types of roles. Any organization or individual can only be classified into one of these roles for a specific data, a specific scenario or a specific data processing behavior.<br>(a) Personal health data subject (hereinafter referred to as “subject”): the natural person identified by personal health data.<br>(b) Health data controller (hereinafter referred to as “controller”): See Definition 3.5. To decide whether an organization or individual can determine the purpose, manner, and scope of health data processing, it is possible to consider<br>    - 1) Whether the processing of health data is necessary for the organization or individual to comply with a law or regulation.<br>    - 2) whether the health data processing is necessary for the organization or individual to perform its public functions.<br>    - 3) whether the health data processing is decided by the organization or individual itself or jointly with other organizations or individuals.<br>    - 4) Whether the health data processing is authorized by the individual or by the government authorize to the organization or the individual.</p>
<p>The organization or individual who jointly decides the purpose, manner, and scope of a data processing is the joint controller.<br>(c) Health data processor (hereinafter referred to as “processor”): An organization or individual that collects, transmits, stores, uses, processes or discloses health data in its possession on behalf of the controller, or provides the controller with services related to the use, processing or disclosure of health data. Common processors include: health information system providers, health data analysis companies, and assisted treatment solution providers.<br>(d) Health data users (hereinafter referred to as “users”): Organizations or individuals who do not belong to the subjects, controllers or processors, but make use of health data for specific scenarios of specific data.</p>
<h3 id="6-4-Data-Flow-Scenarios"><a href="#6-4-Data-Flow-Scenarios" class="headerlink" title="6.4  Data Flow Scenarios"></a>6.4  Data Flow Scenarios</h3><p>Based on the data flow between different roles, the data exchange usage scenarios can be divided into the following six types, as shown in Figure 1.<br>a) Subjects-&gt;controller data flow.<br>b) Controller-&gt;subjects data flow.<br>c) Controller&lt;-&gt;controller intra data flow.<br>d) Controller&lt;-&gt;processor data exchange.<br>e) Inter-controller data exchange.<br>f) Controller -&gt; users data flow.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/filess/img15@main/2023/02/20/1676885763779-aad14d99-2adb-4d70-9dde-cbe4469005f2.png"
                     
                ></p>
<center>Figure 1 </center>

<h3 id="6-5-Data-Public-Ways"><a href="#6-5-Data-Public-Ways" class="headerlink" title="6.5 Data Public Ways"></a>6.5 Data Public Ways</h3><p>The types of data public can be divided into completely public sharing, controlled public sharing, and enclave public sharing, which correspond to different de-identification requirements and are handled by the regulations of GB&#x2F;T37964–2019. Common forms of data openness and their applicable types of sharing are shown in Table 2.</p>
<table>
<thead>
<tr>
<th>Ways of open</th>
<th>Description</th>
<th>Applicable type of sharing</th>
</tr>
</thead>
<tbody><tr>
<td>Public website</td>
<td>Statistical aggregated data or anonymized data are available to the public and can be downloaded and analyzed by themselves.</td>
<td>Completely public</td>
</tr>
<tr>
<td>File share</td>
<td>Generated files from data systems and push them to SFTP interface devices or applications, or share them using mobile media</td>
<td>Controlled public</td>
</tr>
<tr>
<td>API interface</td>
<td>Data is provided between systems through request-response, with the data system providing real-time or quasi-real-time data service application interfaces to specific users, with the demand-side system initiating the request and the data system returning the required data, e.g. through the Webservice interface</td>
<td>Controlled public</td>
</tr>
<tr>
<td>Online query</td>
<td>Query the web page provided by the data system for relevant information</td>
<td>Completely public sharing of data (anonymous queries). Controlled public sharing (user query)</td>
</tr>
<tr>
<td>Data analysis platform</td>
<td>The platform provides system environment, analytical mining tools, and de-identified sample data or simulation data. Platform users use shared or dedicated hardware and data resources, can deploy their own data and data analysis algorithms, and can query the data and analysis results within their authority. All the original data of the platform cannot be exported; the output and download of analysis results must be approved by the approval before they can be exported to the public</td>
<td>enclave public sharing</td>
</tr>
</tbody></table>
<h2 id="7-Use-and-Disclosure-Principles"><a href="#7-Use-and-Disclosure-Principles" class="headerlink" title="7. Use and Disclosure Principles"></a>7. Use and Disclosure Principles</h2><p>It is appropriate for the controller to follow the below principles in the use or disclosure of health data.</p>
<ul>
<li>a) When using or disclosing personal health data, it is appropriate for the controller to inform the subject and obtain the subject’s authorization (except in the case of b below); all communications are appropriate in plain language and contain specific information about the content of the data to be disclosed or used, the recipient of the data, the purpose of the data and how it will be used, the duration of the use of the data, the rights of the data subject, and the protective measures taken by the controller. The use or disclosure of personal health data must not exceed the scope of the individual’s authorization. If it is necessary to use or disclose beyond the scope due to business needs, it is appropriate to obtain the consent of the subject again.</li>
<li>b) A controller may use or disclose personal health data without the subject’s authorization in the following cases.<ol>
<li>When providing the subject with his or her own health data.</li>
<li>When treatment, payment or health service is provided.</li>
<li>When required by public interest or laws and regulations</li>
<li>when the limited data set is used for scientific research, medical&#x2F;health education, or public health purposes.<br>In the above cases, the controller may rely on legal and regulatory requirements, professional ethics, ethical and professional judgment to determine which personal health data are allowed to be used or disclosed.</li>
</ol>
</li>
<li>c) It is appropriate for the controller to obtain authorization from the subject to use or disclose personal health data for marketing activities, except for face-to-face marketing communications between the controller and the subject. It is appropriate for the authorization for marketing activities to be communicated to the subject in a reasonable manner and for the subject to be fully informed and to give explicit and autonomous consent. The authorization should be independent and should not be a precondition for the subject to obtain any public service or medical service or bundled with other service terms. The controller is advised to inform the subject in writing, at the same time as obtaining the authorization, of its right to revoke the authorization at any time.</li>
<li>d) The subject (or his authorized representative) has the right to access his personal health data or to request disclosure of his data, and the controller is advised to disclose the corresponding personal health data upon his request.</li>
<li>e) The subject has the right to review and obtain a copy of his or her personal health data, which the controller may provide, for example, through file sharing or online access.</li>
<li>f) If the subject discovers that the controller holds inaccurate or incomplete personal health data about the subject, the controller is encouraged to provide the subject with the means to request correction or additional information.</li>
<li>g) The Subject has the right to a historical review of the use or disclosure of data by the Controller or its processors for a minimum period of six years.</li>
<li>h) The Subject has the right to request the Controller to restrict the use or disclosure of its personal health data in the course of diagnosis, treatment, payment, health services, etc., as well as to restrict the disclosure of information to related persons, and the Controller is not obliged to agree to such restriction requests; however, once agreed, it is appropriate for the Controller to comply with the agreed restrictions unless required by law or regulation and in medical emergencies.</li>
<li>i) Controllers may use treatment notes for therapeutic purposes and, after necessary de-identification, may use or disclose treatment notes for internal training and academic seminars without individual authorization.</li>
<li>j) It is appropriate for the controller to develop and implement reasonable strategies and processes to limit use and disclosure to a minimum.</li>
<li>k) Controllers are advised to confirm that the security capabilities of the processor meet the security requirements and to sign a data processing agreement before allowing the processor to perform data processing for them. Processors are advised to process data in accordance with the controller’s requirements, and processors cannot bring in third parties to assist in data processing without the controller’s permission.</li>
<li>l）Before the controller provides the data to the third party controller authorized by the government, it is appropriate to obtain the relevant documents with the official seal of the government, and after the data is provided, the responsibility for data security and the security of the transmission channel shall be borne by the third party controller.</li>
<li>m) The controller may use the limited data set for scientific research, healthcare services, public health and other purposes after confirming the legality, legitimacy and necessity of data use and that the user has the appropriate data security capabilities, and the user has signed a data use agreement and committed to protecting the personal healthcare data in the limited data set; the user may only use the data within the scope agreed upon in the agreement and assume the responsibility for data security, and after the use of the data is completed, it is appropriate to return, completely destroy or otherwise dispose of the data in accordance with the controller’s requirements. Users may not disclose data to third parties without the permission of the controller.</li>
<li>n) If the controller obtains health-related data that does not identify the individual after aggregation and analysis of personal health data, the data is no longer personal information, but its use and disclosure are subject to other relevant national regulatory requirements.<br>o) If the controller needs to provide the corresponding data outside of China for academic research, after the necessary de-identification process and after discussion and approval by the Data Security Committee, non-confidential and non-important data within 250 items can be provided, otherwise it is appropriate to submit it to the relevant department for approval.</li>
<li>p) Data that does not involve state secrets, important data or other data that are prohibited or restricted from being provided outside the country, the controller may provide personal health data to overseas destinations with the consent of the subject’s authorization and the consent of the Data Security Committee for discussion and approval, and it is appropriate to control the cumulative amount of data within 250 items, otherwise it is appropriate to submit it to the relevant department for approval.</li>
<li>q) It is not appropriate for the controller to store health data in servers outside the country, and not to host or lease servers outside the country.</li>
<li>r) When the controller cooperates in data development and utilization, it is appropriate to adopt the open form of “data analysis platform” and strictly control the disclosure of data use.</li>
</ul>
<h2 id="8-Key-Safety-Measures"><a href="#8-Key-Safety-Measures" class="headerlink" title="8. Key Safety Measures"></a>8. Key Safety Measures</h2><h3 id="8-1-Graded-Key-Safety-Measures"><a href="#8-1-Graded-Key-Safety-Measures" class="headerlink" title="8.1 Graded Key Safety Measures"></a>8.1 Graded Key Safety Measures</h3><p>Data grading can be carried out according to the needs of data protection, and different security protection measures can be implemented for different levels of data, focusing on authorization management, identity identification, and access control management. For example, the data grading and security measures from the perspective of personal information security risk are shown in Table 3. The data grading and security measures under the scenario of doctors access are shown in 11.1. The data grading and security measures under the scenario of clinical research are shown in 11.3.</p>
<p>Table 3. Highlights of data grading and security measures from personal information security risks</p>
<table>
<thead>
<tr>
<th>Data grading</th>
<th>Business requirements，content &amp; users</th>
<th>Scenarios</th>
<th>Features and examples</th>
<th>Key safety measures</th>
</tr>
</thead>
<tbody><tr>
<td>Level 1</td>
<td>Business requirements: data can be publicly released;Data Content: Certain statistical data;Users: The general public</td>
<td>Public announcement</td>
<td>For example, information on remaining inpatient beds, remaining available outpatient numbers</td>
<td>Need approval when public announces</td>
</tr>
<tr>
<td>Level 2</td>
<td>Business requirements: no need to identify individuals; Data content: general demographic information, various types of medical and health service information; Data users: scientific research and education and others</td>
<td>Management, Research, Education and Statistical Analysis</td>
<td>No need to identify individuals, e.g., case analysis, various types of disease distribution statistics, epidemiological studies, disease cohort studies, etc. Examples of scenarios: clinical research, medical health education, drug&#x2F;medical device development</td>
<td>It is desirable to de-identify and control by agreement or enclave public sharing model, and it is desirable to ensure the integrity and authenticity of the data</td>
</tr>
<tr>
<td>Level 3</td>
<td>Business requirements: the person to be served is personally identifiable, but the surrounding people not easily identify him&#x2F;her. Data content: Part of the personally identifiable information or code, separated from other information content, such as Zhang ××, queue number, etc. Data users: small range of people</td>
<td>Notify the person to be served</td>
<td>Notify service recipients on public occasions, such as outpatient call, examination call, medical examination service call, etc.</td>
<td>Personal information needs to be partially masked, and the environment and the number of recipients are limited</td>
</tr>
<tr>
<td>Level 4</td>
<td>Business requirements: must accurately identify individuals. Data content: contains complete and accurate personal health data. Data users: relatively small range of personnel, audit and privacy obligations</td>
<td>Personalized service and management</td>
<td>Must accurately identify individuals, such as medical services for individuals, healthcare services, infectious disease control, genome sequencing, etc. Examples of scenarios: hospital interconnection, telemedicine, health sensor data management, mobile applications, commercial insurance integration</td>
<td>As it involves personally identifiable information, strict control between the environment and the recipient is desirable, and high standards are desirable to ensure data integrity and availability</td>
</tr>
<tr>
<td>Level 5</td>
<td>Business requirements: necessary for the treatment of special diseases. Data content: Detailed information on special diseases. Data users: a very small range of personnel, audited, with confidentiality obligations</td>
<td>Medical service on special diseases</td>
<td>The diseases are sensitive such as HIV etc.</td>
<td>Strict identity identification, access control and other measures</td>
</tr>
</tbody></table>
<h3 id="8-2By-Scenario-Key-Safety-Measures"><a href="#8-2By-Scenario-Key-Safety-Measures" class="headerlink" title="8.2	By-Scenario Key Safety Measures"></a>8.2	By-Scenario Key Safety Measures</h3><p>Based on the different scenarios of data circulation and use, the security aspects and responsibilities involved in the use of health data are different for each role, which determines the security control requirements to be met by each role. The security responsibilities and security measures that each role should take in different application scenarios shown in Table 4, and the security measures that need to be focused on for common scenarios are detailed in Chapter 11.</p>
<center>Table 4. Highlights of data use security responsibilities and safety measures</center>

<table>
<thead>
<tr>
<th>Scenarios</th>
<th>Security Point</th>
<th>Security responsibilities and safety measures</th>
<th>Examples</th>
</tr>
</thead>
<tbody><tr>
<td>Subjects -&gt; Controller data flow</td>
<td><table><tbody><tr><td>Collection Safe</td></tr><tr><td>Transmission Safe</td></tr><tr><td>Storage Safe</td></tr></tbody></table></td>
<td><table><tbody><tr><td>Controllers: Informed consent for data collection</td></tr><tr><td>Controllers: Encryption, storage media control</td></tr><tr><td>Controllers: Domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control</td></tr></tbody></table></td>
<td>Examples of scenarios: doctors access medical data, health sensing data, mobile applications. Subject: Individual. Controllers: Medical institutions, research institutions, health insurance institutions, commercial insurance companies, health service companies</td>
</tr>
<tr>
<td>Controller-&gt;subjects data flow.</td>
<td><table><tbody><tr><td>Transmission Safe</td></tr><tr><td>Use Safe</td></tr></tbody></table></td>
<td><table><tbody><tr><td>Controllers: Encryption, storage media control</td></tr><tr><td>Controllers: identity identification, access control, sensitive data control</td></tr></tbody></table></td>
<td>Scenario example: Patient query. Subject: Individual. Controller: Medical institution</td>
</tr>
<tr>
<td>Controller&lt;-&gt;controller intra-data flow.</td>
<td><table><tbody><tr><td>Collection Safe</td></tr><tr><td>Process Safe</td></tr><tr><td>Use Safe</td></tr><tr><td>Storage Safe</td></tr></tbody></table></td>
<td><table><tbody><tr><td>Controllers: informed consent for data collection, approval</td></tr><tr><td>Processors: de-identification, permission management, quality management, metadata management</td></tr><tr><td>Controllers: approval of authorization, identity authentication, access control, auditing</td></tr><tr><td>Controllers: domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control	</td></tr></tbody></table></td>
<td>Example of scenario: Internal data usage. Controllers: Medical institution</td>
</tr>
<tr>
<td>Controller&lt;-&gt;processor data exchange.</td>
<td><table><tbody><tr><td>Transmission safe</td></tr><tr><td>Process Safe</td></tr><tr><td>Storage Safe</td></tr></tbody></table></td>
<td><table><tbody><tr><td>Controller: Before transmission review, evaluation, authorization; encryption, audit, traffic control, storage media control.Processors: data transmission encryption, transmission protocol control</td></tr><tr><td>Processors: de-identification, permission management, quality management, metadata management, auditing.	</td></tr><tr><td>Controller: Domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control, manage the process of how processors storage data. Processors: Domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control, deletion mechanism.</td></tr></tbody></table></td>
<td>Example of scenario: Medical device maintenance. Controllers: Medical institutions, government agencies. Processors: research institutions, health information service providers, medical device manufacturers.</td>
</tr>
<tr>
<td>Inter-controller data exchange.</td>
<td><table><tbody><tr><td>Transmission Safe</td></tr><tr><td>Use Safe</td></tr><tr><td>Storage Safe</td></tr></tbody></table></td>
<td><table><tbody><tr><td>Controller A: Integration security, encryption, auditing, traffic control, storage media control. Controller B: Integration security, encryption, auditing, traffic control, storage media control</td></tr><tr><td>Controller A: Approval of authorization, authentication, access control, auditing. Controller B: Approval of authorization, identification, access control, auditing</td></tr><tr><td>Controller A: Domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control, deletion mechanism. Controller B: Domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control, deletion mechanism	</td></tr></tbody></table></td>
<td>Examples of scenarios: Interoperation; telemedicine.Controllers: government agencies, medical institutions, health insurance agencies</td>
</tr>
<tr>
<td>Controllers -&gt; users data flow.</td>
<td><table><tbody><tr><td>Transmission Safe</td></tr><tr><td>Use Safe</td></tr><tr><td>Storage Safe</td></tr></tbody></table></td>
<td><table><tbody><tr><td>Controller: Before transmission review, evaluation, authorization; encryption, audit, traffic control, storage media control</td></tr><tr><td>Users: approval of authorization, identity authentication, access control, auditing	</td></tr><tr><td>Controller: Domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control, manage the process of how users storage data. User: Domestic storage, encryption, classification and grading, de-identification, backup recovery, storage media control, deletion mechanism	</td></tr></tbody></table></td>
<td>Examples of scenarios: commercial insurance interface, clinical research, reuse. Controller: Medical institutions. Users: Commercial insurance companies, research institutions.</td>
</tr>
</tbody></table>
<p>Note: In the actual application scenario of data, there is a controller corresponding to multiple use scenarios, when it is necessary to implement security measures with reference to multiple data exchange scenarios.</p>
<h3 id="8-3-Key-Safety-Measures-for-Public-Open"><a href="#8-3-Key-Safety-Measures-for-Public-Open" class="headerlink" title="8.3  Key Safety Measures for Public Open"></a>8.3  Key Safety Measures for Public Open</h3><p>Different forms of data openness are applicable to:<br>a) The “principle of least necessary” is followed.<br>b) The purpose, content, and users of the open data are approved by the Data Security Committee to ensure compliance with the requirements of legality, legitimacy, and necessity.<br>c) To the extent possible, de-identify the data according to the purpose of use.<br>d) Clarify the purpose of data development and use, the security responsibilities to be borne by the user, the security measures, etc., and sign the corresponding agreement; it is appropriate to conduct security assessment in accordance with the regulations for those involving transfer from the countries, and to conduct assessment and approval in accordance with the regulations for those involving important data. In addition, the security measures that need to be satisfied in different forms of data opening are detailed in Table 5.</p>
<p>Table 5. Key points of security measures for different ways of data opening</p>
<table>
<thead>
<tr>
<th>Ways of data opening</th>
<th>Key security measures</th>
</tr>
</thead>
<tbody><tr>
<td>Public website</td>
<td>It is advisable to have the data security committee approve the public data</td>
</tr>
<tr>
<td>File Share</td>
<td>- 1) It is desirable to use cryptographic techniques to safeguard data integrity and traceability.  - (2) it is desirable to audit the volume, content and generated time of documents. - (3) Data transmitted via mobile media should be encrypted or access-controlled by mobile media solutions</td>
</tr>
<tr>
<td>API interface</td>
<td>(1) it is desirable to use password, cryptography, biotechnology and other identification technologies to identify the access user. (2) it is desirable to use verification technology or cryptographic technology to ensure the integrity of data in the communication process, and to ensure the confidentiality of data in the transmission process through encryption and other means, and the selection of encryption technology is desirable to consider the application scenario, data scale, efficiency requirements and other aspects; (3) It is desirable to conduct log auditing of API calls, including but not limited to caller, call time, call interface name, call result, etc. (4) it is desirable to take Web security measures to prevent attacks such as SQL injection, XSS, burst password, etc.</td>
</tr>
<tr>
<td>Online query</td>
<td>(1) anonymously accessible data are approved by the Data Security Committee to ensure that no personal information, important data, etc. are involved. (2) it is desirable to use password, cryptography, biotechnology and other identification technologies to identify the querying user. (3) it is desirable to use verification technology or cryptographic technology to ensure the integrity of data in the communication process, and to ensure the confidentiality of data in the transmission process through encryption and other means, and the selection of encryption technology is appropriate to consider the application scenario, data scale, efficiency requirements, etc. (4) it is desirable to audit the data volume, number of queries and query time of queries and form exception reports. (5) it is desirable to monitor bulk query operations and alert in time when high-frequency queries are found. (6) it is desirable to take Web security measures to prevent attacks such as SQL injection, XSS, burst password, etc.</td>
</tr>
<tr>
<td>Data analysis Platform</td>
<td>1) it is appropriate for the export of any analysis results to be approved by the data security committee. 2) it is appropriate to manage the access to the platform, including access permission and data use rights; 3) it is appropriate to have traceability and traceability functions for data operations. 4) The exported data or results should be kept for pending audit</td>
</tr>
</tbody></table>
<h2 id="９-Guide-for-Security-management"><a href="#９-Guide-for-Security-management" class="headerlink" title="９ Guide for Security management"></a>９ Guide for Security management</h2><h3 id="9-1-Summary"><a href="#9-1-Summary" class="headerlink" title="9.1 Summary"></a>9.1 Summary</h3><p>In order to achieve the security objectives described in Chapter 5, it is appropriate for controllers to conduct data classification and grading, scenario analysis in accordance with the requirements of GB&#x2F;T 22080-2016 with reference to Chapter 6, analyze the risks faced by health data security, adopt corresponding security measures, and check the effects of the implemented measures for continuous improvement.<br>Controllers can establish data use management methods with reference to Appendix C, approve data applications with reference to Appendix D, sign data processing (use) agreements with processors (users) with reference to Appendix E, and conduct self-inspection with reference to Appendix F.</p>
<h3 id="9-2-Organization"><a href="#9-2-Organization" class="headerlink" title="9.2 Organization"></a>9.2 Organization</h3><p>It is advisable to establish a sound organizational guarantee system, with an organizational structure that includes at least a health data security committee and a health data security work group, to ensure good health data security management and to form corresponding documentation, including but not limited to:<br>a) Establish a health data security committee (referred to as the committee) to take overall responsibility for health data security and discuss and decide on major health data security matters, the committee should<br>    - 1) include the top management of the organization and the heads of each business port, etc.<br>    - 2) cover information security, ethics, legal, statistical, audit, confidentiality and other related professionals<br>    - 3) Have the top person in charge of the organization as the chief member.<br>    - 4) Can rely on existing ethics committees, hospital councils, etc., without having to re-establish them.<br>    - 5) coordinating the allocation of human, material, financial and other resources necessary for health data security work, such as security administrators, security auditors, system administrators, etc. based on the principle of separation of authority<br>    - 6） Responsible for reviewing the health data security strategy, risk assessment plan, compliance assessment plan, risk disposal plan and emergency disposal plan.<br>    - 7) Responsible for reviewing data security-related regulations (e.g. data use approval process).<br>    - 8) Responsible for reviewing de-identification strategies and processes.<br>    - 9) Hold regular working meetings, recommended to be held at least once a month.</p>
<p>b) Establish a health data security work office and designate a person (e.g., data security officer) to be responsible for the day-to-day work of health data security to<br>    - 1) Responsible for implementing the decisions of the Health Data Security Committee and reporting to the Committee.<br>    - 2) Responsible for establishing, maintaining and updating the health data security policy, risk assessment program, compliance assessment program, risk disposal program and emergency disposal program.<br>    - 3） Responsible for establishing, maintaining and updating data security related rules and regulations.<br>    - 4) Responsible for developing, maintaining and updating data use approval processes, as well as de-identification strategies and processes.<br>    - 5) Sorting out business processes and the health information systems and data involved, and conducting security risk analysis and compliance analysis, and making recommendations for health data security work.<br>    - 6) Form and manage the metadata structure to form a data and system supply chain structure that is consistent with business processes.<br>    - 7) Be responsible for data security education and training of personnel to ensure that relevant personnel have appropriate data security capabilities.<br>    - 8) Conduct a comprehensive self-examination of health data security at least annually and make recommendations for rectification.<br>    - 9) Audit the use of health data and adjust and improve security measures when appropriate.<br>    - 10) Monitor and warn the security status of health data, and adjust and improve security measures as appropriate.</p>
<h3 id="9-3-Process"><a href="#9-3-Process" class="headerlink" title="9.3 Process"></a>9.3 Process</h3><p>9.3.1 Planning<br>The main tasks of the planning phase are as follows, and each task should be documented accordingly.<br>a) Define the scope of the health data security work, determine the work objectives, and establish a work plan.<br>b) Establish a health data security strategy and communicate it to the entire organization.<br>c) Establish rules and regulations related to health data security and inform the whole organization.<br>d) Establish a health data security risk assessment program and a compliance assessment program.<br>e) Sort out health data-related operations and the systems and data involved.<br>f) Identify health data security risks and assess the impact.<br>g) Identify health data security compliance risk points and assess the impact.<br>h) Establish a risk disposal plan for the risks; for those involving data use disclosure, it is appropriate to dispose of them in accordance with Chapter 7 “Use and Disclosure Principles”; for those involving network and system security, it is appropriate to dispose of them in accordance with GB&#x2F;T 22081-1016 and GB&#x2F;T 22239-2019; for those involving basic security and data service security, it is appropriate to dispose of them in accordance with GB&#x2F;T 35274-2017; for cloud computing security, it is appropriate to dispose in accordance with GB&#x2F;T 31168.<br>i) Review and adopt the risk disposal plan.<br>j) Establish a data security emergency disposal plan.</p>
<p>9.3.2 Implement<br>The main tasks of the implementation phase are as follows, and each task should be documented accordingly.<br>a) All aspects of the health data use and disclosure process should strictly implement the established data security-related regulations, security policies and processes.<br>b) Implement a risk management program, including the implementation of selected security measures.<br>c) Prepare appropriate resources, including human, material, and financial resources, to support the security work.<br>d) Conduct necessary information security education and training.<br>e) Implement effective control over the information security work carried out and the resources invested in information security work.<br>f) Take effective response measures for information security incidents.</p>
<p>9.3.3 Check<br>The main tasks of the inspection phase are as follows, and it is appropriate to document each task accordingly.<br>(a) monitor the process of work related to health data security, such as the implementation of security measures process.<br>(b) Regularly review the effectiveness of the implementation of risk management programs, including assessing the acceptability of the residual risk after the implementation of the corresponding measures, etc.<br>(c) Periodically check whether the health data use disclosure complies with Chapter 7 “Use and Disclosure Principles”.<br>(d) Periodically check that technical security and de-identification work is performed in accordance with Chapter 10.<br>(e) Integrate the inspection process into the organization’s internal management.<br>(f) Self-inspection or third-party inspection, as appropriate.</p>
<p>9.3.4 Improve<br>The main tasks of the improvement phase are as follows, and each task should be documented accordingly<br>(a) Improve security measures in response to monitoring or inspection results, including taking preventive measures or adjusting the content of business activities that may affect the security of health data.<br>(b) Establish a corrective action plan and implement it according to the plan.</p>
<h3 id="9-4-Emergency-Disposal"><a href="#9-4-Emergency-Disposal" class="headerlink" title="9.4 Emergency Disposal"></a>9.4 Emergency Disposal</h3><p>The main work of emergency disposal is as follows, and each work is suitable to form corresponding documentary records.<br>a) Establish emergency plans, including the conditions for starting emergency plans, emergency handling process, system recovery process, incident reporting process, post-event education and training, etc. It is advisable to regularly evaluate and revise the network security emergency plan, and organize at least one emergency drill each year.<br>b) It is advisable to designate special data security emergency support teams and expert teams to ensure that security incidents are dealt with in a timely and effective manner.<br>c) It is desirable to develop a disaster recovery plan to ensure that the health information system can recover from a network security incident in a timely manner and establish a security incident traceability mechanism.<br>d) After the occurrence of data security incidents, it is appropriate to dispose of them in accordance with the emergency plan; after the completion of the disposal of the incident, timely written reports on the incident to the security protection work department in accordance with the regulations, the content of which should include at least: description of the incident, analysis of the causes and effects, disposal methods and other information.<br>e) It is desirable to carry out a comprehensive assessment based on the security issues identified in the detection and assessment, monitoring and early warning and disposal results, and if necessary, to carry out risk identification again and update the security policy.</p>
<h2 id="10-Security-Technology-Guide"><a href="#10-Security-Technology-Guide" class="headerlink" title="10 Security Technology Guide"></a>10 Security Technology Guide</h2><h3 id="10-1-General-Security-Technology"><a href="#10-1-General-Security-Technology" class="headerlink" title="10.1 General Security Technology"></a>10.1 General Security Technology</h3><p>Controllers are advisable to manage data security in accordance with GB&#x2F;T 22081-2016, GB&#x2F;T 22239-2019 and GB&#x2F;T 35274-2017, etc.<br>a) It is appropriate to provide the necessary security protection for information systems and network facilities and cloud platforms that host health data.<br>b) It is appropriate to implement data security measures for various activities in the data life cycle, including data collection, data transmission, data storage, data processing, data exchange, data destruction, etc., in order to reduce security risks and ensure data security.<br>c) It is advisable to take necessary security measures for data platforms and applications around the characteristics of each phase of the system life cycle such as planning, development, deployment, operation and maintenance, to establish a secure data management infrastructure, reduce the security risks of data platform and application operation, and guarantee business continuity.<br>d) It is advisable to classify and grade the management of health data, formulate and implement reasonable strategies and processes, and limit the use and disclosure to a minimum.<br>e) It is advisable to implement security measures such as identity identification, access control, security audit, intrusion prevention, malicious code prevention, and media usage management.<br>f) It is appropriate to ensure data quality to meet business needs and implement security measures such as backup recovery and residual information protection.<br>g) It is advisable to use cryptographic technology to ensure the integrity, confidentiality and traceability of data in the process of collection, transmission and storage; if storage media is used for transmission, it is advisable to implement control over the media.<br>h) When storing personal biometric information, it is appropriate to adopt technical measures for processing before storage, such as storing only the summary of personal biometric information.<br>i) It is appropriate to use cryptographic technology in accordance with the relevant requirements of national cryptographic management.<br>j) It is appropriate to comply with the relevant general requirements of important data management, critical information infrastructure security management and other policies.</p>
<h3 id="10-2-De-identification"><a href="#10-2-De-identification" class="headerlink" title="10.2 De-identification"></a>10.2 De-identification</h3><p>It is appropriate for controllers to carry out de-identification in accordance with GB&#x2F;T37964-2019, and de-identified data should be applied to controlled public sharing or enclave public sharing (an environment fully controlled by controllers), and it is appropriate to agree on the purpose, manner, duration, and security measures for data use through data use agreements. The de-identification strategy, process and results are desirable to be approved by the Data Security Committee. When data are applied to clinical research and pharmaceutical&#x2F;medical R&amp;D, the relevant requirements are as follows.</p>
<p>a) It is appropriate to remove information in personal attribute data that can be uniquely identified with an individual or whose disclosure would have a significant impact on the individual, such as: name; ID card&#x2F;driver’s license and other document numbers; telephone numbers, faxes, e-mails; health insurance numbers, medical record numbers, accounts; biometric information (information unrelated to the purpose of the application such as fingerprints, voice, etc.); photographs; hobbies, beliefs, etc.<br>b) Information in personal attribute data that can be indirectly associated with individuals is appropriate for generalization, conversion, and other processing, such as<br>    - 1) information such as employer, address, postal code, etc., if the employer information or the population covered by the combination with other information is more than 20,000 people, the employer information can be retained; if the address information includes province (municipality directly under the Central Government), city (county), street (township) or the population covered by the combination with other information is more than 20,000 people, it can be retained, otherwise it is appropriate to remove the street (township) to ensure that the population covered by the combination is above; if the population covered by zip code information or combined with other information is above 10,000, it can be retained, otherwise it is appropriate to set the low zip code to ‘0’ to ensure that the population that can be covered is above 10,000.<br>    - 2) Generalization of a specific age, for example, giving an age range. For example, 38 years old can be converted into 30 to 40 years old to ensure that the number of people meeting the same age condition in the same region is more than 20,000.<br>    - 3) Birthdays and all other date information, e.g., admission time, discharge time, can only be specific to the year, or time drift processing.<br>c) It is appropriate to remove the names of health workers and other identifying information.<br>d) It is desirable to have a minimum number of 5 or more people in the dataset with the same value for all attributes.<br>e) For cases that need to be traced back to a patient, it is appropriate to create a patient code index within the controller.<br>f) The configuration of various parameters used in the de-identification process, such as time drift ranges, patient code indexes, and various individual code generation rules, should be kept strictly confidential and limited to the controller’s internal dedicated management.<br>g) When re-identification is required to identify the subject, it is desirable that the process be handled by the controller’s internal personnel and that the process be kept strictly confidential.<br>h) It is desirable to prohibit data users from participating in the work related to de-identification.<br>i) It is advisable to sign a data use agreement to govern the purpose and duration of data use and data protection measures, etc.<br>j) In a controlled public sharing model, it is appropriate for users to record data usage and be audited by the controller.<br>Related examples are shown in Table 6. The identifier categories of health information data elements and the proposed de-identification methods can be found in Appendix G.</p>
<p>Table 6. Examples of De-identification</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Suggestions for deidentify</th>
<th>Applicable data</th>
</tr>
</thead>
<tbody><tr>
<td>Name</td>
<td>Suggest to delete or set to empty</td>
<td>Subject’s name, Doctor’s name, Researcher’s name, Family member’s name</td>
</tr>
<tr>
<td>Contact</td>
<td>Suggest to delete or set to empty or generalize. For example, the address should only be specified to the city or county level, hiding the address below the county level</td>
<td>Personal telephone number, email, account, address</td>
</tr>
<tr>
<td>Date</td>
<td>It is suggested to adopt the “time shifting method”, conversion method, or generalization. For example, different random offset values can be defined for different research projects, and data disturbance can be achieved by adding or subtracting the random offset value from the date and time, to achieve data de-identification. For example: Admission date 2018-01-01 + Random offset value 100 &#x3D; Admission date: 2018-04-11, Discharge date 2018-04-01 + Random offset value 100 &#x3D; Discharge date: 2018-07-10.  Discharge date - admission date &#x3D; 90 days.  Through this method, data de-identification can be ensured while ensuring the correctness of the calculation logic. The conversion method is to replace the result obtained by using it and other dates with operations, such as the length of stay. Generalization only retains the year and month, or even only the year.</td>
<td>Time information in medical application that can be associated with individuals through data analysis: for example, admission date, discharge date, surgery date, etc</td>
</tr>
<tr>
<td>Birth date</td>
<td>It is suggested to delete, set to empty, or replace with age.</td>
<td>Birth date</td>
</tr>
<tr>
<td>Age</td>
<td>It is suggested to use the method of “data generalization.” For example: — Age ≤ 89 or &gt; 89 — Age interval &lt;25, 25-29, 30-34, …, 85-89, &gt;89. Note: &gt; 89 cannot be further sub-divided.</td>
<td>Age</td>
</tr>
<tr>
<td>Number</td>
<td>It is suggested to delete or set to empty. If it is necessary to use the uniqueness of numbers for logical analysis, such as judging whether multiple medical records belong to the same person through ID numbers, randomization based on the original data can be used to generate unique identification for replacement. If it is necessary to use implicit geographical information such as postal codes, disturbance and generalization methods can be used for processing, such as: original postal code record 100080, de-identified as 100* * * after generalization.</td>
<td>ID card number, social security card number, work permit number, and residency card number.</td>
</tr>
<tr>
<td>internal number assigned by medical institutions</td>
<td>It is recommended to replace or delete them. If these numbers are needed for logical analysis, a unique identifier can be generated based on the original data through randomization. If these numbers are not needed for logical analysis, they should be deleted.</td>
<td>Exam result report number, check report number, hospitalization number, outpatient (emergency) number, etc.</td>
</tr>
</tbody></table>
<h2 id="11-Data-Security-on-Typical-Scenarios-Skip"><a href="#11-Data-Security-on-Typical-Scenarios-Skip" class="headerlink" title="11 Data Security on Typical Scenarios(Skip)"></a>11 Data Security on Typical Scenarios(Skip)</h2>]]></content>
      <tags>
        <tag>Data security</tag>
      </tags>
  </entry>
  <entry>
    <title>FHIR Terminology Service</title>
    <url>/2023/08/10/FHIR-Terminology-Service/</url>
    <content><![CDATA[<h1 id="FHIR-Terminology-Service-术语服务"><a href="#FHIR-Terminology-Service-术语服务" class="headerlink" title="FHIR Terminology Service 术语服务"></a>FHIR Terminology Service 术语服务</h1><blockquote>
<p>本文将正对<code>HL7 FHIR R4</code>的术语模块做一下介绍，包括官方文档和实现指引。</p>
</blockquote>
<h3 id="FHIR-术语模块的设计思路"><a href="#FHIR-术语模块的设计思路" class="headerlink" title="FHIR 术语模块的设计思路"></a>FHIR 术语模块的设计思路</h3><p>HL7 的术语模块提供了一个整体的设计用于指引大家如何使用术语资源，以及相应的操作，数据类型，及外部和自定义术语库如何展示和交换信息。最终的目的是为了提供标准的术语服务支持 FHIR 资源间使用标准的编码系统。<br>术语模块主要有 5 个资源:</p>
<ul>
<li>CodeSystem: 编码系统，描述术语的关键元素和定义。</li>
<li>ConceptMap: 定义一个编码系统的概念与另一个的映射关系。</li>
<li>ValueSet: 将一个或多个编码系统中用于特定目的的一组代码进行组合, 形成有特定含义的值集。</li>
<li>NamingSystem: 命名系统。</li>
<li>TerminologyCapabilities: 术语能力声明。</li>
</ul>
<p>他们之间的关系可以用下图表示，<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/terminology-module-relationships.png"
                      alt="relation"
                ></p>
<p>实际使用中，我们在对接不同系统时可能只需做一下转换，把一个编码系统的值集映射成另一个编码系统的值集, 可能不一定需要命名系统，如下图所示。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/valuesets-mapping.png"
                      alt="vsmapping"
                ></p>
<h3 id="术语服务"><a href="#术语服务" class="headerlink" title="术语服务"></a>术语服务</h3><p>HL7 也给出标准的术语服务实施规范，用户在使用这个服务的时候可以做到不用十分了解编码系统、值集和映射概念。如果一个服务能满足如下列表要求，就可以在 FHIR 能力声明中宣称符合 FHIR 术语服务标准<a class="link"   href="https://fhir-ru.github.io/capabilitystatement-terminology-server.html" >Terminology Service Capability Statement <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：</p>
<ul>
<li>安全</li>
<li>值集拓展, $expand 从值集中扩展返回一组编码列表，实际使用时类似高级 search。</li>
<li>概念查找&#x2F;分解, $lookup 查找资源的一个概念，值集或关系。</li>
<li>值集验证， $validate-code 验证一个编码在值集中是否有效。</li>
<li>包容性测试，$subsumes 查询两个代码之间是否存在（如果有的话）包含关系。</li>
<li>批量验证</li>
<li>翻译,$translate 使用 ConceptMap 资源，查找特定源概念被映射到的目标编码系统的概念。</li>
<li>批量翻译</li>
<li>可以维护一个闭环表</li>
</ul>
<h4 id="服务的安全要求"><a href="#服务的安全要求" class="headerlink" title="服务的安全要求"></a>服务的安全要求</h4><p>SSL 加密传输是强制要求。如果值集系统允许被实时维护，认证和审计机制也是必要的。</p>
<h4 id="熟悉基本概念"><a href="#熟悉基本概念" class="headerlink" title="熟悉基本概念"></a>熟悉基本概念</h4><p>由于术语服务是基于几个基本资源的，所以熟悉这些资源和使用方法对实现十分重要。基本资源包括：<code>CodeSystem</code>,<code>ValueSet</code>, <code>ConceptMap</code>. 以及熟悉如何在 FHIR 中使用编码(codesystem)。</p>
<h4 id="如何在-FHIR-中使用编码"><a href="#如何在-FHIR-中使用编码" class="headerlink" title="如何在 FHIR 中使用编码"></a>如何在 FHIR 中使用编码</h4><p>FHIR 中的资源很多会用到编码，这些编码往往是一串固定的值，代表一个特定的含义或概念。FHIR 这里的编码定义都是通过一对组合:<code>system</code>和<code>code</code>. <code>system</code>的值是一个 url 指出哪里定义了这个编码，这个值需要区分大小写。</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>system</td>
<td>URI 指定编码的位置</td>
</tr>
<tr>
<td>version</td>
<td>版本</td>
</tr>
<tr>
<td>code</td>
<td>字符串表示一个概念</td>
</tr>
<tr>
<td>display</td>
<td>描述文字</td>
</tr>
</tbody></table>
<p>编码在资源中定义时可以有多种数据类型，但都代表编码。</p>
<table>
 <tbody><tr><td colspan="2">当编码在资源中定义时，可以有如下数据类型</td></tr>
 <tr><td>code</td><td>这数据类型只展示编码`code`, `system`隐含在元素中。</td></tr>
 <tr><td>Coding</td><td>这个数据类型定义一个标准的`code`和`system`对。</td></tr>
 <tr><td>CodeableConcept</td><td>`coding`另加上一个直白的文本字段.</td></tr>
 <tr><td colspan="2">另外，非资源元素定义时，如下字段也可以带着编码.或者内容当成编码，并绑定一个值集。</td></tr>
 <tr><td>Quantity</td><td>数量这个字段可以用`system`and<i>code</i>定义单位的类型.</td></tr>
 <tr><td>string</td><td>有的时候string字符串也可以用来控制某个元素固定的几个值.</td></tr>
 <tr><td>uri</td><td>类似string, uri也可以当成编码元素</td></tr></tbody>
</table>

<h4 id="选择编码系统"><a href="#选择编码系统" class="headerlink" title="选择编码系统"></a>选择编码系统</h4><p><code>system</code>对应的 url 需要指向一个编码系统。编码系统可以有如下地址可以引用:</p>
<ul>
<li>本规范指定的编码系统仓库<a class="link"   href="https://hl7.org/fhir/R4/terminologies-systems.html" >code system registry <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>编码系统发布者定义的 URI 或者 OID</li>
<li>FHIR 社区的编码系统仓库，并且状态是<code>active</code></li>
<li>在<a class="link"   href="http://www.hl7.org/oid/index.cfm" >HL7 OID registry <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>注册的 OID</li>
</ul>
<p>下表是所有外部编码系统：</p>
<table>
<thead>
<tr>
<th>URI</th>
<th>Source</th>
<th>Comment</th>
<th>OID (for non-FHIR systems)</th>
</tr>
</thead>
<tbody><tr>
<td><a class="link"   href="http://snomed.info/sct" >http://snomed.info/sct <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>SNOMED CT (IHTSDO)</td>
<td>See <a href="snomedct.html">Using SNOMED CT with FHIR</a></td>
<td>2.16.840.1.113883.6.96</td>
</tr>
<tr>
<td><a class="link"   href="http://www.nlm.nih.gov/research/umls/rxnorm" >http://www.nlm.nih.gov/research/umls/rxnorm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>RxNorm (US NLM)</td>
<td>See <a href="rxnorm.html">Using RxNorm with FHIR</a></td>
<td>2.16.840.1.113883.6.88</td>
</tr>
<tr>
<td><a class="link"   href="http://loinc.org/" >http://loinc.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>LOINC (LOINC.org)</td>
<td>See <a href="loinc.html">Using LOINC with FHIR</a></td>
<td>2.16.840.1.113883.6.1</td>
</tr>
<tr>
<td><a class="link"   href="http://unitsofmeasure.org/" >http://unitsofmeasure.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>UCUM: (UnitsOfMeasure.org) Case Sensitive Codes</td>
<td>See <a href="ucum.html">Using UCUM with FHIR</a></td>
<td>2.16.840.1.113883.6.8</td>
</tr>
<tr>
<td><a class="link"   href="http://ncimeta.nci.nih.gov/" >http://ncimeta.nci.nih.gov <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://ncimeta.nci.nih.gov/" >NCI Metathesaurus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>See <a href="ncimeta.html">Using NCI Metathesaurus with FHIR</a></td>
<td>2.16.840.1.113883.3.26.1.2</td>
</tr>
<tr>
<td><a class="link"   href="http://www.ama-assn.org/go/cpt" >http://www.ama-assn.org/go/cpt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.ama-assn.org/go/cpt" >AMA CPT codes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>See <a href="cpt.html">Using CPT with FHIR</a></td>
<td>2.16.840.1.113883.6.12</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/ndfrt" >http://hl7.org/fhir/ndfrt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.nlm.nih.gov/research/umls/sourcereleasedocs/current/NDFRT/" >NDF-RT (National Drug File – Reference Terminology) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>See <a href="ndfrt.html">Using NDF-RT with FHIR</a></td>
<td>2.16.840.1.113883.6.209</td>
</tr>
<tr>
<td><a class="link"   href="http://fdasis.nlm.nih.gov/" >http://fdasis.nlm.nih.gov <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm" >Unique Ingredient Identifier (UNII) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>See <a href="unii.html">Using UNII with FHIR</a></td>
<td>2.16.840.1.113883.4.9</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/sid/ndc" >http://hl7.org/fhir/sid/ndc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm" >NDC&#x2F;NHRIC Codes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>See <a href="ndc.html">Using NDC with FHIR</a></td>
<td>2.16.840.1.113883.6.69</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/sid/cvx" >http://hl7.org/fhir/sid/cvx <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www2a.cdc.gov/vaccines/iis/iisstandards/vaccines.asp?rpt=cvx" >CVX (Vaccine Administered) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>See <a href="cvx.html">Using CVX with FHIR</a></td>
<td>2.16.840.1.113883.12.292</td>
</tr>
<tr>
<td>urn:iso:std:iso:3166</td>
<td><a class="link"   href="http://www.iso.org/iso/country_codes.htm" >ISO Country &amp; Regional Codes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>See <a href="iso3166.html">Using ISO 3166 Codes with FHIR</a></td>
<td>1.0.3166.1.2.2</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/sid/dsm5" >http://hl7.org/fhir/sid/dsm5 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="https://en.wikipedia.org/wiki/DSM-5" >DSM-5 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>Diagnostic and Statistical Manual of Mental Disorders, Fifth Edition (DSM-5)</td>
<td>2.16.840.1.113883.6.344</td>
</tr>
<tr>
<td><a class="link"   href="http://www.nubc.org/patient-discharge" >http://www.nubc.org/patient-discharge <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.nubc.org/" >NUBC code system for Patient Discharge Status <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>National Uniform Billing Committee, manual UB-04, UB form locator 17</td>
<td>2.16.840.1.113883.6.301.5</td>
</tr>
<tr>
<td><a class="link"   href="http://www.radlex.org/" >http://www.radlex.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.radlex.org/" >RadLex <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>(Includes <a class="link"   href="http://playbook.radlex.org/" >play book <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> codes)</td>
<td>2.16.840.1.113883.6.256</td>
</tr>
<tr>
<td>ICD-9, ICD-10</td>
<td><a class="link"   href="http://www.who.int/classifications/icd/en/" >WHO <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> &amp; National Variants</td>
<td>See <a href="icd.html">Using ICD-[x] with FHIR</a></td>
<td>See ICD page for details</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/sid/icpc-1" >http://hl7.org/fhir/sid/icpc-1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.ph3c.org/" >ICPC (International Classification of Primary Care) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="https://referentiemodel.nhg.org/tabellen/nhg-tabel-24-icpc1" >NHG Table 24 ICPC-1 (NL) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>2.16.840.1.113883.2.4.4.31.1</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/sid/icf-nl" >http://hl7.org/fhir/sid/icf-nl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.who.int/classifications/icf/en/" >ICF (International Classification of Functioning, Disability and Health) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.254</td>
</tr>
<tr>
<td><a class="link"   href="http://terminology.hl7.org/CodeSystem/v2-[X](/v)" >http://terminology.hl7.org/CodeSystem/v2-[X](/v) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a href="terminologies-v2.html">Version 2 tables</a></td>
<td>[X] is the 4 digit identifier for a table; e.g. <a class="link"   href="http://terminology.hl7.org/CodeSystem/v2-0203" >http://terminology.hl7.org/CodeSystem/v2-0203 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>2.16.840.1.113883.12.[X]</td>
</tr>
<tr>
<td><a class="link"   href="http://terminology.hl7.org/CodeSystem/v3-[X]" >http://terminology.hl7.org/CodeSystem/v3-[X] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a href="terminologies-v3.html">A HL7 v3 code system</a></td>
<td>[X] is the code system name; e.g. <a class="link"   href="http://terminology.hl7.org/CodeSystem/v3-GenderStatus" >http://terminology.hl7.org/CodeSystem/v3-GenderStatus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>see <a href="terminologies-v3.html">v3 list</a></td>
</tr>
<tr>
<td><a class="link"   href="https://www.gs1.org/gtin" >https://www.gs1.org/gtin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="https://www.gs1.org/" >GTIN (GS1) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>Note: GTINs may be used in both <a href="datatypes.html#Coding">Codes</a> and <a href="datatypes.html#Identifier">Identifiers</a></td>
<td>1.3.160</td>
</tr>
<tr>
<td><a class="link"   href="http://www.whocc.no/atc" >http://www.whocc.no/atc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.whocc.no/atc/structure_and_principles/" >Anatomical Therapeutic Chemical Classification System (WHO) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.73</td>
</tr>
<tr>
<td>urn:ietf:bcp:47</td>
<td>IETF language (see <a class="link"   href="http://tools.ietf.org/html/bcp47" >Tags for Identifying Languages - BCP 47 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
<td>This is used for identifying language throughout FHIR. Note that usually these codes are in a <code>code</code> and the system is assumed</td>
<td></td>
</tr>
<tr>
<td>urn:ietf:bcp:13</td>
<td>Mime Types (see <a class="link"   href="http://tools.ietf.org/html/bcp13" >Multipurpose Internet Mail Extensions (MIME) Part Four - BCP 13 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
<td>This is used for identifying the mime type system throughout FHIR. Note that these codes are in a <code>code</code> (e.g. <a href="datatypes.html#Attachment">Attachment.contentType</a>) and in these elements the system is assumed. This system is defined for when constructing value sets of mime type codes</td>
<td></td>
</tr>
<tr>
<td>urn:iso:std:iso:11073:10101</td>
<td>Medical Device Codes (ISO 11073-10101)</td>
<td>See <a href="mdc.html">Using MDC Codes with FHIR</a></td>
<td>2.16.840.1.113883.6.24</td>
</tr>
<tr>
<td><a class="link"   href="http://dicom.nema.org/resources/ontology/DCM" >http://dicom.nema.org/resources/ontology/DCM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>DICOM Code Definitions</td>
<td>The meanings of codes defined in DICOM, either explicitly or by reference to another part of DICOM or an external reference document or standard</td>
<td>1.2.840.10008.2.16.4</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/NamingSystem/ca-hc-din" >http://hl7.org/fhir/NamingSystem/ca-hc-din <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.hc-sc.gc.ca/dhp-mps/prodpharma/activit/fs-fi/dinfs_fd-eng.php" >Health Canada Drug Identification Number <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>A computer-generated eight-digit number assigned by Health Canada to a drug product prior to being marketed in Canada. <a class="link"   href="http://www.hc-sc.gc.ca/dhp-mps/prodpharma/databasdon/index-eng.php" >Canada Health Drug Product Database <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> contains product specific information on drugs approved for use in Canada.</td>
<td>2.16.840.1.113883.5.1105</td>
</tr>
<tr>
<td><a class="link"   href="http://hl7.org/fhir/sid/ca-hc-npn" >http://hl7.org/fhir/sid/ca-hc-npn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="https://www.canada.ca/en/health-canada/services/drugs-health-products/natural-non-prescription/applications-submissions/product-licensing/licensed-natural-health-products-database.html" >Health Canada Natural Product Number <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>A computer-generated number assigned by Health Canada to a natural health product prior to being marketed in Canada.</td>
<td>2.16.840.1.113883.5.1105</td>
</tr>
<tr>
<td><a class="link"   href="http://nucc.org/provider-taxonomy" >http://nucc.org/provider-taxonomy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57" >NUCC Provider Taxonomy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>The Health Care Provider Taxonomy code is a unique alphanumeric code, ten characters in length. The code set is structured into three distinct “Levels” including Provider Type, Classification, and Area of Specialization.</td>
<td>2.16.840.1.113883.6.101</td>
</tr>
<tr>
<td></td>
<td>Code Systems for Genetics</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a class="link"   href="http://www.genenames.org/" >http://www.genenames.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.genenames.org/" >HGNC: Human Gene Nomenclature Committee <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.281</td>
</tr>
<tr>
<td><a class="link"   href="http://www.ensembl.org/" >http://www.ensembl.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.ensembl.org/" >ENSEMBL reference sequence identifiers <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>Maintained jointly by the European Bioinformatics Institute and Welcome Trust Sanger Institute</td>
<td>not assigned yet</td>
</tr>
<tr>
<td><a class="link"   href="http://www.ncbi.nlm.nih.gov/refseq" >http://www.ncbi.nlm.nih.gov/refseq <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="https://www.ncbi.nlm.nih.gov/refseq" >RefSeq: National Center for Biotechnology Information (NCBI) Reference Sequences <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.280</td>
</tr>
<tr>
<td><a class="link"   href="http://www.ncbi.nlm.nih.gov/clinvar" >http://www.ncbi.nlm.nih.gov/clinvar <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.ncbi.nlm.nih.gov/clinvar" >ClinVar Variant ID <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>NCBI central repository for curating pathogenicity of potentially clinically relevant variants</td>
<td>not assigned yet</td>
</tr>
<tr>
<td><a class="link"   href="http://sequenceontology.org/" >http://sequenceontology.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://sequenceontology.org/" >Sequence Ontology <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>not assigned yet</td>
</tr>
<tr>
<td><a class="link"   href="http://varnomen.hgvs.org/" >http://varnomen.hgvs.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://varnomen.hgvs.org/" >HGVS: Human Genome Variation Society <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.282</td>
</tr>
<tr>
<td><a class="link"   href="http://www.ncbi.nlm.nih.gov/projects/SNP" >http://www.ncbi.nlm.nih.gov/projects/SNP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.ncbi.nlm.nih.gov/projects/SNP" >DBSNP: Single Nucleotide Polymorphism database <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.284</td>
</tr>
<tr>
<td><a class="link"   href="http://cancer.sanger.ac.uk/cancergenome/projects/cosmic" >http://cancer.sanger.ac.uk/cancergenome/projects/cosmic <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://cancer.sanger.ac.uk/cancergenome/projects/cosmic" >COSMIC: Catalogue Of Somatic Mutations In Cancer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.3.912</td>
</tr>
<tr>
<td><a class="link"   href="http://www.lrg-sequence.org/" >http://www.lrg-sequence.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.lrg-sequence.org/" >LRG: Locus Reference Genomic Sequences <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.283</td>
</tr>
<tr>
<td><a class="link"   href="http://www.omim.org/" >http://www.omim.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.omim.org/" >OMIM: Online Mendelian Inheritance in Man <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.174</td>
</tr>
<tr>
<td><a class="link"   href="http://www.ncbi.nlm.nih.gov/pubmed" >http://www.ncbi.nlm.nih.gov/pubmed <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.ncbi.nlm.nih.gov/pubmed" >PubMed <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.13.191</td>
</tr>
<tr>
<td><a class="link"   href="http://www.pharmgkb.org/" >http://www.pharmgkb.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.pharmgkb.org/" >PHARMGKB: Pharmacogenomic Knowledge Base <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>PharmGKB Accession ID</td>
<td>2.16.840.1.113883.3.913</td>
</tr>
<tr>
<td><a class="link"   href="http://clinicaltrials.gov/" >http://clinicaltrials.gov <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://clinicaltrials.gov/" >ClinicalTrials.gov <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.3.1077</td>
</tr>
<tr>
<td><a class="link"   href="http://www.ebi.ac.uk/ipd/imgt/hla" >http://www.ebi.ac.uk/ipd/imgt/hla <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><a class="link"   href="http://www.ebi.ac.uk/ipd/imgt/hla" >European Bioinformatics Institute <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
<td>2.16.840.1.113883.6.341</td>
</tr>
</tbody></table>
<h4 id="编码系统的复杂表达"><a href="#编码系统的复杂表达" class="headerlink" title="编码系统的复杂表达"></a>编码系统的复杂表达</h4><p>由于真实世界经常涉及通过组合多个概念或属性来创建复合术语，同时很多编码系统内部的概念之间会有各种关系，比如相等，包含，属于等等多种关系。编码系统如<code>SNOMED-CT</code>就设计了表达式来支持更细节的临床意义表达。这些特征可以在<code>CodeSystem</code>资源来展示，并通过上述的几种数据类型进行数据交换。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;system&quot;</span> : <span class="string">&quot;http://snomed.info/sct&quot;</span>,</span><br><span class="line">  <span class="string">&quot;code&quot;</span> : <span class="string">&quot;80146002 |appendectomy| : 260870009 |priority| = 25876001 |emergency|&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">## 阑尾炎切除手术紧急 <span class="attr">concept</span>: <span class="title function_">refinement</span>(key=value)</span><br></pre></td></tr></table></figure></div>

<h4 id="元素编码值绑定"><a href="#元素编码值绑定" class="headerlink" title="元素编码值绑定"></a>元素编码值绑定</h4><p>当一个元素和值集绑定时，绑定有如下属性：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Strength</td>
<td>绑定的强度，灵活度</td>
</tr>
<tr>
<td>Reference</td>
<td>URL 指定值集路径</td>
</tr>
<tr>
<td>Description</td>
<td>编码使用的描述信息</td>
</tr>
</tbody></table>
<p>几乎所有的元素都有被编码的数据类型，这个数据类型和一个值集绑定。绑定的强度可以有多种程度：</p>
<table>
<thead>
<tr>
<th>strength</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>required</td>
<td>必须遵循，元素中的这个概念必须被指定值集</td>
</tr>
<tr>
<td>extensible</td>
<td>必须遵循，值集的绑定可以通过扩展方式提供可替代的概念。但不是扩展值集本身</td>
</tr>
<tr>
<td>preferred</td>
<td>推荐使用特定编码来提高互操作性，但不是强制要求</td>
</tr>
<tr>
<td>example</td>
<td>没有例子可以使用来绑定值集</td>
</tr>
</tbody></table>
<h4 id="expand-操作"><a href="#expand-操作" class="headerlink" title="$expand 操作"></a>$expand 操作</h4><p>术语服务的“值集扩展”是指将值集从另一个编码系统引入编码的过程, 为了使其概念更容易在特定上下文中使用和处理。该过程确保了值集所代表的信息在真实复杂的医疗环境中被明确理解，并且可以轻松地被各种医疗保健应用程序和系统使用。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 扩展查询第23值集，过滤“abdo”</span><br><span class="line"></span><br><span class="line">GET [base]/ValueSet/23/$expand?filter=abdo</span><br><span class="line">Expanding a value set that is specified by the client (using JSON):</span><br><span class="line"></span><br><span class="line">POST [base]/ValueSet/$expand</span><br><span class="line">[other headers]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;resourceType&quot; : &quot;Parameters&quot;,</span><br><span class="line">  &quot;parameter&quot; : [</span><br><span class="line">     &#123;</span><br><span class="line">     &quot;name&quot; : &quot;valueSet&quot;,</span><br><span class="line">     &quot;resource&quot; : &#123;</span><br><span class="line">       &quot;resourceType&quot; : &quot;ValueSet&quot;,</span><br><span class="line">     [value set details]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 返回</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">[other headers]</span><br><span class="line"></span><br><span class="line">&lt;ValueSet xmlns=&quot;http://hl7.org/fhir&quot;&gt;</span><br><span class="line">  &lt;!-- the server SHOULD populate the id with a newly created UUID</span><br><span class="line">    so clients can easily track a particular expansion  --&gt;</span><br><span class="line">  &lt;id value=&quot;43770626-f685-4ba8-8d66-fb63e674c467&quot;/&gt;</span><br><span class="line">  &lt;!-- no need for meta, though it is allowed for security labels, profiles --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- other value set details --&gt;</span><br><span class="line">  &lt;expansion&gt;</span><br><span class="line">    &lt;!-- when expanded --&gt;</span><br><span class="line">    &lt;timestamp value=&quot;20141203T08:50:00+11:00&quot;/&gt;</span><br><span class="line">  &lt;contains&gt;</span><br><span class="line">    &lt;!-- expansion contents --&gt;</span><br><span class="line">  &lt;/contains&gt;</span><br><span class="line">  &lt;/expansion&gt;</span><br><span class="line">&lt;/ValueSet&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搜索acme.org中Systolic展示的编码</span><br><span class="line">POST /ValueSet/$expand</span><br><span class="line">Content-Type: application/fhir+json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;resourceType&quot;: &quot;ValueSet&quot;,</span><br><span class="line">  &quot;compose&quot;: &#123;</span><br><span class="line">    &quot;include&quot;: [ &#123;</span><br><span class="line">      &quot;system&quot;: &quot;http://acme.org&quot;,</span><br><span class="line">      &quot;filter&quot;: [ &#123;</span><br><span class="line">        &quot;property&quot;: &quot;display&quot;,</span><br><span class="line">        &quot;op&quot;: &quot;=&quot;,</span><br><span class="line">        &quot;value&quot;: &quot;Systolic&quot;</span><br><span class="line">      &#125; ]</span><br><span class="line">    &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="lookup-概念查找"><a href="#lookup-概念查找" class="headerlink" title="$lookup 概念查找"></a>$lookup 概念查找</h4><p>一个外部系统可以向术语服务器发出查询操作来获取关于特定的系统&#x2F;代码组合的一组信息。服务器会返回用于显示和处理的信息。<br>例如，通过已知 valueset 23 其验证一个 codesystem 概念:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET [base]/ValueSet/23/$validate-code?system=http://loinc.org&amp;code=1963-8&amp;display=test</span><br></pre></td></tr></table></figure></div>

<p>通过指定一个 value set 来验证 CodeableConcept:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST [base]/ValueSet/$validate-code</span><br><span class="line">[other headers]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;ResourceType&quot; : &quot;Parameters&quot;,</span><br><span class="line">  &quot;parameter&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;name&quot; : &quot;coding&quot;,</span><br><span class="line">    &quot;valueCodeableConcept&quot; : &#123;</span><br><span class="line">      &quot;coding&quot; : &#123;</span><br><span class="line">        &quot;system&quot; : &quot;http://loinc.org&quot;,</span><br><span class="line">          &quot;code&quot; : &quot;1963-8&quot;,</span><br><span class="line">      &quot;display&quot; : &quot;test&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot; : &quot;valueSet&quot;,</span><br><span class="line">    &quot;resource&quot;: &#123;</span><br><span class="line">      &quot;resourceType&quot; : &quot;ValueSet&quot;,</span><br><span class="line">    [etc.]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## Response</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">[other headers]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;resourceType&quot; : &quot;Parameters&quot;,</span><br><span class="line">  &quot;parameter&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;name&quot; : &quot;result&quot;,</span><br><span class="line">    &quot;valueBoolean&quot; : false</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot; : &quot;message&quot;,</span><br><span class="line">    &quot;valueString&quot; : &quot;The display \&quot;test\&quot; is incorrect&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot; : &quot;display&quot;,</span><br><span class="line">    &quot;valueString&quot; : &quot;Bicarbonate [Moles/volume] in Serum&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="translate-概念转化"><a href="#translate-概念转化" class="headerlink" title="$translate 概念转化"></a>$translate 概念转化</h4><p>客户端可以向服务器请求将一个概念从一个值集转换为另一个值集。通常，这用于在编码系统之间进行转换（例如从 LOINC 转换为 SNOMED CT，或从 HL7 V3 代码转换为 HL7 V2 代码）。<br>例子：把 FHIR 复合状态映射成 v3</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET [base]/ConceptMap/$translate?system=http://hl7.org/fhir/composition-status</span><br><span class="line">  &amp;code=preliminary&amp;source=http://hl7.org/fhir/ValueSet/composition-status</span><br><span class="line">  &amp;target=http://terminology.hl7.org/ValueSet/v3-ActStatus</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">[other headers]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;resourceType&quot; : &quot;Parameters&quot;,</span><br><span class="line">  &quot;parameter&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;name&quot; : &quot;result&quot;,</span><br><span class="line">    &quot;valueBoolean&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot; : &quot;outcome&quot;,</span><br><span class="line">      &quot;valueCoding&quot; : &#123;</span><br><span class="line">        &quot;system&quot; : &quot;http://terminology.hl7.org/CodeSystem/v3-ActStatus&quot;,</span><br><span class="line">        &quot;code&quot; : &quot;active&quot;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="几个具体实现"><a href="#几个具体实现" class="headerlink" title="几个具体实现"></a>几个具体实现</h3><p>市面上有大部分术语库有自己的fhir terminology service实现，如：</p>
<ul>
<li>SNOMED实现的<a class="link"   href="https://github.com/IHTSDO/snowstorm" >snowstorm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, 支持SNOMED CT, LOINC, ICD-10, ICD-10-CM等等。当然对SNOMED-CT的支持更好。</li>
<li><a class="link"   href="https://github.com/b2ihealthcare/snow-owl" >Snow-owl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>开源版本支持SNOMED-CT, 付费版本支持LOINC，ICD-10等等。</li>
</ul>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul>
<li><a class="link"   href="https://tx.fhir.org/r4/" >FHIR Terminology Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://hl7.org/fhir/R4/terminologies.html" >Use codes in Resources <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://confluence.ihtsdotools.org/display/DOCSTART/7.+SNOMED+CT+Expressions" >SNOMED Expression <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>FHIR</tag>
      </tags>
  </entry>
  <entry>
    <title>Use SDC to Create Qustionnaires</title>
    <url>/2023/09/30/Use-SDC-to-Create-Qustionnaires/</url>
    <content><![CDATA[<h1 id="使用SDC-Structure-Data-Capture-创建问卷"><a href="#使用SDC-Structure-Data-Capture-创建问卷" class="headerlink" title="使用SDC(Structure Data Capture)创建问卷"></a>使用SDC(Structure Data Capture)创建问卷</h1><blockquote>
<p>本文将正对HL7<code>Structure Data Capture</code>的实施指引<code>IG</code>做一个介绍，通过本文可以基本了解如何设计一个流程化、符合FHIR标准的文件表单。</p>
</blockquote>
<h2 id="问卷在医疗环境现状"><a href="#问卷在医疗环境现状" class="headerlink" title="问卷在医疗环境现状"></a>问卷在医疗环境现状</h2><p>随着互联网医院的普及，越来越多的大型医院已经逐步将一些问卷调查如: 满意度调查，用药依从性调查等问卷都提上了手机端，患者可以方便地使用微信等生态录入反馈信息。但是还有一些场景的问卷，医院还是会使用纸质问卷，原因是主要为了：</p>
<ol>
<li>归档</li>
<li>临床流程强制性环节，如术前主观知情同意书，或主观意愿征询等。<br>目前的真实世界实践主要存在如下几个问题:</li>
<li>没有一个标准化，可配置的问卷表单实现方式，即便一些系统声称可以实现灵活可配置，但是这些表单系统涉及的问题和回答</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>RAG</title>
    <url>/2023/11/25/RAG/</url>
    <content><![CDATA[<h1 id="什么是检索增强生成RAG"><a href="#什么是检索增强生成RAG" class="headerlink" title="什么是检索增强生成RAG?"></a>什么是检索增强生成RAG?</h1><blockquote>
<p>本文将为您简要介绍RAG（Retrieval-Augmented Generation）的发展历程。通过仔细阅读以下内容，您将初步了解RAG，并通过实际应用案例找到适合您的应用场景。</p>
</blockquote>
<h2 id="定义与用处"><a href="#定义与用处" class="headerlink" title="定义与用处"></a>定义与用处</h2><p>检索增强生成（RAG）是一种人工智能框架，通过基于外部知识源对模型进行信息补充，以增强大型语言模型内部对信息的表示，从而提高模型生成的响应质量。</p>
<p>RAG是用于从外部知识库中检索事实，在大型语言模型（LLMs）上建立基础的人工智能框架，旨在提供最准确、最新的信息，并使用户深入了解LLMs的生成过程。大型语言模型可能存在不一致性，有时它们能够准确回答问题，而其他时候则可能随机地重复训练数据中的事实。如果它们偶尔听起来好像不知道自己在说什么，那是因为它们确实不知道。大型语言模型知道词语在统计上的关联，但不知道它们的含义。</p>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>在基于大型语言模型的问答系统中实施RAG有两个主要好处：它确保模型能够访问最新、可靠的事实，用户可以访问模型的信息源，以确保其响应可以进行准确性检查，最终保证可信度。</p>
<p>RAG还具有额外的好处，那就是敏感信息不用计入预训练。通过基于一组外部可验证的事实来基础LLM，模型减少了将信息嵌入其参数的机会。这降低了LLM泄漏敏感数据或产生不正确或误导性信息的可能性。</p>
<p>RAG还减少了用户不断对模型进行新数据训练和参数更新的需求。通过这种方式，RAG可以降低在企业环境中运行以LLM为动力的聊天机器人的计算和财务成本。</p>
<h2 id="大模型微调的一种方式"><a href="#大模型微调的一种方式" class="headerlink" title="大模型微调的一种方式"></a>大模型微调的一种方式</h2><p>支撑所有基础大模型的底层架构是一种被称为transformer的人工智能架构。它将大量原始数据转化为其基本结构的压缩表示。从这个基础架构表示开始，基础模型可以通过对标记的领域特定知识进行一些额外的微调来适应各种任务。</p>
<p>但仅仅通过微调很少能够使模型获得在不断变化的背景下回答高度特定问题所需的全部知识广度。在一篇2020年的论文中，Meta（当时称为Facebook）提出了一个名为检索增强生成的框架，以使LLMs能够访问其训练数据之外的信息。RAG允许LLMs基于专业知识体系以更准确的方式回答问题。</p>
<p>正如其名所示，RAG有两个阶段：检索和内容生成。在检索阶段，算法搜索并检索与用户提示或问题相关的信息片段。在开放领域的消费者设置中，这些事实可以来自互联网上索引的文档；在封闭领域的企业设置中，通常使用更窄范围的来源以增加安全性和可靠性。</p>
<p>这些外部知识的集合被追加到用户的提示中，并传递给语言模型。在生成阶段，LLM从增强提示和其对训练数据的内部表示中获取信息，以合成一个针对用户的引人入胜的答案。然后，可以将答案传递给带有其来源链接的聊天机器人。</p>
<h2 id="RAG应用场景"><a href="#RAG应用场景" class="headerlink" title="RAG应用场景"></a>RAG应用场景</h2><p><strong>个性化和可验证的响应。</strong><br>如今，由LLM驱动的聊天机器人可以在无需人类编写新脚本的情况下为客户提供更个性化的答案。而RAG允许LLMs更进一步，极大地减少了对模型进行新样本喂养和重新训练的需求。只需上传最新的文档或数据，模型就以开卷考试的方式检索信息以回答问题。并且回答的问题将附带了其信息来源的链接以确认信息的正确性。</p>
<p><strong>教导模型识别自己不知道的情况。</strong><br>人类的查询并非总是如此直截了当。它们可能措辞模糊、复杂，或需要模型没有或不能轻松解析的知识。在这些条件下，LLMs容易编造事实。通过足够的微调，LLM可以被训练停下来并表示自己不知道如何解答而不是随意回答。但训练它可能需要看到数千个可以回答和无法回答的问题的示例。只有在那之后，模型才能学会识别无法回答的问题，并探索更多细节，直到找到它具备回答的信息的问题。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>RAG目前是将LLMs基础在最新的、可验证的信息上的最为知名的工具，同时降低了不断重新训练和更新它们的成本。RAG依赖于丰富提示信息的能力，其中包含在向量中的相关信息，而这些向量是数据的数学表示。向量数据库可以高效地索引、存储和检索诸如推荐引擎和聊天机器人等信息。但RAG并不完美，让RAG正确完成仍然存在许多有趣的挑战。</p>
<h3 id="Azure-RAG演示"><a href="#Azure-RAG演示" class="headerlink" title="Azure RAG演示"></a>Azure RAG演示</h3><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul>
<li><a class="link"   href="https://arxiv.org/pdf/2005.11401v4.pdf" >RAG论文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/Azure/GPT-RAG" >微软gpt-rag <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>非财务经理的财务课</title>
    <url>/2023/12/13/%E9%9D%9E%E8%B4%A2%E5%8A%A1%E7%BB%8F%E7%90%86%E7%9A%84%E8%B4%A2%E5%8A%A1%E8%AF%BE/</url>
    <content><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>财务知识对于很多非财务背景的同学看似很陌生，其实必要的财务知识对于我们日常的生活和工作都有着息息相关的帮助。本人曾参加多次参加线上和线下财务和金融知识方面的培训，可惜疏于总结和应用，直到最近开始规划产品的商业化落地才又捡起来。本文将总结自己曾经学习到的知识做个总结，适用于非财务背景的同学食用。</p>
<h3 id="基础财务术语"><a href="#基础财务术语" class="headerlink" title="基础财务术语"></a>基础财务术语</h3><ul>
<li>B&#x2F;S &#x3D; Balance Sheet 资产负债表</li>
<li>P&amp;L &#x3D; Profit and Loss Statement 损益表</li>
<li>Cash Flow (operating cash flow, free cash flow &#x3D; FCF) 现金流</li>
<li>Sales Revenue (Net sales) 销售收入 （净销售）</li>
<li>CoS&#x2F;CoGS &#x3D; Cost of Sales&#x2F;Cost of Goods Sales 销售成本</li>
<li>GP&#x2F;GM &#x3D; Gross Profit&#x2F;Gross Margin 毛利</li>
<li>GP% &#x3D; Gross Profit &#x2F; Sales Revenue 毛利率</li>
<li>OpEx &#x3D; Operating Expenses 运营费用</li>
<li>OpEx% &#x3D; OpEx&#x2F;Sales Revenue 运营费用率</li>
<li>Ebit &#x3D; Earnings before Interest and Taxes 息税前利润</li>
<li>MC &#x3D; Market Contribution 市场贡献(实体收入&#x2F;整个市场收入​) </li>
<li>W&#x2F;C &#x3D; Working Capital 营运资本</li>
<li>W&#x2F;C % of LTM Revenue &#x3D; Working Capital &#x2F; Last 12 month Revenue 营运资本占过去12个月收入百分比</li>
<li>AR &#x3D; Accounts Receivables 应收账款</li>
<li>Inv &#x3D; Inventory 存货</li>
</ul>
<h3 id="掌握三大表，韭菜当地好"><a href="#掌握三大表，韭菜当地好" class="headerlink" title="掌握三大表，韭菜当地好"></a>掌握三大表，韭菜当地好</h3><h4 id="资产负债表-Balance-Sheet"><a href="#资产负债表-Balance-Sheet" class="headerlink" title="资产负债表 Balance Sheet"></a>资产负债表 Balance Sheet</h4><p><strong>含义：</strong>总括地反映会计主体在特定日期（年末、季末、月末）财务状况的报表。<br><strong>基本结构：</strong>资产 &#x3D; 负债 + 所有者权益。 无论公司处于什么状态这个会计平衡公式永远是恒等的。<br><strong>提供的信息：</strong>资本来源和资本状况，包括公司掌握的经济资源，公司所负担的债务，公司的偿债能力，公司所有者所享有的权益，公司经营模式特点。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/asset-eq.png"
                      alt="asset-eq"
                ></p>
<p><strong>资产的组成包括：</strong></p>
<ul>
<li>非流动资产<ul>
<li>无形资产</li>
<li>有形资产</li>
<li>资产投资</li>
<li>权益法下投资的关系公司股权</li>
<li>其它金融资产</li>
</ul>
</li>
<li>流动资产<ul>
<li>库存</li>
<li>应收账款</li>
<li>其它流动资产</li>
<li>证券</li>
<li>现金或现金等价物</li>
</ul>
</li>
<li>待摊费用</li>
<li>待售非流动资产</li>
</ul>
<p><strong>负债及所有者权益包括：</strong></p>
<ul>
<li>所有者权益<ul>
<li>股本</li>
<li>资本公积</li>
<li>盈余公积</li>
<li>未分配利润&#x2F;亏损</li>
<li>累积其他综合收益</li>
<li>少数股东收益</li>
</ul>
</li>
<li>非流动负债<ul>
<li>预提养老金</li>
<li>其他非流动性预提</li>
<li>非流动性银行借款</li>
<li>其他非流动性负债</li>
<li>递延所得税负债</li>
</ul>
</li>
<li>流动负债<ul>
<li>流动性预提费用</li>
<li>流动性银行借款</li>
<li>应付账款</li>
<li>当期所得税负债</li>
<li>其他流动性负债</li>
</ul>
</li>
<li>递延收益</li>
<li>带出售非流动资产相关负债</li>
</ul>
<h4 id="损益表-x2F-利润表-Profit-and-Loss-statement-x2F-Income-statement"><a href="#损益表-x2F-利润表-Profit-and-Loss-statement-x2F-Income-statement" class="headerlink" title="损益表&#x2F;利润表 Profit and Loss statement &#x2F; Income statement"></a>损益表&#x2F;利润表 Profit and Loss statement &#x2F; Income statement</h4><p><strong>含义：</strong>反映公司在过去一段时间销售收入、成本和盈利关系的报表。P&amp;L体现在<code>权责发生制度</code>下，收入和支出被记录在它们发生的时候，而不是在现金实际收到或支付的时候。这意味着，即使现金尚未交换，但在业务活动发生的时候，相应的收入或支出就会被记录。<br><strong>基本结构：</strong>利润 &#x3D; 收入 - 支出<br><strong>提供的信息：</strong>反映公司获利情况，反映公司利润的构成，反映税金缴纳情况，预测公司未来发展的情况。<br><strong>企业的净利润来自三方面：</strong>1. 营业利润 2. 投资收益 3. 营业外收支净额<br><strong>销售收入的确认时间：</strong></p>
<ul>
<li>销售商品采用托收承付方式，在办妥托收手续时确认收入。</li>
<li>销售商品采用预收款方式的，在发出商品时确认收入，预收款应确认为负债。</li>
<li>销售商品需要安装和检验的，在购买方接受商品以及安装和检验完毕前，不确认收入，待安装和检验完毕后确认收入。如果安装比较简单，可以在发出商品时确认收入。</li>
<li>销售商品采用以旧换新的，销售的商品应当按照销售商品收入确认条件确认收入。回收的商品作为购进商品处理。</li>
</ul>
<p><strong>净利润公式展开</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sales revenues 销售收入</span><br><span class="line">- Cost of goods sold(COGS) 销售成本</span><br><span class="line">= Gross profit  毛利</span><br><span class="line">+ Other operating income  其他运营收入</span><br><span class="line">- Sales and marketing (S&amp;M) expense  销售和市场费用</span><br><span class="line">- General administration (G&amp;A) expense 管理费用</span><br><span class="line">- Research and Development (R&amp;D) expense  研发费用</span><br><span class="line">- Other operating expense   其他运营费用</span><br><span class="line">= Earning Before Interest and Taxes(Ebit) 息税前利润</span><br><span class="line">+/- Financial result  财务费用</span><br><span class="line">= Earning Before Taxes (Ebt) 税前利润</span><br><span class="line">- income taxes  所得税</span><br><span class="line">= Net Income  净利润</span><br></pre></td></tr></table></figure></div>

<h4 id="现金流量表-Cash-Flow-Statement"><a href="#现金流量表-Cash-Flow-Statement" class="headerlink" title="现金流量表 Cash Flow Statement"></a>现金流量表 Cash Flow Statement</h4><p><strong>含义：</strong>提供企业在某一特定期间内有关现金及现金等价物的流入和流出信息。FCF体现在<code>现金发生制</code>下，现金发生制度只在现金实际发生交易时记录收入和支出，而不考虑交易发生的时间。<br><strong>基本结构：</strong>现金流量 &#x3D; 现金流入 - 现金流出<br><strong>提供的信息：</strong>反映净收益与现金余额的关系，预测未来现金流量，评价企业取得和运用现金的能力，确定企业支付利息、股利和到期债务的能力。<br><strong>影响因素：</strong></p>
<ul>
<li>应收账款 –</li>
<li>存货 –</li>
<li>固定资产投资 –</li>
<li>应付账款 ++</li>
<li>预收账款 ++</li>
</ul>
<p><strong>现金流中的流入和流出与损益表的收入和支出不完全一致，某些项并不会对现金流产生影响：</strong></p>
<ul>
<li>赊销产生的收入</li>
<li>固定资产折旧</li>
<li>存货或应收账款冲销</li>
<li>费用的预提</li>
</ul>
<h5 id="自由现金流-Free-Cash-Flow"><a href="#自由现金流-Free-Cash-Flow" class="headerlink" title="自由现金流 Free Cash Flow"></a>自由现金流 Free Cash Flow</h5><p>定义：自由现金流指扣除除新增资本投资后公司核心经营活动产生的现金流，是一项理论上更准确的业绩和公司财务状况衡量指标，反映公司在会计年度或季度内支付所有现金成本和费用后剩余的现金。计算自由现金流时会将运营资本的变化考虑进去。因此，自由现金流能够体现企业产生或消耗现金的能力程度。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">EbiT</span><br><span class="line">+/- change in trade receivables</span><br><span class="line">+/- change in inventories</span><br><span class="line">+/- change in prepayments received</span><br><span class="line">+/- change in payments in advance</span><br><span class="line">+/- change in other provisions</span><br><span class="line">- investments</span><br><span class="line">+ Deprecation</span><br><span class="line">= Free Cash Flow</span><br></pre></td></tr></table></figure></div>

<h3 id="利润中心和成本中心"><a href="#利润中心和成本中心" class="headerlink" title="利润中心和成本中心"></a>利润中心和成本中心</h3><h4 id="利润中心-Profit-Center"><a href="#利润中心-Profit-Center" class="headerlink" title="利润中心 Profit Center"></a>利润中心 Profit Center</h4><p>指一个责任中心，如果能同时控制生产和销售，既要对成本负责又要对收入负责，但没有责任或权力决定该中心资产投资的水平，因而可以根据其利润的多少来评价该中心的业绩， 因此称为利润中心。</p>
<ul>
<li>处于内控目的而设定的反应管理架构的会计组织单位，是用于计算利润的一个组织单元</li>
<li>可判断公司内各职责单元的损益情况</li>
<li>事业部Business Unit内的最小组织单元</li>
</ul>
<p>利润中心生成报告的目的是：</p>
<ul>
<li>衡量组织内各单元的业务发展情况指标。</li>
<li>报告采用全球统一的标准，保证全球各事业部的业务结果可统一衡量和合并。</li>
<li>可比较衡量集团内或各事业部内各组织单元的利润情况</li>
</ul>
<h4 id="成本中心-Cost-Center"><a href="#成本中心-Cost-Center" class="headerlink" title="成本中心 Cost Center"></a>成本中心 Cost Center</h4><p>成本中心对费用进行独立预算，纪律和归集组织单位。成本中心一般包括生产，行政，管理层，财务，服务，销售，IT和HR等。也可以按区域划分，比如销售区域。<br>成本中心报告的目的：</p>
<ul>
<li>增加公司成本结构的透明度，以此明确各自的责任</li>
<li>增强对于成本费用的管理，提供利润</li>
<li>为组织内的各部分细分团队提供成本信息</li>
<li>反映公司区域组织架构</li>
<li>确保将成本正确地分担至各个利润中心</li>
</ul>
<h3 id="上市公司报表例子"><a href="#上市公司报表例子" class="headerlink" title="上市公司报表例子"></a>上市公司报表例子</h3><h4 id="资产-x3D-负债-权益："><a href="#资产-x3D-负债-权益：" class="headerlink" title="资产&#x3D;负债+权益："></a>资产&#x3D;负债+权益：</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/BS-fix.png"
                      alt="bs-fix"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/BS-assets.png"
                      alt="bs-assets"
                ></p>
<p>负债及所有者权益表：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/BS-eq-lia.png"
                      alt="bs-eq-lia"
                ></p>
<h4 id="损益表"><a href="#损益表" class="headerlink" title="损益表"></a>损益表</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/income-statement.png"
                      alt="income"
                ></p>
<h3 id="业财融合，发现问题和机会"><a href="#业财融合，发现问题和机会" class="headerlink" title="业财融合，发现问题和机会"></a>业财融合，发现问题和机会</h3><p>财务数据可以帮助高管做决策，而在决策的过程中，我们不能以看财报的眼光看待财务数据，而要从内部决策的角度看待数据，财务数据是可以支持内部决策的。<br>财务并不是在经营结束后进行总结的滞后性数据，财务往往可以提前涉及，是基于未来的。例如，在编制预算中，我们就可以有针对性的对报表架构进行设计，如用多少倍的杠杆，是否轻资产架构等等。<br>在做决策的过程中，我们往往不用账本上的数据做决策，因为记在账簿的数据是已经发生的沉没成本，沉没成本不能用于做决策，但可以参考这些数据，机会成本，机会业绩，这些可能在未来发生的数据才是用来支持决策。</p>
]]></content>
  </entry>
  <entry>
    <title>机器学习一撇</title>
    <url>/2018/10/13/AI-2018-10-04-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%80%E6%92%87/</url>
    <content><![CDATA[<p>机器学习是建立在大量数据的基础上， 在有意义的大数据上面提取有用的信息， 然后做出预测。</p>
<h3 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a>典型应用场景</h3><ul>
<li>推荐算法</li>
<li>欺诈检测</li>
<li>市场细分研究</li>
<li>社交网络分析</li>
<li>医学研究</li>
</ul>
<h3 id="机器学习的三个分支"><a href="#机器学习的三个分支" class="headerlink" title="机器学习的三个分支"></a>机器学习的三个分支</h3><ul>
<li><p><strong>监督学习</strong><br>监督学习主要用于基于一组训练集做出预测结果， 如训练集和结果用数组表示<code>[x1, x2,...y]</code>, 算法将从训练集中学习如何预测将来的某个结果。如果y是数字那么这个预测叫做<code>回归</code>, 如果是明确的一些值， 那么这个预测叫做<code>分类</code>.</p>
</li>
<li><p><strong>非监督学习</strong><br>非监督学习主要用于发现数据中未知的模式， 典型的例子是分类集群。</p>
</li>
<li><p><strong>加强学习</strong><br>也叫<code>连续学习</code>, 在这种模式下， 我们不会得到最终结果。而是基于当前状态得出一个最优解， 也就是所谓的<code>agent</code>选择一个最优<code>action</code>, 然后将得到一个<code>award</code>.</p>
</li>
</ul>
<h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p>数据仓库是存放数据的各种源集合叫法。它有什么用呢？ 一个例子是把<code>OLTP</code>如mysql的数据做备份然后导入数据仓库做<code>OLAP</code>. 这时数据仓库中的数据多了一个时间维度， 用于区分版本。所以从不同的数据源导入数据仓可能需要做<code>ETL</code>, 也就是抽取-转化-导入。 这里的导入一般会把数据按不同维度导入到<code>data cube</code>.</p>
<p>数据仓一般会把数据组织成多个维度的数据立方， 基于所谓的<code>star schema</code>(一张<code>fact</code>表， 用于索引多张不同维度的其它表)，表中的数据是不同维度数据的聚合。</p>
<p>在数据仓做<code>OLAP</code>操作时， 一般涉及如下步骤：</p>
<ul>
<li><code>rollup</code>: 对某个维度的数据做聚合。</li>
<li><code>drilldown</code>: 在某个维度把数据打散， 使其颗粒度更细。如把按月展示, 打成按天展示.</li>
<li><code>slice</code>: 在一个维度切一层数据看， 比如查看所有二月的数据。</li>
<li><code>Dice</code>: 从一个cube中选择一个子集。</li>
</ul>
<p>数据仓可以被进一步切分为<code>data marts</code>, 用于不同角度的<code>drilldown</code>分析。</p>
<h3 id="机器学习的哲学"><a href="#机器学习的哲学" class="headerlink" title="机器学习的哲学"></a>机器学习的哲学</h3><p>正常想法，想要把一组输入数据经过处理得到结果， 一般可以研究输入的属性，然后写一个函数计算出结果。 但是有时候它们之间的关系往往难以确定。 这个时候机器学习就派上用处了，它可以基于历史所有的数据做出预测。 机器学习大致可以分两种学习策略：</p>
<h4 id="懒惰学习lazy-learning"><a href="#懒惰学习lazy-learning" class="headerlink" title="懒惰学习lazy learning"></a>懒惰学习<code>lazy learning</code></h4><p>懒惰学习基于实例， 学习者记住所有之前看过的例子， 当一个新的数据来到， 它尝试从历史见过的数据中找到相似数据，然后使用历史数据的结果作为参考去预测当前输入数据的结果。这种学习的前提是上述两者在属性上近似，所以他们的输出也近似。 <code>Nearest neighbor</code>最近邻居法就是经典的懒惰学习例子。</p>
<h4 id="主动学习eager-learning"><a href="#主动学习eager-learning" class="headerlink" title="主动学习eager learning"></a>主动学习<code>eager learning</code></h4><p>主动学习是基于模型的学习，学习者假设输入属性和输出相关， 并且基于某个模型（比如线性回归， 逻辑回归， 神经网络等等）。 所以学习者学习基于历史数据得出的模型（主要是模型参数）， 当一个新的数据来临， 它就会使用这个模型去预测结果。<br>主动学习学习通用模型， 懒惰学习从看过的例子中学习。他们还有一点不同， 主动学习的模型必须满足所有历史数据， 但是懒惰学习可以只关注最近某些时间的点。懒惰模型也更难以构建一个综合的模型，需要大量的内存存储所有见过的数据。</p>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Learning Book Notes--Chapter 5</title>
    <url>/2018/10/03/AI-2019-09-21-deeplearning-notes-chap5/</url>
    <content><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><h3 id="Statistical-learning-theory-tells-us"><a href="#Statistical-learning-theory-tells-us" class="headerlink" title="Statistical learning theory tells us:"></a>Statistical learning theory tells us:</h3><p>如果测试集和训练集都是从一个叫<code>data generating process</code>的数据集中产生, 我们可以做一些假设, 测试集和训练集将相互独立并且以相同的概率分布. 有了这个假设我们才能对训练集和测试集误差做数学上研究.</p>
<h3 id="取决机器学习算法性能的因素是"><a href="#取决机器学习算法性能的因素是" class="headerlink" title="取决机器学习算法性能的因素是:"></a>取决机器学习算法性能的因素是:</h3><ul>
<li>尽可能的减少训练误差</li>
<li>使测试误差尽可能接近训练误差</li>
</ul>
<h3 id="欠拟合"><a href="#欠拟合" class="headerlink" title="欠拟合"></a>欠拟合</h3><p>模型的训练误差不够小</p>
<h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><p>模型的测试误差和训练误差过大</p>
<h3 id="可以通过调节capacity-容量-来调节拟合"><a href="#可以通过调节capacity-容量-来调节拟合" class="headerlink" title="可以通过调节capacity(容量)来调节拟合"></a>可以通过调节capacity(容量)来调节拟合</h3><ul>
<li>调节容量的方法之一是: 选择一个<code>hypothesis space</code>(假设空间).这个假设空间是能够表达所有解决方案的函数集.换个角度讲, 就是改变输入集特征的数值, 同时可以增加这些特征的新参数. 比如把一个model从线性空间改成多项式空间, 那么容量将会变大.</li>
<li>另一调节容量的方式是: 指定模型从某些类别的函数选择. 这叫<code>Representational capacity</code></li>
</ul>
<h3 id="VC维度可以来量化容量"><a href="#VC维度可以来量化容量" class="headerlink" title="VC维度可以来量化容量"></a>VC维度可以来量化容量</h3><p>VC维度可以测量一个二元分类器的容量. 定义为: 存在一个最大值m, 分类器使m个样本可以被任意标记.</p>
<h3 id="统计学习理论中最重要的结论阐述了训练误差和泛化误差之间差异的上界随着模型容量增长而增长，但随着训练样本增多而下降"><a href="#统计学习理论中最重要的结论阐述了训练误差和泛化误差之间差异的上界随着模型容量增长而增长，但随着训练样本增多而下降" class="headerlink" title="统计学习理论中最重要的结论阐述了训练误差和泛化误差之间差异的上界随着模型容量增长而增长，但随着训练样本增多而下降"></a>统计学习理论中最重要的结论阐述了训练误差和泛化误差之间差异的上界随着模型容量增长而增长，但随着训练样本增多而下降</h3><p><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-09-21%20at%2021.28.04.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-09-21%20at%2021.28.04.png"></p>
<h3 id="随着训练集增加-容量也需要增加-否则将出现欠拟合"><a href="#随着训练集增加-容量也需要增加-否则将出现欠拟合" class="headerlink" title="随着训练集增加, 容量也需要增加, 否则将出现欠拟合"></a>随着训练集增加, 容量也需要增加, 否则将出现欠拟合</h3><p><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-09-21%20at%2021.28.51.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-09-21%20at%2021.28.51.png"></p>
<h3 id="no-free-lauch-theorem"><a href="#no-free-lauch-theorem" class="headerlink" title="no free lauch theorem"></a>no free lauch theorem</h3><p>在所有可能的数据生成分布上平均之后，每一个分类算法在未事先观测的点上都有相同的错误率.<br>所以我们只需要对特定Task设计最好算法就行.</p>
<h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p>正则化是指我们修改学习算法，使其降低泛化误差而非训练误差.</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Classic Rough sets translation</title>
    <url>/2020/06/29/AI-2020-06-30-Rough-sets/</url>
    <content><![CDATA[<h2 id="Forword"><a href="#Forword" class="headerlink" title="Forword"></a>Forword</h2><p>本文主要想翻译一下经典论文<code>Pawlak Z.Roughset</code>， 以期全面地了解这一技术，为后续应用打下基础。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本论文目的是描述粗糙集的一些属性，</p>
<h2 id="REFERENCES"><a href="#REFERENCES" class="headerlink" title="REFERENCES"></a>REFERENCES</h2><ol>
<li>E. Konrad, E. Ortowska, and Z. Pawlak, An approximate concept learning (Berlin,<br>Bericht, 1981), pp. 81-87.</li>
<li>W. Marek and Z. Pawlak, “Rough sets and information systems,” ICS PAS Reports<br>(441) (1981).</li>
<li>R. Michalski, “S., Pattern Recognition as Role-Guided Inductive Interference,” 1EEE<br>Transaction on Pattern Analysis and Machine Intelligence 2:179-187 (1971 ).</li>
<li>E. Ortowska, “Semantics of vague concepts, Application of rough sets,” ICS PAS<br>Reports (469) (1982).</li>
<li>E. Ortowska, “Logic of vague concepts, Application of rough sets,” 1CS PAS Reports<br>(474) (1982).</li>
<li>E. Orlowska and Z. Pawlak, “Measurement and observability, Application of rough sets,”<br>(to appear).</li>
<li>Z. Pawlak, “Rough sets,” ICS PAS Reports (431) (1981).</li>
<li>Z. Pawlak, “Rough relations,” ICS PAS Reports (435) (1981).</li>
<li>Z. Pawlak, “Rough functions,” ICS PAS Reports (167) (1981).</li>
<li>Z. Pawlak, “Information systems, theoretical foundations,” Information systems 6<br>(3):205-218 (1981).<br>t 1. Z. Pawlak, “Rough sets, Algebraic and topological approach,” ICS PAS Reports (482)<br>(1982).</li>
<li>A. Robinson, Non-standard analysis (North-Holland Publishing Company, Amsterdam,<br>1966).</li>
<li>L. A. Zadah, “Fuzzy sets,” Information and Control 8:338-353 (1965).</li>
<li>E. O. Zeeman, “The Topology of the Brain and Visual Perception,” in Topology of 3-<br>Manifolds and related topics, M. K. Fort, ed. (Englewood Cliffs, N.Y., 1962).</li>
</ol>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习二撇</title>
    <url>/2022/10/30/AI-2022-10-31-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%8C%E6%92%87/</url>
    <content><![CDATA[<h2 id="机器学习适合解决的场景"><a href="#机器学习适合解决的场景" class="headerlink" title="机器学习适合解决的场景"></a>机器学习适合解决的场景</h2><ul>
<li>需要大量手工调整或需要长串规则才能解决的问题，机器学习往往可以简化代码、提高性能</li>
<li>问题复杂，传统方法难以解决</li>
<li>环境有波动，机器学习可以适应新数据</li>
<li>洞察复杂问题和大量数据，找出潜在规律</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>集成学习</title>
    <url>/2022/11/06/AI-2022-11-07-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="集成学习的本质"><a href="#集成学习的本质" class="headerlink" title="集成学习的本质"></a>集成学习的本质</h2><p>集成学习的本质是集众之长得出一个更好的结果。专业术语来讲是集成多个单独的<code>classifier</code>(一般是弱学习者<code>weak learner</code>)来获得一个更优的<code>classifier</code>.<br>集成学习最大的好处是可以解决高偏差和方差问题。采用多个分类器可以增加模型的复杂性来解决方差问题，而只要分类器足够不相干，统计规律告诉我们这样可以减少偏差。</p>
<h3 id="偏差和方差的识别"><a href="#偏差和方差的识别" class="headerlink" title="偏差和方差的识别"></a>偏差和方差的识别</h3><p>一般模型的<code>error = Bias**2 + Variance + inreducible error</code>, 实际应用中我们一般使用学习曲线和验证曲线来评估他们。<code>validation curve</code>是不同超参数下，算法可以达到的性能。在每个超参数下，我们使用<code>K-fold</code>交叉验证，存储样本内的性能和样本外的性能，然后计算并画出样本内和样本外的性能的平均和标准差值。最后通过比较相对和觉得的性能，我们可以计算出偏差和方差的大小。</p>
<h3 id="集成学习的关键—足够多样的分类器"><a href="#集成学习的关键—足够多样的分类器" class="headerlink" title="集成学习的关键—足够多样的分类器"></a>集成学习的关键—足够多样的分类器</h3><p>基本上有两种方式可以得到足够不同的分类器，一种是使用不同的算法，另一种是使用相同的算法在随机子集。</p>
<h3 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h3>]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>ML, ensemble</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerBI Quickstart</title>
    <url>/2022/10/01/BI-2022-10-04-PowerBI-Quickstart/</url>
    <content><![CDATA[<h2 id="PowerBI-Quickstart-Guide"><a href="#PowerBI-Quickstart-Guide" class="headerlink" title="PowerBI Quickstart Guide"></a>PowerBI Quickstart Guide</h2><p>截止2022年末市面上主流的BI产品有PowerBI, Tableau和国产帆软的FineBI. 由于Tableau逐渐退出中国，本文主要介绍一下PowerBI的基础功能。</p>
<h3 id="数据导入方式"><a href="#数据导入方式" class="headerlink" title="数据导入方式"></a>数据导入方式</h3><p>PowerBI支持从130+不同数据源直接导入数据，主要导入数据的方式分为:</p>
<ul>
<li>Direct import 直接导入</li>
<li>DirectQuery 直接查询</li>
<li>Live Connection 在线连接</li>
</ul>
<p>这三种数据连接方式主要区别于:</p>
<ul>
<li>direct import 是将数据直接导进PowerBI desktop端的SSAS(SQL Server Analysis Services)的向量内存中，既然要存入内存那么对客户端的内存有一些要求，当然SSAS提供了一些内存存储压缩的算法来减少内存占用量。缺点是数据不是实时更新的。</li>
<li>DirectQuery 顾名思义是直接在另一端的数据库上做查询, 这样性能的压力来到了数据库端。PowerBI目前支持主流的数据库，做查询前PowerBI desktop会将查询解释成对应的数据库语言到目标数据库执行，所以这里的语言转化或者叫做翻译是限制DirectQuery能力的瓶颈点。</li>
<li>Live Connection只支持类SSAS的远程数据库，所有的能力和限制取决于远端SSAS的能力。</li>
</ul>
<p>如下表可以用来决策什么时候用什么方式的数据连接，有时候我们可能需要一个综合的解决方案。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/screen_shot_data_import.png"
                     
                ></p>
<h3 id="数据转化策略"><a href="#数据转化策略" class="headerlink" title="数据转化策略"></a>数据转化策略</h3><p>PowerBI使用Power Query Editor来处理数据清洗和转换，底层使用的是<code>M</code>语言。在真正运行处理逻辑时，PowerQuery有个<code>Applied Steps</code>功能可以用来调整处理逻辑的顺序或者反悔某些操作如删除。</p>
<p>Power Query Editor在增加列的时候有一个自动根据所填例子形成新增列的功能，就是在新增一列时填入这列一行想转化成的数据，powerBI会自动完成剩余列的数据填充。</p>
<h4 id="条件列，向下填充，逆透视，合并查询和追加查询"><a href="#条件列，向下填充，逆透视，合并查询和追加查询" class="headerlink" title="条件列，向下填充，逆透视，合并查询和追加查询"></a>条件列，向下填充，逆透视，合并查询和追加查询</h4><p><code>conditional column</code>就是在某列上经过if条件过滤后的生成一个新的列，比如某些列为空则生成新的列。<br><code>fill down</code>向下填充就是把为空的值按最上面的非空值填充。<br><code>split column</code>把一个列按一定规则拆成两个列。<br><code>unpivot</code>逆透视是把原列头作为新的表的行值，而原来列的值将会被相应转成对应的行。<br><code>merge queries</code>类似SQL的join, 分为内联，左联，右联，外联等。</p>
<h3 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h3><p>PowerBI有强大的数据建模能力，可以自动识别表的关系，处理多对多管理和角色扮演维表<code>role-play table</code>.</p>
<h4 id="Role-play-table"><a href="#Role-play-table" class="headerlink" title="Role-play table"></a>Role-play table</h4><p>角色扮演维表是一张维表（比如时间维度表）对事实表有多个作用，同时一张表就可以扮演多个角色从而减少数据冗余。举个例子，一张销售事实表可有多个时间维度，如订单时间，交付时间，维护时间等。PowerBI需要使用非激活的关系和DAX度量来处理<code>Role-play</code>, 具体需要用到<code>USERELATIONSHIP</code>函数。</p>
]]></content>
      <categories>
        <category>Business Intelligence</category>
      </categories>
      <tags>
        <tag>BI,powerbi</tag>
      </tags>
  </entry>
  <entry>
    <title>OCT Basic</title>
    <url>/2022/08/04/Devices-2022-08-05-OCT-basic/</url>
    <content><![CDATA[<h3 id="OCT技术原理"><a href="#OCT技术原理" class="headerlink" title="OCT技术原理"></a>OCT技术原理</h3><p>OCT(光学相干断层扫描)的基本原理是把光束(近红外光800-1500nm)投射到被成像的组织或标本上，光束被不同距离上的显微组织反射，通过测量反射光的延迟时间以及反射光的强度，将不同的位置上测量相干光所获得的反射信息转化为数字信号，经过计算机处理得出二维或三维的图像。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2022-08/oct-z-axis-distance-measurement.png"
                     
                ></p>
<h3 id="时域OCT"><a href="#时域OCT" class="headerlink" title="时域OCT"></a>时域OCT</h3><p>第一台被发明的OCT就是时域OCT，通过调节移动参考镜，使参考光分别与从眼内不同结构反射回来的信号光产生干涉，通过分别记录相应的参考镜空间位置，便可测量出眼球内不同组织结构的距离<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2022-08/time-domain-oct.png"
                     
                ></p>
<h3 id="频域OCT"><a href="#频域OCT" class="headerlink" title="频域OCT"></a>频域OCT</h3><p>频域OCT则保持参考镜不动，所有从不同层面反射回来的光通过分光仪和光电探测器，使用傅里叶变换将频谱干涉图变成时域含有深度信息的图。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2022-08/spectual-domain-oct.png"
                     
                ></p>
<p>相比时域OCT需要移动参考镜且一次只能获取一个信号，频域OCT成像的速度更快（40-100倍），分辨率更高，信噪比更高。下图是具体比较。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2022-08/oct-compare.png"
                     
                ></p>
<h3 id="Ascan-Bscan和Cube"><a href="#Ascan-Bscan和Cube" class="headerlink" title="Ascan, Bscan和Cube"></a>Ascan, Bscan和Cube</h3><p>Ascan是Z轴或深度的光反射扫描，成像是一个时间与强度坐标的点。Bscan是沿着X轴或者Y轴进行Ascan，成像是一幅2D的平面横截图. Cscan或者叫Cube是将Bscan沿着另一个轴进行扫描，形成3D立体的Cube.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2022-08/bscan.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2022-08/cube.png"
                     
                ></p>
]]></content>
      <categories>
        <category>devices</category>
      </categories>
      <tags>
        <tag>devices, OCT</tag>
      </tags>
  </entry>
  <entry>
    <title>眼球结构简介</title>
    <url>/2022/08/03/Devices-2022-08-05-eyeball-intro/</url>
    <content><![CDATA[<h3 id="眼球简介"><a href="#眼球简介" class="headerlink" title="眼球简介"></a>眼球简介</h3><h3 id="眼球筋膜鞘（Tenon囊）-Fascial-sheath-Tenon’s-capsule"><a href="#眼球筋膜鞘（Tenon囊）-Fascial-sheath-Tenon’s-capsule" class="headerlink" title="眼球筋膜鞘（Tenon囊） Fascial sheath (Tenon’s capsule)"></a>眼球筋膜鞘（Tenon囊） Fascial sheath (Tenon’s capsule)</h3><h3 id="纤维层-Fibrous-layer"><a href="#纤维层-Fibrous-layer" class="headerlink" title="纤维层 Fibrous layer"></a>纤维层 Fibrous layer</h3><h3 id="血管层-（葡萄膜）Vascular-layer-Uvea"><a href="#血管层-（葡萄膜）Vascular-layer-Uvea" class="headerlink" title="血管层 （葡萄膜）Vascular layer (Uvea)"></a>血管层 （葡萄膜）Vascular layer (Uvea)</h3><h3 id="神经层-（视网膜）Nervous-layer-Retina"><a href="#神经层-（视网膜）Nervous-layer-Retina" class="headerlink" title="神经层 （视网膜）Nervous layer (Retina)"></a>神经层 （视网膜）Nervous layer (Retina)</h3><h3 id="眼球的屈光介质-Refractive-media-of-the-eyeball"><a href="#眼球的屈光介质-Refractive-media-of-the-eyeball" class="headerlink" title="眼球的屈光介质 Refractive media of the eyeball"></a>眼球的屈光介质 Refractive media of the eyeball</h3><h3 id="临床症状-Clinical-conditions"><a href="#临床症状-Clinical-conditions" class="headerlink" title="临床症状 Clinical conditions"></a>临床症状 Clinical conditions</h3>]]></content>
      <categories>
        <category>science</category>
      </categories>
      <tags>
        <tag>science, eyeball</tag>
      </tags>
  </entry>
  <entry>
    <title>SAP的主数据模块和物料管理</title>
    <url>/2021/03/11/ERP-2021-03-12-SAP-MM/</url>
    <content><![CDATA[<h3 id="SAP的数据"><a href="#SAP的数据" class="headerlink" title="SAP的数据"></a>SAP的数据</h3><p>SAP把数据分为主数据和事务型数据。SAP的主数据一般有：</p>
<ul>
<li>物料主数据</li>
<li>客户主数据</li>
<li>供应商主数据</li>
<li>价格&#x2F;条件主数据</li>
<li>仓库管理主数据</li>
</ul>
<h3 id="Material-Master"><a href="#Material-Master" class="headerlink" title="Material Master"></a>Material Master</h3><p>在SAP中，每个物料都有一个特征叫<code>&quot;material type&quot;</code>, 用于不同的用途。</p>
]]></content>
      <categories>
        <category>ERP</category>
      </categories>
      <tags>
        <tag>ERP, SAP</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是生物标志物Biomarker?</title>
    <url>/2022/12/04/Healthcare-2022-12-05-what-is-biomarker/</url>
    <content><![CDATA[<h1 id="什么是生物标志物Biomarker"><a href="#什么是生物标志物Biomarker" class="headerlink" title="什么是生物标志物Biomarker?"></a>什么是生物标志物Biomarker?</h1><blockquote>
<p>生物标志物<code>Biomarker</code>在临床研究、临床医疗被广泛使用，尤其是它在某些条件下可以作为临床试验主要终点的替代。</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>生物标志物对药物和医疗设备的开发至关重要。尽管它们具有巨大的价值，在研究和临床实践中使用它们所涉及的基本定义和概念却非常混乱。此外，生物标志物的复杂性也被认为是理解慢性疾病和营养的一个限制。几年前，这个问题达到了顶峰。在美国食品和药物管理局（FDA）和美国国立卫生研究院（NIH）的一次联合领导会议上，每个联邦机构的领导人对生物标志物在不同使用环境中的适当定义有不同的印象。因此，他们成立了一个联合工作组，以形成共同的定义，并通过不断更新的在线文件–”生物标志物、终点和其他工具”（BEST）资源公开提供这些定义。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>术语<code>Biomarker</code>这个词由<code>biological marker</code>组成，不同的组织对生物标志物有不同定义，但是基本上表达的意义不尽相同。美国NIH的定义是：“一种可客观测量和评估的特征，作为正常生物过程、致病过程或对治疗干预的药理学反应的指标”。WHO牵头的定义是：“可以在体内或其产出物中被测量的任何物质、结构或过程，这些物质、结构或者过程会影响或可预测后续结果及疾病发生率”。后续WHO扩展了定义，不仅考虑到疾病的发病率和结果，还考虑到治疗、干预，甚至是无意的环境暴露，如化学品或营养物质的影响。一般而言，生物标志物可以指代医学标志的广泛子集，即从病人内外部观察到的医学状态的客观指标，这些指标可以被准确和重复测量。医学标志和医学症状是不同的，症状仅仅指患者自己感知的健康或疾病的迹象。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>生物标志物可以按生物学分类：可分为核酸类(基因组、循环肿瘤DNA、DNA甲基化、转录组、长链非编码RNA、微小RNA、信使RNA等)、蛋白类(蛋白组、肿瘤抗原、细胞因子等)、抗体类(肿瘤相关抗原自身抗体等)、代谢产物、细胞因子、微生物、外泌体、核小体等多种类别。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>生物标志物的例子包括从脉搏和血压这些基本的化学指标到更复杂的血液和其他组织的实验室检测。医学标志在临床实践中有着悠久的使用历史–与医学实践本身一样古老，而生物标志只是现代实验室科学允许我们可重复测量的最客观、可量化的医学标志。在临床研究中使用生物标志物，特别是实验室测量的生物标志物，是比较新颖的，这种做法的最佳方法仍在发展和完善之中。</p>
<h2 id="临床应用风险"><a href="#临床应用风险" class="headerlink" title="临床应用风险"></a>临床应用风险</h2><p>生物标志物在改善药物开发过程以及更大的生物医学研究事业中发挥着关键作用。了解可测量的生物过程和临床结果之间的关系，对于扩大我们治疗所有疾病的武器库，以及加深我们对正常、健康生理学的理解至关重要。至少从20世纪80年代开始，在癌症和心脏病等重大疾病的大型试验中，使用生物标志物作为替代结果的必要性已被广泛讨论。美国食品和药物管理局继续促进生物标志物在基础和临床研究中的使用，以及对潜在的新生物标志物的研究，以便在未来的试验中作为替代物使用。然而，尽管生物标志物具有良好的潜力来加速药物开发，减少对无效实验治疗的接触等等，但当试验设计者将其与临床终点相混淆时，生物标志物会带来巨大风险。<br>只有当我们完全了解生物过程的正常生理学、疾病状态下该过程的病理生理学以及干预措施–药物、设备或其他–对这些过程的影响时，生物标志物才能真正替代临床相关终点。由于我们很少有机会了解这些过程的全貌，因为总是有更多的细节我们不知道或不了解，所以作为替代终点的生物标志物需要不断地重新评估。使用生物标志物的研究应该始终以临床结果为最终衡量标准，至少要对生物标志物相关的成功进行回顾性分析。如果不对代用终点和真正的临床终点之间的关系进行持续的重新评估，我们就有可能再次批准整类药物，这些药物要么没有额外的好处，要么更糟糕的是会伤害病人。</p>
<h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li><a class="link"   href="https://www.ncbi.nlm.nih.gov/books/NBK326791/" >BEST (Biomarkers, EndpointS, and other Tools) Resource <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3078627/" >What are biomarkers? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9568382/" >肿瘤早期预警生物标志物的研究与思考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>healthcare</category>
      </categories>
      <tags>
        <tag>biomarker, healthcare</tag>
      </tags>
  </entry>
  <entry>
    <title>Eyes on FHIR Implement Guide（1）</title>
    <url>/2022/12/05/Standard-2022-12-06-Eyes-on-FHIR-IG-1/</url>
    <content><![CDATA[<h1 id="FHIR眼科实施指南IG（1）"><a href="#FHIR眼科实施指南IG（1）" class="headerlink" title="FHIR眼科实施指南IG（1）"></a>FHIR眼科实施指南IG（1）</h1><blockquote>
<p>2021年8月，FHIR patient care小组发布了FHIR眼科实施指南0.1.0版本，此版本只针对眼底相关疾病，并且通过了FHIR connectathon测试，可以双向与真实世界的EMR、诊断设备和PACS通信。</p>
</blockquote>
<h2 id="IG主要内容"><a href="#IG主要内容" class="headerlink" title="IG主要内容"></a>IG主要内容</h2><p>实施指南的主要内容可分为：</p>
<ul>
<li>患者旅程</li>
<li>概貌（Profiles）</li>
<li>15个真实用例</li>
<li>指引规范</li>
<li>术语</li>
<li>贡献者</li>
<li>产出物</li>
</ul>
<h2 id="患者旅程"><a href="#患者旅程" class="headerlink" title="患者旅程"></a>患者旅程</h2><p>本文将详细介绍患者旅程部分。目前0.1版本只涵盖了白内障和青光眼患者旅程，下面将分段介绍。</p>
<h3 id="白内障用例"><a href="#白内障用例" class="headerlink" title="白内障用例"></a>白内障用例</h3><p><strong>问题声明</strong><br>白内障手术的方法和术后结果的评价目前没有一个统一的标准。手术大夫使用不同的设备、数据集和信息系统来存储数据，造成了数据孤岛。国际上目前也没有一个通用的技术来共享白内障手术的数据。这就阻碍了这个领域的专业从业人员之间的合作，分享和研究等工作。</p>
<p><strong>用例</strong><br>手术大夫使用眼科管理系统记录患者白内障手术的术前数据、术中数据和术后数据。利益关系人包括手术大夫、患者群体、支付者、权威机构和研究者，他们需要追踪手术结果并评估类似工作，这么做主要的好处是可以分享白内障医疗实践和研究成果给其他眼科医生，并且进一步鉴别问题人群的需求，评估不同手术设备和耗材的差异与技术区别性。针对不同的用户，好处分别是：</p>
<ul>
<li><p>眼科大夫</p>
<ul>
<li>可以接收随访的数据来进一步观察患者术后的情况</li>
<li>逐步累计的数据可以帮助医生自我审查手术的结果，提高自身技术</li>
<li>同事间相互交流对比</li>
<li>最大限度地减少用于记录、发送、检索和追踪的认知和实践的工作量</li>
</ul>
</li>
<li><p>特检医师（验光师）</p>
<ul>
<li>增强在术前和术后对患者的沟通教育，提升服务质量</li>
<li>更容易和医生建立好合作关系</li>
<li>标准化和自动化审计和收集信息来提升或改善病患关系</li>
<li>最小化数据整理的工作</li>
</ul>
</li>
<li><p>患者</p>
<ul>
<li>可以收到自己的健康数据</li>
<li>可以把个人眼科信息集中到各类眼健康应用，比如配镜场景</li>
<li>最大限度减少个人信息管理的工作</li>
</ul>
</li>
</ul>
<h3 id="青光眼用例"><a href="#青光眼用例" class="headerlink" title="青光眼用例"></a>青光眼用例</h3><p><strong>患者旅程</strong>一个老年开角型青光眼（condition）患者需要经常性的监控。大部分检测发生在特检科，那里他需要经历一系列的检查，如视敏度，眼压（observation）等，和一系列诊断检查如视野，眼底照片，OCT等，以及风险评估。青光眼作为慢性病，较好的管理方式取决纵向和多模态数据的收集，如examination, testing, imaging(Observation, ImageStudy, DiagnosticReport)。患者复诊的频率一般从3-12个月之间。任何一个指标如果出现恶化，患者一般会被眼科大夫（ServiceRequest, Referral note）重新评估治疗方案或手术激光干预(Procedure)。所以这些过程中记录的数据就十分重要，方便后续随访和慢病管理。对于不同用户，使用这样用例的好处分别是：</p>
<ul>
<li>眼科大夫<ul>
<li>可以远程监控患者的进展情况</li>
<li>更加方便从患者慢病全流程上做结果评估</li>
<li>同事间的交流</li>
<li>最大限度地减少用于记录、发送、检索和追踪的认知和实践的工作量</li>
</ul>
</li>
<li>特检医师（验光师）<ul>
<li>更加有信心检查患者，并且知道大夫能够访问检查数据和结果</li>
<li>增强对患者的沟通教育，引导患者随访医生，提升服务质量</li>
<li>更容易和医生建立好合作关系</li>
<li>标准化和自动化审计和收集信息来提升或改善病患关系</li>
<li>最小化数据整理的工作</li>
</ul>
</li>
<li>患者<ul>
<li>可以收到自己的健康数据</li>
<li>可以把自己的数据集成到各种健康档案应用，如青光眼药物依从性。也可以使用其它设备如Home Icare家用手持式眼压计来富集个人的监控数据</li>
<li>最大限度减少个人信息管理的工作</li>
</ul>
</li>
</ul>
<h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li><a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/patient_journey.html" >Patient Journey Use Case <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>standard</category>
      </categories>
      <tags>
        <tag>FHIR, Standard,IG</tag>
      </tags>
  </entry>
  <entry>
    <title>Eyes on FHIR</title>
    <url>/2022/11/19/Standard-2022-11-20-Eyes-on-FHIR/</url>
    <content><![CDATA[<h1 id="什么是-Eyes-on-FHIR-？"><a href="#什么是-Eyes-on-FHIR-？" class="headerlink" title="什么是 Eyes on FHIR ？"></a>什么是 Eyes on FHIR ？</h1><blockquote>
<p>从事医疗信息化的朋友可能听说过FHIR(Fast Healthcare Interoperability Resouce), 但是在具体实现和应用上可能没有相关经验。下面这篇文章里，我们一起来看看美国的一个Patient Care project在眼科是怎么落地FHIR的。</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>2020年美国《21世纪医疗法》最终法规要求健康技术供应商必须支持2个公开的API能够使患者访问自己的健康数据。这两个API需要遵循HL7 FHIR标准。随着社区力量的驱动，FHIR的流行度和成熟度在美国逐渐成型，使得健康信息数据互操作性得到了很大的提升。</p>
<h2 id="Eyes-on-FHIR的目的"><a href="#Eyes-on-FHIR的目的" class="headerlink" title="Eyes on FHIR的目的"></a>Eyes on FHIR的目的</h2><p>虽然在美国FHIR的发展有很大进展，但是真实世界项目的落地尤其是临床专科的应用仍十分有限，主要原因是没有统一的实施指引（Implementation Guidance)。所以这个项目的目标就是开发必要的国际标准使FHIR能够真正地给某个专科带来价值。此项目的实施方式主要通过把眼科尽量全面的临床词典映射到FHIR格式，最后形成实施标准来帮助实现系统间的互联互通。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://confluence.hl7.org/download/attachments/82914199/image2021-8-7_14-15-43.png?version=1&modificationDate=1628309743891&api=v2"
                     
                ></p>
<p>具体流程如下：</p>
<ol>
<li><p>列出一系列眼科真实世界的用例，尤其是有互操作性痛点的案例。用例的形式需要考虑如下情形：</p>
<ul>
<li>涉及的元素<ul>
<li>Actors 操作人</li>
<li>Pre-condition 先决条件</li>
<li>Workflow 工作流</li>
<li>Post-condition 后置条件</li>
<li>Exceptions 例外</li>
<li>Data elements 数据元素</li>
<li>Necessary commentary 必要的备注</li>
</ul>
</li>
<li>专用词汇的定义<ul>
<li>FHIR 资源</li>
<li>临床专业术语， 如SNOMED-CT, LOINC, DICOM</li>
</ul>
</li>
<li>局限和差距的发现<ul>
<li>临床上，在某些地方的设备代码并不全面</li>
<li>如何做FHIR profile</li>
</ul>
</li>
</ul>
</li>
<li><p>收集和整理如上信息，包括编码系统等。</p>
</li>
<li><p>把上述信息转化为FHIR Profiles, 配置是否是必须项。</p>
</li>
<li><p>开发实施指引IG, 甄别如何使用FHIR资源解决某个特定的互操作性问题。</p>
</li>
<li><p>发布实施指引</p>
</li>
<li><p>参加三年一次的技术连接会，演示用例和测试互操作性。</p>
</li>
<li><p>参加三年一次的HL7-FHIR投票，获准正式发布实施指引。</p>
</li>
<li><p>转化IG, 让更多真实世界的案例可以使用此指引。</p>
</li>
</ol>
<h2 id="项目预期结果"><a href="#项目预期结果" class="headerlink" title="项目预期结果"></a>项目预期结果</h2><ul>
<li>建立治理、质控和伦理的原则；促成眼科相关各界人事代表组成委员会共同发展未来路线图。</li>
<li>临床和研究影响力。作为第一个临床专科实施项目，藉此机会展示FHIR的临床好处；记录可以重复利用的技术、协议、流程等材料。</li>
</ul>
<h2 id="此项目使用的场景"><a href="#此项目使用的场景" class="headerlink" title="此项目使用的场景"></a>此项目使用的场景</h2><ol>
<li>日常临床关护沟通相关；病人旅程相关，比如：纵向病患旅程；异步通信；远程医疗设备等</li>
<li>医师临床工具， 如SMART app&#x2F;CDS hooks&#x2F;integrating remote monitoring</li>
<li>患者注册数据收集， 如批量数据导出</li>
<li>临床工作流优化，如自动支付、审计、优先授权、行政管理。</li>
<li>辅助生命科学和研发，如辅助临床招募，数据统一。</li>
<li>AI图像诊断工作流，如下图：</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://confluence.hl7.org/download/attachments/82914199/image2021-8-8_10-3-20.png?version=1&modificationDate=1628381000230&api=v2"
                     
                ></p>
<h2 id="具体细节功能"><a href="#具体细节功能" class="headerlink" title="具体细节功能"></a>具体细节功能</h2><ol>
<li>Providing guidance for the FHIR representation of a comprehensive set of codified <strong>clinical findings</strong> to facilitate interoperable exchange of these data elements between systems.</li>
<li>Providing guidance for the FHIR representation of a comprehensive set of codified <strong>diagnoses</strong> to facilitate interoperable exchange of these data elements between systems.</li>
<li>Providing guidance for the FHIR representation of a comprehensive set of codified <strong>retinal therapeutics</strong> to facilitate interoperable exchange of these data elements between systems.</li>
<li>Exchanging information between and EHR (&#x2F;PMS) and a diagnostic device where:<br>EHR Supports DICOM Modality Worklist, Storage and Display (With <strong>no PACS</strong>)<br>Based on IHE’s Unified Eyecare Workflow ‘real world model’ (RWM) II</li>
<li>Exchanging information between and EHR (&#x2F;PMS) and a diagnostic device where:<br>EHR Supports DICOM Modality Worklist and Integrates with a <strong>PACS</strong><br>Based on IHE’s Unified Eyecare Workflow ‘real world model’ (RWM) I</li>
<li>Exchanging information between and EHR (&#x2F;PMS) and a diagnostic device where:<br>EHR Implements HL7 Only (<strong>no DICOM</strong> support) and Integrates with a PACS)<br>Based on IHE’s Unified Eyecare Workflow ‘real world model’ (RWM) III</li>
<li>Sending a referral containing clinical information from and&#x2F;or to any combination of the following practitioners: ophthalmologist, optometrist, general practitioner, specialist</li>
<li>Sending a referral from a clinician to a healthcare service (eg - an ambulatory service centre when booking for cataract surgery.</li>
<li>Exchanging information between and EHR and a clinical registry (eg - FRB!) - where:<br>The registry is highly structured；Not all registry required data points are routinely captured in a structured format in the EHR；Patient details must be de-identified.</li>
<li>Sending in bulk either all or part of an entire clinical record to a clinical registry.</li>
<li>Sending select data elements from select patients (de-identified) in bulk to a research institute &#x2F; life science body.</li>
<li>The <strong>referral</strong> of a patient to a clinical trial.</li>
<li>Automating prior authorization for anti-VEGF injections.</li>
<li>Real time clinical trial recruitment using <strong>CDS</strong> hooks (eg for treatment-naive wet-AMD)</li>
<li>SMART on FHIR app to compile and display relevant information into a single screen &#x2F; application</li>
</ol>
<h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li><a class="link"   href="https://confluence.hl7.org/pages/viewpage.action?pageId=82914199" >Eyes on FHIR <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>standard</category>
      </categories>
      <tags>
        <tag>FHIR, Standard</tag>
      </tags>
  </entry>
  <entry>
    <title>Eyes on FHIR Implement Guide（2)</title>
    <url>/2022/12/23/Standard-2022-12-24-Eyes-on-FHIR-IG-2/</url>
    <content><![CDATA[<h1 id="FHIR眼科实施指南IG（2）"><a href="#FHIR眼科实施指南IG（2）" class="headerlink" title="FHIR眼科实施指南IG（2）"></a>FHIR眼科实施指南IG（2）</h1><blockquote>
<p>2021年8月，FHIR patient care小组发布了FHIR眼科实施指南（IG）0.1.0版本，此版本只针对眼底相关疾病，并且通过了FHIR connectathon测试，可以双向与真实世界的EMR、诊断设备和PACS通信。</p>
</blockquote>
<h2 id="IG主要内容"><a href="#IG主要内容" class="headerlink" title="IG主要内容"></a>IG主要内容</h2><p>实施指南(Implement Guide)的主要内容可分为：</p>
<ul>
<li>患者旅程</li>
<li>概貌（Profiles）</li>
<li>15个真实用例</li>
<li>指引规范</li>
<li>术语</li>
<li>贡献者</li>
<li>产出物</li>
</ul>
<h2 id="概貌（Profiles）"><a href="#概貌（Profiles）" class="headerlink" title="概貌（Profiles）"></a>概貌（Profiles）</h2><p>HL7中国的wiki把<code>profile</code>翻译成<code>概貌</code>，也有翻译成<code>配置或规范</code>, 因为<code>profiling</code>翻译成<code>概貌化</code>似乎没有<code>规范化</code>更加准确。<code>profiling</code>用中文解释大概是把一个资源拓展并采用一些约束来限制它，以达到应用目的，拓展好的资源我们可以认识是<code>profile</code>. 0.1版本中有如下临床概貌已经被定义：</p>
<h3 id="眼科观测（Observations）"><a href="#眼科观测（Observations）" class="headerlink" title="眼科观测（Observations）"></a>眼科观测（Observations）</h3><ul>
<li><strong>基础眼科观察概貌</strong>，此<code>ObservationBase</code>概貌描述仅限眼科的观察，下表1是必须实现的字段。</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>1..1</td>
<td><a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/ValueSet-observation-final-status.html" >code <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>category</td>
<td>0..*</td>
<td><a class="link"   href="http://hl7.org/fhir/R4/codesystem-observation-category.html#4.3.14.232.2" >CodeableConcept <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>code</td>
<td>1..1</td>
<td><a class="link"   href="http://hl7.org/fhir/R4/valueset-observation-codes.html" >CodeableConcept <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>subject</td>
<td>1..1</td>
<td><a class="link"   href="http://hl7.org/fhir/R4/patient.html" >Reference(Patient) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>bodySite</td>
<td>0..1</td>
<td><a class="link"   href="http://hl7.org/fhir/R4/valueset-body-site.html#expansion" >CodeableConcept <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>bodySite.extension</td>
<td>0..*</td>
<td><a class="link"   href="http://hl7.org/fhir/R4/bodystructure.html" >Reference(BodyStructure) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>bodySite.extension.value</td>
<td>1..1</td>
<td>Reference(BodyStructure|<a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/StructureDefinition-body-structure-eye.html" >Ocular anatomical location <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
</tbody></table>
<center>表一. 基础眼科观察profile必须实现的字段</center>

<ul>
<li><strong>眼部解剖位置概貌</strong>。此<code>BodyStructureEye</code>概貌将眼部分为眼球、眼周和眼眶。由于眼部的位置需要更加细粒度的描述，所以需要使用<code>BodyStructure.locationQualifier</code>和<code>BodyStructure.location</code>绑定来精确地描述眼部解剖位置。</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>location</td>
<td>0..1</td>
<td><a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/ValueSet-body-site-eye.html#root" >CodeableConcept <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>locationQualifier</td>
<td>0..*</td>
<td><a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/ValueSet-qualifiers.html" >CodeableConcept <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
</tbody></table>
<center>表二. 眼部解剖位置概貌profile必须实现的字段</center>

<h4 id="临床观察（测量类的发现）"><a href="#临床观察（测量类的发现）" class="headerlink" title="临床观察（测量类的发现）"></a>临床观察（测量类的发现）</h4><ul>
<li><strong>眼压IOP</strong><code>ObservationIOP</code>，患者眼内(眼球内)压力的测量值(单位：mmHg)。</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>1..1</td>
<td>code(final or amended)</td>
</tr>
<tr>
<td>code</td>
<td>1..1</td>
<td>CodeableConcept</td>
</tr>
<tr>
<td>subject</td>
<td>1..1</td>
<td>Reference(Patient)</td>
</tr>
<tr>
<td>value[x]*</td>
<td>1..1</td>
<td>Quantity</td>
</tr>
<tr>
<td>value[x].value</td>
<td>1..1</td>
<td>decimal</td>
</tr>
<tr>
<td>value[x].unit</td>
<td>1..1</td>
<td>string</td>
</tr>
<tr>
<td>value[x].system</td>
<td>1..1</td>
<td>uri</td>
</tr>
<tr>
<td>value[x].code</td>
<td>1..1</td>
<td>code</td>
</tr>
<tr>
<td>bodySite</td>
<td>0..1</td>
<td>CodeConcept</td>
</tr>
<tr>
<td>bodySite.extension</td>
<td>0..*</td>
<td>Extension(bodySite)</td>
</tr>
<tr>
<td>bodySite.extension.value[x]</td>
<td>1..1</td>
<td>Reference(BodyStructure|Ocular anatomical location)</td>
</tr>
<tr>
<td>method</td>
<td>0..1</td>
<td><a class="link"   href="http://hl7.org/fhir/R4/valueset-observation-methods.html" >codeableConcept <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>method.coding</td>
<td>1..*</td>
<td><a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/ValueSet-iop-methods.html" >Coding <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
</tbody></table>
<center>表三.眼压测量概貌profile</center>
*[x]代表元素可以有多个类型

<ul>
<li><strong>视力VA</strong><code>ObservationVisualAcuity</code>, 可测量的检测还包括视力<code>Visual Acuity</code>概貌。</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>1..1</td>
<td>code(final or amended)</td>
</tr>
<tr>
<td>category</td>
<td>0..*</td>
<td>CodeableConcept</td>
</tr>
<tr>
<td>code</td>
<td>1..1</td>
<td>CodeableConcept</td>
</tr>
<tr>
<td>subject</td>
<td>1..1</td>
<td>Reference(Patient)</td>
</tr>
<tr>
<td>bodySite</td>
<td>0..1</td>
<td>CodeConcept</td>
</tr>
<tr>
<td>bodySite.extension</td>
<td>0..*</td>
<td>Extension(bodySite)</td>
</tr>
<tr>
<td>bodySite.extension.value[x]</td>
<td>1..1</td>
<td>Reference(BodyStructure|Ocular anatomical location)</td>
</tr>
<tr>
<td>method</td>
<td>1..1</td>
<td><a class="link"   href="http://hl7.org/fhir/R4/valueset-observation-methods.html" >codeableConcept <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
</tbody></table>
<center>表四.视力测量概貌</center>

<h4 id="临床观察（观测类的发现）"><a href="#临床观察（观测类的发现）" class="headerlink" title="临床观察（观测类的发现）"></a>临床观察（观测类的发现）</h4><p>其它观测类的临床发现用这个<code>ObservationEyeRegionFinding</code>概貌描述，此概貌也可以用<code>Condition</code>资源，可以来描述其它非眼科类的观察，比如：</p>
<ul>
<li>很可能与疾病无关的观察，如患者进入诊室的步态。</li>
<li>可能相关的观察，如甲状腺肿大，和甲状腺相关的眼科疾病。</li>
<li>高度相关的观察，如高血压。高血压是潜在非眼部或系统性的致盲原因，例如严重的高血压性视网膜病变或视网膜血管阻塞。</li>
</ul>
<h3 id="眼科诊断-x2F-疾病"><a href="#眼科诊断-x2F-疾病" class="headerlink" title="眼科诊断&#x2F;疾病"></a>眼科诊断&#x2F;疾病</h3><p><code>ConditionBase</code>这个概貌用来描述过去或者当前的某个眼科疾病诊断。虽然这个概貌和上述<code>临床其他观测类发现</code>是参考了同一个概貌(<code>Condition</code>资源和眼科键值对值集组合), 但是此处所用应为实际临床诊断，而上述仅仅为临床其他类观测。并且眼部解剖位置概貌<code>BodyStructureEye</code>概貌在此处需组合使用。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>Condition.code</td>
<td>1..1</td>
<td>CodeableConcept(Ophthalmology Condition ICD10 and SNOMED codes ValueSet)</td>
</tr>
<tr>
<td>Condition.bodySite</td>
<td>0..*</td>
<td>CodeableConcept(anatomical location)</td>
</tr>
<tr>
<td>Condition.bodySite.extension</td>
<td>0..*</td>
<td>Extension</td>
</tr>
<tr>
<td>Condition.bodySite.extension.value[x]</td>
<td>1..1</td>
<td><a href="BodyStructure%7Chttp://hl7.org/fhir/uv/eyecare/StructureDefinition/body-structure-eye">Reference</a></td>
</tr>
<tr>
<td>Condition.subject</td>
<td>1..1</td>
<td>Reference(Patient|Group)</td>
</tr>
</tbody></table>
<center>表五.眼科诊断概貌</center>

<h3 id="眼科干预程序"><a href="#眼科干预程序" class="headerlink" title="眼科干预程序"></a>眼科干预程序</h3><p><code>ProcedureBase</code>眼科基本的干预程序，搭配眼部解剖位置概貌组合使用。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>Procedure.code</td>
<td>1..1</td>
<td>CodeableConcept(<a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/ValueSet-procedures.html" >OphthalmologyProceduresValueSet <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
<tr>
<td>Procedure.bodySite</td>
<td>0..*</td>
<td>CodeableConcept(anatomical location)</td>
</tr>
<tr>
<td>Condition.bodySite.extension</td>
<td>0..*</td>
<td>Extension</td>
</tr>
<tr>
<td>Condition.bodySite.extension.value[x]</td>
<td>1..1</td>
<td><a href="BodyStructure%7Chttp://hl7.org/fhir/uv/eyecare/StructureDefinition/body-structure-eye">Reference</a></td>
</tr>
</tbody></table>
<center>表六.眼科干预程序概貌</center>

<h3 id="诊断检查报告"><a href="#诊断检查报告" class="headerlink" title="诊断检查报告"></a>诊断检查报告</h3><p><code>OphthalDiagnosticReport</code>定义了眼科诊断报告概貌。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>DiagnosticReport.category</td>
<td>1..*</td>
<td>CodeableConcept(service category)</td>
</tr>
<tr>
<td>DiagnosticReport.category.coding</td>
<td>1..1</td>
<td>Coding (ophthalCode)</td>
</tr>
<tr>
<td>DiagnosticReport.category.coding.system</td>
<td>1..1</td>
<td>uri(固定值：<a class="link"   href="http://snomed.info/sct" >http://snomed.info/sct <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
<tr>
<td>DiagnosticReport.category.coding.code</td>
<td>1..1</td>
<td>code(固定值：394594003)</td>
</tr>
</tbody></table>
<center>表七.眼科诊断报告概貌</center>

<h4 id="视野检查"><a href="#视野检查" class="headerlink" title="视野检查"></a>视野检查</h4><p><code>ObservationVisualField</code>视野检查概貌，此概貌可以单独用在视野检查观察。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>1..1</td>
<td>code(final or amended)</td>
</tr>
<tr>
<td>category</td>
<td>0..*</td>
<td>CodeableConcept(ObservationCategoryCodes)</td>
</tr>
<tr>
<td>code</td>
<td>1..1</td>
<td>CodeableConcept(LOINCCodes)</td>
</tr>
<tr>
<td>subject</td>
<td>1..1</td>
<td>Reference(Patient)</td>
</tr>
<tr>
<td>bodySite</td>
<td>0..1</td>
<td>CodeableConcept</td>
</tr>
<tr>
<td>bodySite.extension</td>
<td>0..*</td>
<td>Extension(bodySite)</td>
</tr>
<tr>
<td>bodySite.extension.value[x]</td>
<td>1..1</td>
<td>Reference(BodyStructure|Ocular anatomical location)</td>
</tr>
</tbody></table>
<center>表八.视野检查概貌</center>

<h4 id="视野诊断报告"><a href="#视野诊断报告" class="headerlink" title="视野诊断报告"></a>视野诊断报告</h4><p><code>OphthalDiagnosticReportForVisualField</code>视野检查报告概貌。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>DiagnosticReport.category</td>
<td>1..*</td>
<td>CodeableConcept(service category)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding</td>
<td>1..1</td>
<td>Coding(vfCode)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding.system</td>
<td>1..1</td>
<td>uri(固定值：<a class="link"   href="http://snomed.info/sct" >http://snomed.info/sct <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding.code</td>
<td>1..1</td>
<td>code(固定值：103752008)</td>
</tr>
<tr>
<td>DiagnosticReport.result</td>
<td>0..*</td>
<td>Reference(Observation | VF Observations)</td>
</tr>
</tbody></table>
<center>表九.视野检查报告概貌</center>

<h4 id="OCT黄斑检查"><a href="#OCT黄斑检查" class="headerlink" title="OCT黄斑检查"></a>OCT黄斑检查</h4><p><code>ObservationOCTMacula</code>, OCT黄斑检查概貌，一般和诊断报告一起使用。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>1..1</td>
<td>code(final or amended)</td>
</tr>
<tr>
<td>category</td>
<td>0..*</td>
<td>CodeableConcept(ObservationCategoryCodes)</td>
</tr>
<tr>
<td>code</td>
<td>1..1</td>
<td>CodeableConcept(LOINCCodes)</td>
</tr>
<tr>
<td>subject</td>
<td>1..1</td>
<td>Reference(Patient)</td>
</tr>
<tr>
<td>bodySite</td>
<td>0..1</td>
<td>CodeableConcept</td>
</tr>
<tr>
<td>bodySite.extension</td>
<td>0..*</td>
<td>Extension(bodySite)</td>
</tr>
<tr>
<td>bodySite.extension.value[x]</td>
<td>1..1</td>
<td>Reference(BodyStructure|Ocular anatomical location)</td>
</tr>
</tbody></table>
<center>表十.OCT黄斑检查概貌</center>

<h4 id="OCT黄斑诊断报告"><a href="#OCT黄斑诊断报告" class="headerlink" title="OCT黄斑诊断报告"></a>OCT黄斑诊断报告</h4><p><code>OphthalDiagnosticReportOCTMacula</code>, OCT黄斑诊断报告。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>DiagnosticReport.category</td>
<td>1..*</td>
<td>CodeableConcept(service category)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding</td>
<td>1..1</td>
<td>Coding(maculaCode)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding.system</td>
<td>1..1</td>
<td>uri(固定值：<a class="link"   href="http://loinc.org/" >http://loinc.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding.code</td>
<td>1..1</td>
<td>code(固定值：57119-0)</td>
</tr>
<tr>
<td>DiagnosticReport.result</td>
<td>0..*</td>
<td><a href="Observation%7Chttp://hl7.org/fhir/uv/eyecare/StructureDefinition/observation-oct-macula">Reference</a></td>
</tr>
</tbody></table>
<center>表十一.黄斑诊断报告概貌</center>

<h4 id="OCT-RNFL视网膜神经纤维层检查"><a href="#OCT-RNFL视网膜神经纤维层检查" class="headerlink" title="OCT RNFL视网膜神经纤维层检查"></a>OCT RNFL视网膜神经纤维层检查</h4><p><code>ObservationOCTRNFL</code>, OCT视网膜神经纤维层检查概貌，一般和诊断报告一起使用。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>1..1</td>
<td>code(final or amended)</td>
</tr>
<tr>
<td>category</td>
<td>0..*</td>
<td>CodeableConcept(ObservationCategoryCodes)</td>
</tr>
<tr>
<td>code</td>
<td>1..1</td>
<td>CodeableConcept(LOINCCodes)</td>
</tr>
<tr>
<td>subject</td>
<td>1..1</td>
<td>Reference(Patient)</td>
</tr>
<tr>
<td>bodySite</td>
<td>0..1</td>
<td>CodeableConcept</td>
</tr>
<tr>
<td>bodySite.extension</td>
<td>0..*</td>
<td>Extension(bodySite)</td>
</tr>
<tr>
<td>bodySite.extension.value[x]</td>
<td>1..1</td>
<td>Reference(BodyStructure|Ocular anatomical location)</td>
</tr>
</tbody></table>
<center>表十二.OCT RNFL检查概貌</center>

<h4 id="OCT黄斑诊断报告-1"><a href="#OCT黄斑诊断报告-1" class="headerlink" title="OCT黄斑诊断报告"></a>OCT黄斑诊断报告</h4><p><code>OphthalDiagnosticReportOCTRNFL</code>, OCT视网膜神经纤维层诊断报告。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Cardinality</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>DiagnosticReport.category</td>
<td>1..*</td>
<td>CodeableConcept(service category)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding</td>
<td>1..1</td>
<td>Coding(rnflCode)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding.system</td>
<td>1..1</td>
<td>uri(固定值：<a class="link"   href="http://loinc.org/" >http://loinc.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
<tr>
<td>DiagnosticReport.code.coding.code</td>
<td>1..1</td>
<td>code(固定值：86291-2)</td>
</tr>
<tr>
<td>DiagnosticReport.result</td>
<td>0..*</td>
<td>[Reference](Observation</td>
</tr>
</tbody></table>
<center>表十三.OCT RNFL诊断报告概貌</center>

<h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li><a class="link"   href="http://build.fhir.org/ig/HL7/fhir-eyecare-ig/profiles.html" >Eyes on FHIR Profiles <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>standard</category>
      </categories>
      <tags>
        <tag>FHIR, Standard,IG</tag>
      </tags>
  </entry>
  <entry>
    <title>业务架构与设计原则</title>
    <url>/2020/12/27/architecture-2020-12-08-bussiness-architecture/</url>
    <content><![CDATA[<h2 id="企业业务架构"><a href="#企业业务架构" class="headerlink" title="企业业务架构"></a>企业业务架构</h2><p>企业的业务架构定义了企业的结构，这个结构包含了企业的治理结构，业务流程，服务和产品，业务信息和利益相关者。业务架构为实现企业战略目标勾画出一个可行的、方向性的系统。所以简单地可以认为企业业务架构是一个组织工作的蓝图。通过使用组织架构，企业可以以较小的代价和时间来面对挑战和处理问题，这是因为我们已经知道业务中所有重要的依赖，关系和信息流。企业不管大小都应该有业务架构。 业务架构不一定需要全放面描述或者按照一定的标准创建。设计和描述组织的工作是复杂和困难的， 所以我们需要一些工具来帮助加速这一过程。</p>
<h3 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h3><ul>
<li><strong>Collection</strong> 常见设计原则 <a class="link"   href="https://principles.design/" >https://principles.design/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><strong>Archi</strong> 架构图工具 <a class="link"   href="https://www.archimatetool.com/" >https://www.archimatetool.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><strong>Causal Loop Diagram</strong> 流程图工具。 <a class="link"   href="https://nocomplexity.com/causalloopdiagram/" >https://nocomplexity.com/causalloopdiagram/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><strong>Camunda Modeler</strong> 用于编辑BPMN(Business Process Model and Notation)的桌面工具。<a class="link"   href="https://camunda.com/download/modeler/" >https://camunda.com/download/modeler/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><strong>Protege</strong> 用于规划拓扑图 <a class="link"   href="https://protege.stanford.edu/" >https://protege.stanford.edu/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><strong>DrawIO</strong> 是一个线上项目用于创建流程图。类似国内的有processon. <a class="link"   href="https://app.diagrams.net/" >https://app.diagrams.net/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="业务架构设计原则"><a href="#业务架构设计原则" class="headerlink" title="业务架构设计原则"></a>业务架构设计原则</h2><p>有一个清晰的业务原则对于成功的企业至关重要。有原则也是在限定的时间和资源下构建好的架构的基础，这些原则需要所有的利益相关者都参与和同意。</p>
<h3 id="一些常见的原则"><a href="#一些常见的原则" class="headerlink" title="一些常见的原则"></a>一些常见的原则</h3><h4 id="solution-space解决的空间"><a href="#solution-space解决的空间" class="headerlink" title="solution space解决的空间"></a>solution space解决的空间</h4><p><strong>原则：</strong>永不尝试使用技术的手段解决非技术的问题。<br><br><strong>原因：</strong>技术当然可以帮助解决一些问题， 但是技术永远不可能是完备的手段。任何非技术的活动，过程，行为改变等等都可能是解决问题的手段。<br><br><strong>言下之意：</strong>解决问题的时候不要仅仅盯着技术。</p>
<h4 id="start-simple简单先行"><a href="#start-simple简单先行" class="headerlink" title="start simple简单先行"></a>start simple简单先行</h4><p><strong>原则：</strong>简单先行 <br><br><strong>原因：</strong>简单开发一个产品其实是赢得对于构建下一步产品的权利。<br><br><strong>言下之意：</strong>当投入大量时间和金钱时，复杂性就会出现，简单的调整也会产生更大的影响。当产品变得成熟时，修复向后兼容性的问题将更加复杂。<br></p>
<h4 id="快速构建MVP（Minimal-Viable-Product"><a href="#快速构建MVP（Minimal-Viable-Product" class="headerlink" title="快速构建MVP（Minimal Viable Product)"></a>快速构建MVP（Minimal Viable Product)</h4><p><strong>原则：</strong>如果你的MVP需要一年的时间构建， 那么这不是MVP <br><br><strong>原因：</strong>最好MVP不要超过一个月构建。<br><br><strong>言下之意：</strong>MVP不是用来贩卖的，而是从后续的阶段中学习如何贩卖。<br></p>
<h4 id="make-it-easy-first-then-make-it-fast先简单做然后快速做"><a href="#make-it-easy-first-then-make-it-fast先简单做然后快速做" class="headerlink" title="make it easy first then make it fast先简单做然后快速做"></a>make it easy first then make it fast先简单做然后快速做</h4><p><strong>原则：</strong>先简单做， 然后快速做，最后做的漂亮. <br><br><strong>原因：</strong>开发新项目的成本是很高的，做一个优秀的产品更加复杂和昂贵。所以在做MVP的时候，尝试着让产品易用和易改。 <br><br><strong>言下之意：</strong>一些性能之类的问题可以后面再考虑。<br></p>
<h4 id="use-open-data-open-standards-open-source-and-open-innovation使用公开数据，公开标准，公开源代码，公开创意"><a href="#use-open-data-open-standards-open-source-and-open-innovation使用公开数据，公开标准，公开源代码，公开创意" class="headerlink" title="use open data, open standards, open source and open innovation使用公开数据，公开标准，公开源代码，公开创意"></a>use open data, open standards, open source and open innovation使用公开数据，公开标准，公开源代码，公开创意</h4><p> <strong>原则：</strong>use open data, open standards, open source and open innovation. <br><br> <strong>原因：</strong>这个原则提供了一个框架使用公开的方式去技术赋能开发。<br><br> <strong>言下之意：</strong> <br></p>
<ul>
<li>采用并扩展存在的公开标准</li>
<li>尽量以API的方式开放数据和功能， 越大的社区使用你的产品越好</li>
<li>把投资软件当做公益</li>
<li>尽可能的开源代码</li>
</ul>
<h4 id="Strategic-focus焦距策略"><a href="#Strategic-focus焦距策略" class="headerlink" title="Strategic focus焦距策略"></a>Strategic focus焦距策略</h4><p> <strong>原则：</strong>投资决策受业务需求驱动。<br><br> <strong>原因：</strong>一个业务领头和面向业务的架构在满足战术目标，不断改变的需求和客户期待上更可能成功。<br><br> <strong>言下之意：</strong>架构需要完全和整个公司的战略目标对齐。<br></p>
<h4 id="make-things-open保持分享"><a href="#make-things-open保持分享" class="headerlink" title="make things open保持分享"></a>make things open保持分享</h4><p> <strong>原则：</strong>make things open: it makes things better.<br><br> <strong>原因：</strong>尽可能地分享我们在做的东西。和同事， 和用户，和世界分享代码，分享设计，分享想法，分享创意，分享失败。越多的人关注你越可能你的产品可以成功。<br></p>
<h4 id="maximise-benefit-to-the-enterprise最大化企业的利益"><a href="#maximise-benefit-to-the-enterprise最大化企业的利益" class="headerlink" title="maximise benefit to the enterprise最大化企业的利益"></a>maximise benefit to the enterprise最大化企业的利益</h4><p> <strong>原则：</strong>信息管理的决定是为了最大化企业的利益。<br><br> <strong>原因：</strong>这个原则内嵌了“服务高于个人”的意思。从企业的角度做决定永远比从组织的角度出发对企业有更长远的价值。<br><br> <strong>言下之意：</strong>达到最大化企业的利益需要我们修正计划和管理信息的方式。技术不能完全解决这个改变。所以组织可能需要做一些牺牲来满足企业利益， 比如调整开发的优先级，改变一些喜欢的工具等等。<br></p>
<h4 id="Reliability可靠性"><a href="#Reliability可靠性" class="headerlink" title="Reliability可靠性"></a>Reliability可靠性</h4><p> <strong>原则：</strong>信息系统需要可靠，准确，及时。<br></p>
<h4 id="Reuse-and-Improve复用与提高"><a href="#Reuse-and-Improve复用与提高" class="headerlink" title="Reuse and Improve复用与提高"></a>Reuse and Improve复用与提高</h4><p> <strong>原则：</strong>复用与提高 <br><br> <strong>原因：</strong>避免资源浪费，只有在不满足需求的时候才升级原有的解决方案。<br><br> <strong>言下之意：</strong> <br></p>
<ul>
<li>尽可能使用、修改、扩展现有工具，平台和框架。</li>
<li>开发模块化的软件是提倡的方式。</li>
</ul>
<h4 id="Reuse-before-buy-buy-before-build"><a href="#Reuse-before-buy-buy-before-build" class="headerlink" title="Reuse before buy, buy before build"></a>Reuse before buy, buy before build</h4><p><strong>原则：</strong>尽可能复内部it资产，不满足的情况下才考虑买外部IP, 最后才是定制化构建新的产品。<br><br><strong>原因：</strong> <br></p>
<ul>
<li>购买标准的IT解决方案只要它们不是快要淘汰都比自定制化便宜， 并且享有后续维护。</li>
<li>定制化的产品后续的维护可能是否昂贵。<br><br><strong>言下之意：</strong> <br></li>
<li>为了保证IT资产能够尽可能复用，业务单元必须保证治理部门不认为业务实践与行业标准实践有重大的不一致。</li>
<li>有些商业化的软件是可以配置的，需要评估配置功能的复杂度是否和自己定制的复杂度相近。</li>
<li>license合规性也是需要考虑的。</li>
</ul>
<h4 id="User-Experience-Continuity"><a href="#User-Experience-Continuity" class="headerlink" title="User Experience Continuity"></a>User Experience Continuity</h4><p><strong>原则：</strong>我们交付的产品要尽可能保持体验的延续性。<br><br><strong>原因：</strong>用户不管在公司内部还是外部都会使用不同应用，有不同的使用体验, 我们不想让用户使用自己的产品有使用20年前产品的感觉。<br><br><strong>言下之意：</strong> <br></p>
<ul>
<li>主动关注身边发生的新技术和新方法。</li>
<li>保持好奇心，敢于尝试新鲜事物，积极听取他人意见或建议。</li>
<li>积极采用新颖的方式来处理问题及机会。</li>
<li>不断对现状提出问题，挑战传统的工作方法和思维方式。</li>
<li>敢于为制定新政策、采取新措施或尝试新方法承担可控风险。</li>
</ul>
<h4 id="Routine-Tasks-are-automated-where-appropriate-尽可能自动化日常活动"><a href="#Routine-Tasks-are-automated-where-appropriate-尽可能自动化日常活动" class="headerlink" title="Routine Tasks are automated where appropriate 尽可能自动化日常活动"></a>Routine Tasks are automated where appropriate 尽可能自动化日常活动</h4><p> <strong>原则：</strong>尽可能自动化日常活动 <br><br> <strong>原因：</strong>自动化节约人力，提高效率和有更高的容错。<br><br> <strong>言下之意：</strong> <br></p>
<ul>
<li>需要专业知识去分析可以自动化流程的过程。</li>
<li>不是日常的任务不需要自动化。</li>
<li>自动化流程可以是一个流程接着另一个流程， 业务单元需要集成到整个工作流当中。</li>
</ul>
<h4 id="Give-before-receiving"><a href="#Give-before-receiving" class="headerlink" title="Give before receiving"></a>Give before receiving</h4><p> <strong>原则：</strong>先于奉献 <br><br> <strong>原因：</strong>奉献是建立一段关系的真正方式。仅仅关注于从联系中可以得到什么是不能构建相互共赢和可持续关系的。<br><br> <strong>言下之意：</strong>维护和利益相关者的关系是十分必要的。<br></p>
<h4 id="Everyone-matters-in-Information-management-信息管理和所有人有关"><a href="#Everyone-matters-in-Information-management-信息管理和所有人有关" class="headerlink" title="Everyone matters in Information management 信息管理和所有人有关"></a>Everyone matters in Information management 信息管理和所有人有关</h4><p> <strong>原则：</strong>组织中所有参与信息管理决策的人都需要参与完成业务指标 <br><br> <strong>原因：</strong>信息系统的用户是关键利益相关者，是实际使用技术解决业务需求的人。为了保障信息系统和业务对齐，所有企业中的组织都需要参与到信息系统环境中的各方面。<br><br> <strong>言下之意：</strong>为了整体上作为一个团队，利益相关者需要接受开发信息系统环境的责任。保障必要的资源来完成这条原则。<br></p>
<h4 id="Be-Collaborative"><a href="#Be-Collaborative" class="headerlink" title="Be Collaborative"></a>Be Collaborative</h4><p> <strong>原则：</strong>相互协助 <br><br> <strong>原因：</strong>If you want to go fast, go alone. If you want to go far, go together.<br><br> <strong>言下之意：</strong> <br></p>
<ul>
<li>让各个不同领域的专家参与项目</li>
<li>跨部门合作</li>
<li>把好的工作经验，结果，进展记录下来，并且分享它们。</li>
</ul>
]]></content>
      <categories>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>企业架构师 vs 解决方案架构师 vs 技术架构师</title>
    <url>/2020/11/14/architecture-2020-11-15-%E4%BC%81%E4%B8%9A%E6%9E%B6%E6%9E%84%E4%B8%8E%E4%BC%81%E4%B8%9A%E6%9E%B6%E6%9E%84%E5%B8%88/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要简介一下企业架构师EA, 技术架构师TA, 解决方案架构师SA的区别, 同时探讨各自需要具备的能力和挑战.</p>
<h2 id="企业架构师-vs-技术架构师-vs-解决方案架构师"><a href="#企业架构师-vs-技术架构师-vs-解决方案架构师" class="headerlink" title="企业架构师 vs 技术架构师 vs 解决方案架构师"></a>企业架构师 vs 技术架构师 vs 解决方案架构师</h2><p>简单来说, 企业架构师从企业全局的角度出发发现和定义问题, 解决方案架构师把问题转化为一个解决方案, 技术架构师实现具体的解决方案.<br>网上有一张图描述了EA, TA, SA三者的区别:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2020-11/architects.png"
                     
                ></p>
<p>上图从软件的生命周期, 细节的涉及度, 关注的程度这三维来度量和区别三者.</p>
<p>**技术架构师Technical Architect(TA)**主要关注在某个技术实现.TA可能在企业中同时负责多个项目, 一般不会关注整个软件生命周期. TA需要有实际的编码能力, 为开发团队提供技术指导, 定义标准和最佳实际.TA的技术能力是考核他的一个关键指标, 所以大部分TA的技术栈比较专注,比如Java架构师, .NET架构师, IT基础架构师. 这些可以从上图的虚线可以看出.</p>
<p>**解决方案架构师Solutions Architect(SA)**一般被分配到企业中的某个项目中, 以确保项目在每个生命周期中保持技术完整性, 目标和方案的一致性. SA一般不写代码, 因为协调各个技术活动是他的主要工作. SA需要参与计划(initiative)的所有方面和活动: 从概念定义, 到需求分析, 到实现, 再到把系统交付到运营和业务单元. 所以SA一般是一个通才, 为所有这些活动做出明智的贡献。 当然, 大部分项目不需要单独配备一名SA, 因为如果技术栈唯一, 那么一般只需要TA就能够解决问题. 但是如果和技术相关的风险是巨大的,那么配备一名SA是明智的. 这种情况具体可以被分为: 不确定的需求, 未被验证的技术实现或存在多个技术实现, 外包项目给离场开发团队等. </p>
<p>**企业架构师Enterprise Architect(EA)**负责整个企业。她严格地描述企业的业务实体，它们的属性以及它们与外部环境之间的关系(竞争对手)。EA关心整个生命周期，以及每一项已采用或预期采用的实施技术。同样，她也研究各个项目，以确保整个企业具有完整性和一致性。但是，EA可能需要考虑的详细程度还很低而且很肤浅，因此她必须将除策略级别的决策之外的所有决策委派给特定工作的专家。EA的一个特例是企业IT架构师（EITA），他关注企业内部信息和技术的整体观点。但是，上面提到的有关EA角色的所有内容也适用于EITA角色。请注意，该框架未能在EA和EITA之间做出明显的区分。添加第四维会有所帮助，但是该图将变得混乱。</p>
<h2 id="SA的角色与职责"><a href="#SA的角色与职责" class="headerlink" title="SA的角色与职责"></a>SA的角色与职责</h2><p>由于TA, SA, EA的职责不同, 这里主要挑一下介于中间的SA的角色责任.</p>
<h3 id="技术领导"><a href="#技术领导" class="headerlink" title="技术领导"></a>技术领导</h3><p>SA需要时一名技术领导, 他需要在如下方面担任职责:</p>
<ul>
<li>架构设计</li>
<li>开发支持</li>
<li>监督与指导</li>
<li>技术开荒</li>
<li>需求管理</li>
</ul>
<h3 id="技术顾问"><a href="#技术顾问" class="headerlink" title="技术顾问"></a>技术顾问</h3><p>在业务层面, SA还需要作为技术顾问支持不同的业务单元:</p>
<ul>
<li>管理stakeholders</li>
<li>参与售前</li>
<li>参与架构评估</li>
<li>面试候选人</li>
<li>参与新架构发现</li>
<li>提供高阶成本估算</li>
<li>诊断测试阶段的问题</li>
</ul>
<h3 id="业务分析-x2F-产品Owner"><a href="#业务分析-x2F-产品Owner" class="headerlink" title="业务分析&#x2F;产品Owner"></a>业务分析&#x2F;产品Owner</h3><p>SA还需要担任一部分BA的工作, 根据领域不同, 可能还需要一些行业知识:</p>
<ul>
<li>行业市场的知识, 如竞争对手, 法务法规的知识</li>
<li>产品知识, 有产品和解决方案路线图, 懂产品策略</li>
<li>懂用户</li>
<li>backlog管理</li>
<li>给BA或PO提供其他建议</li>
</ul>
<h3 id="部分开发职责"><a href="#部分开发职责" class="headerlink" title="部分开发职责"></a>部分开发职责</h3><p>SA的开发属性主要是为了做POC和code review.</p>
<h2 id="SA所需技能"><a href="#SA所需技能" class="headerlink" title="SA所需技能"></a>SA所需技能</h2><p>SA所需要的技能比较全面和高标准, 对个人的综合素质有较高的要求.</p>
<h3 id="展示能力"><a href="#展示能力" class="headerlink" title="展示能力"></a>展示能力</h3><ul>
<li>公共演讲能力</li>
<li>白板技能</li>
</ul>
<h3 id="沟通能力"><a href="#沟通能力" class="headerlink" title="沟通能力"></a>沟通能力</h3><ul>
<li>stakeholder管理</li>
<li>解释能力</li>
<li>协商能力</li>
<li>冲突管理</li>
<li>社交</li>
</ul>
<h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><ul>
<li>优先级管理</li>
<li>时间管理</li>
</ul>
<h3 id="思维能力"><a href="#思维能力" class="headerlink" title="思维能力"></a>思维能力</h3><ul>
<li>抽象思维</li>
<li>战术与策略</li>
<li>做决定</li>
<li>评判思维</li>
<li>抗压能力</li>
</ul>
<h3 id="自我开发"><a href="#自我开发" class="headerlink" title="自我开发"></a>自我开发</h3><ul>
<li>持续学习</li>
<li>自律</li>
<li>个人成长计划</li>
<li>快速学习能力</li>
</ul>
<h3 id="关系管理"><a href="#关系管理" class="headerlink" title="关系管理"></a>关系管理</h3><ul>
<li>同理心</li>
<li>情商</li>
</ul>
<h3 id="编码能力"><a href="#编码能力" class="headerlink" title="编码能力"></a>编码能力</h3><ul>
<li>POC</li>
<li>熟悉各个技术栈</li>
</ul>
<h3 id="分析与设计"><a href="#分析与设计" class="headerlink" title="分析与设计"></a>分析与设计</h3><ul>
<li>能用不同设计解决不同的问题</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2020-12/samm.png"
                     
                ></p>
]]></content>
      <categories>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>数据中台的价值</title>
    <url>/2021/01/01/architecture-2021-01-02-%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E7%9A%84%E4%BB%B7%E5%80%BC/</url>
    <content><![CDATA[<h3 id="企业为什么需要数据中台"><a href="#企业为什么需要数据中台" class="headerlink" title="企业为什么需要数据中台?"></a>企业为什么需要数据中台?</h3><ul>
<li>与业务更加紧密</li>
<li>提供数据服务</li>
<li>提供业务价值</li>
<li>快速开发数据服务</li>
<li>围绕业务场景</li>
<li>提供统一数据</li>
<li>赋能业务更智能</li>
<li>构建统一数据资产</li>
<li>打通数据孤岛</li>
</ul>
<h3 id="数据仓库-数据湖-数据中台的区别"><a href="#数据仓库-数据湖-数据中台的区别" class="headerlink" title="数据仓库, 数据湖, 数据中台的区别"></a>数据仓库, 数据湖, 数据中台的区别</h3><p>从不同使用对象的角度, 我们可以认为三种有本质的区别, 数据仓库+商业智能能够给决策者提供智能报表, 以协助决策者做出决策. 数据湖或者数据平台是以数据作为服务, 对数据分析师或者其他开发者提供数据集服务, 而数据中台则是直接面对业务, 提供的服务希望能够更加贴近业务, 提供数据产品, 一般以API的形式提供服务.</p>
<p>从提供服务的出发点角度, 数据中台以业务需要什么服务为出发点, 而数据湖则是提供我有什么数据.</p>
<p>从不同度量来衡量各个服务的不同, 数据中台关注于用户对数据服务的满意度, 而数据平台关注于数据的质量.</p>
<h3 id="客观事实-市场的变化远远快于数据的采集速度"><a href="#客观事实-市场的变化远远快于数据的采集速度" class="headerlink" title="客观事实: 市场的变化远远快于数据的采集速度"></a>客观事实: 市场的变化远远快于数据的采集速度</h3><h3 id="业务数据化-gt-数据业务化"><a href="#业务数据化-gt-数据业务化" class="headerlink" title="业务数据化-&gt;数据业务化"></a>业务数据化-&gt;数据业务化</h3><h3 id="组织架构的调整"><a href="#组织架构的调整" class="headerlink" title="组织架构的调整"></a>组织架构的调整</h3><p>中台架构的提出对企业的组织架构产生了巨大的影响，有了与中台相适应的组织架构，企业才能很好地完成中台建设并从中受益。中台架构有一很鲜明的特点，那就是它彻底破除了应用系统的边界，从企业的全业务领域着手，切分出业务中心，每一个业务中心所支撑的不是一个孤立的应用系统，而是企业在该领域的全部核心业务，所以每一个业务中心都需要非常专业的团队来负责，团队必须对这部分业务非常了解，而且必须站在企业的全局去支撑和把控这一业务领域。</p>
]]></content>
      <categories>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>微软的软件架构设计原则</title>
    <url>/2021/03/19/architecture-2021-03-20-%E5%BE%AE%E8%BD%AF%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="构架原则"><a href="#构架原则" class="headerlink" title="构架原则"></a>构架原则</h2><p>微软官网有一个篇短文专门讲解Web架构设计原则<a class="link"   href="https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles#dependency-inversion" >site <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. 且把它翻译一下, 品位下.</p>
<h2 id="常见的设计原则"><a href="#常见的设计原则" class="headerlink" title="常见的设计原则"></a>常见的设计原则</h2><h3 id="Separation-of-Concerns"><a href="#Separation-of-Concerns" class="headerlink" title="Separation of Concerns"></a>Separation of Concerns</h3><p><code>Separation of Concerns</code>字面翻译是关注点的分离, 其实很多情况下, 我们的架构设计都遵循这个原则. 这个原则指出软件应该根据工作类型的不同被分离. 这个原则是<code>Edsger W. Dijkstra</code>在论文<code>On the role of scientific thought</code>提出的. 原则上将一个计算机程序分割成不同模块的程序, 分割一个程序的不同关注点,一个模块只关心一个点. 同时业务行为设计也要和基础架构, UI展示层分离. 这样业务逻辑的分离可以保证业务可以被单独测试和进化, 而不是和其他实现紧密耦合. </p>
<h3 id="Encapsulation-封装"><a href="#Encapsulation-封装" class="headerlink" title="Encapsulation 封装"></a>Encapsulation 封装</h3><p>应用的不同部分需要使用封装来隔离, 而通过外部接口保持直接的协作不受内部实现的改变的影响.</p>
<h3 id="Dependency-inversion-依赖反转"><a href="#Dependency-inversion-依赖反转" class="headerlink" title="Dependency inversion 依赖反转"></a>Dependency inversion 依赖反转</h3><ul>
<li>高层次的模块不要依赖于低层次的模块，都应该依赖于抽象(接口)。</li>
<li>抽象(接口)不应该依赖于具体，而具体要依赖于抽象。<br><br>普通类依赖关系是直接依赖, 如下图:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/screen_shot_2021_03_19.png"
                     
                ><br>
但是为了系统松耦合, 可测试, 模块化和可维护, 使用依赖反转原则将类的依赖反转, 使原本依赖类B的类A依赖自己控制的接口A, 而类B也依赖接口A. 这样就实现了依赖反转. 下图比微软官网更加清晰:
![](/images/screenshots/screen_shot_2021-03-19.png)
这样的实现, 虽然在代码实现时需要多余的实现, 但是在运行时它的依赖关系并没有改变. 依赖反转原则也为依赖注入提供了可能.</li>
</ul>
<h3 id="Explicit-dependencies-显式依赖"><a href="#Explicit-dependencies-显式依赖" class="headerlink" title="Explicit dependencies 显式依赖"></a>Explicit dependencies 显式依赖</h3><p>这条原则也很明显</p>
<h3 id="Single-responsibility-单一责任"><a href="#Single-responsibility-单一责任" class="headerlink" title="Single responsibility 单一责任"></a>Single responsibility 单一责任</h3><p>单一责任是针对面向对象设计, 对象只有一个责任, 也只有一个理由做改变. 也就是说只有当对象的责任发生改变时, 对象的才能被改变. 有了这个原则, 当一些行为需要新的实现时, 就应是写新的类, 而不是在原有的类上增加代码. 采用这个原则, 我们的应用也可以往微服务的方向发展.</p>
<h3 id="Don’t-repeat-youself-DRY"><a href="#Don’t-repeat-youself-DRY" class="headerlink" title="Don’t repeat youself (DRY)"></a>Don’t repeat youself (DRY)</h3><p>“干”的原则时很常见. 保持只有一个<code>true source</code>很重要.</p>
<h3 id="Persistence-ignorance-持久化无关"><a href="#Persistence-ignorance-持久化无关" class="headerlink" title="Persistence ignorance 持久化无关"></a>Persistence ignorance 持久化无关</h3><p>代码和持久化技术无关.</p>
<h3 id="Bounded-contexts"><a href="#Bounded-contexts" class="headerlink" title="Bounded contexts"></a>Bounded contexts</h3><p>有界上下文是领域驱动设计的核心模式.  它们可以将大型应用程序或组织分解为独立的概念模块，通过这种方式来解决复杂性问题。 每个概念模块表示各自独立的上下文（因此有界），并且可以独立改进。 理想情况下，每个有界上下文都应该能够为其中的概念自由选择它自己的名称，并对其自己的持久性存储具有独占访问权限。</p>
]]></content>
      <categories>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop MapReduce 实现</title>
    <url>/2018/10/12/bigdata-2018-10-13-hadoop-mapreduce-%E5%AE%9E%E7%8E%B0-md/</url>
    <content><![CDATA[<p>虽然Hadoop现在有一点过时, 但是一般的金融公司还是会用它出隔日的报表(离线计算), 本文主要关注其<code>Map Reduce</code>的实现.</p>
<h3 id="函数编程"><a href="#函数编程" class="headerlink" title="函数编程"></a>函数编程</h3><p><code>Map/Reduce</code>的思想借鉴于函数式编程. <code>Map</code>是进行过滤和排序, 比如把一组学生按名字排序到队列, 一个名字一个队列, 然后<code>Reduce</code>方法进行总结, 比如对队列里的名字做统计, 得出名字出现频率. 这种思想是<code>split-apply-combine</code>的一种特例(见<a class="link"   href="https://www.kopei.top/2018/08/31/pandas/" >pandas groupby <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>).</p>
<p>我们知道多线程编程的局限在于访问共享资源的竞争问题, 一般需要锁, 信号量(semaphore)等技术去协调, 不然死锁等问题将会出现.</p>
<p>但是我们可以完全换个思路, 比如消除需要访问共享资源的限制, 这样我们就不需要锁之类的技术了.这也是函数计算的一个基本概念. <strong>数据通过函数的参数传递</strong>, 同一时间只有一个激活的函数运行,这样就避免了冲突.</p>
<p>可以把函数连接作有向无环图<code>Direct Acylic Graph</code>, 由于函数没有隐藏的依赖, 这样多个DAG就可以并行运行.</p>
<h3 id="Map-x2F-Reduce函数"><a href="#Map-x2F-Reduce函数" class="headerlink" title="Map&#x2F;Reduce函数"></a>Map&#x2F;Reduce函数</h3><p><code>Map/Reduce</code>是一种特殊(简单)的DAG. 图如下所示: 每个<code>map</code>函数把一组数据按key分为<code>key/value</code>对, 然后不同<code>key</code>的元素跑到不同的计算节点, 在那里进行<code>reduce</code>合并.</p>
<blockquote class="imgur-embed-pub" lang="en" data-id="YrZrBZN"><a href="//imgur.com/YrZrBZN"></a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">map(input_records) &#123;</span><br><span class="line">emit(k1, v1)</span><br><span class="line">...</span><br><span class="line">emit(k2, v2)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">reduce(key, values) &#123;</span><br><span class="line">aggregate = initialize()</span><br><span class="line">while (values.has_next)&#123;</span><br><span class="line">    aggregate = merge(values.next)</span><br><span class="line">&#125;</span><br><span class="line">collect(key, aggregate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
可以有多个`map/reduce`组合替代一个并行的算法:
![https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-14%20%E4%B8%8B%E5%8D%884.25.43.png](https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-14%20%E4%B8%8B%E5%8D%884.25.43.png)

<h3 id="分布式文件系统-HDFS"><a href="#分布式文件系统-HDFS" class="headerlink" title="分布式文件系统(HDFS)"></a>分布式文件系统(HDFS)</h3><p>Hadoop需要分布式文件系统, 用于处理大文件的顺序读写.每一个大文件会被分割成块, 存储在不同数据节点.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-14%20%E4%B8%8B%E5%8D%884.28.11.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-14%20%E4%B8%8B%E5%8D%884.28.11.png"><br>主节点<code>NameNode</code>会记录所有文件的目录结构和各个块所在的位置. 主节点作为中心控制点一般会有<code>hot standby</code>的复制.</p>
<p>想要读取文件, 客户端会计算所需块在文件的偏移位置, 得出块的索引, 然后对<code>NameNode</code>做出请求, 然后<code>NameNode</code>会返回哪个<code>DataNode</code>有数据, 客户端就会直接和<code>DataNode</code>联系.</p>
<p>想要写入一个文件, 客户端会先和<code>NameNode</code>通信, 作为响应, <code>NameNode</code>会告诉客户端现在有哪些<code>DataNode</code>并且谁是主节点和哪些是从复制. 然后客户端就会把文件上传到所有<code>DataNode</code>, 不过<code>DataNode</code>这时还只会存储在buffer, 等到所有节点都存完缓存, 客户端发起<code>commit</code>给主节点, 主节点就会提交更新, 同时通知从节点更新, 等到所有从节点都<code>commit</code>, 主节点就会返回客户端提交成功. (所以DFS写是强一致性) 最后客户端还需告诉<code>NameNode</code>所有更新信息. 包括块分布的位置和元信息都会写入<code>NameNode</code>的操作日志<code>operation log</code>. 这个日志十分重要, 可以用于灾后恢复. <code>NameNode</code>也会通过不间断地<code>checkpoint</code>维护它的持久化状态.</p>
<p>当<code>NameNode</code>挂了, 所有的写操作将会失效, 读操作可能不受影响, 只要在客户端与<code>DataNode</code>的句柄有效. 需要恢复<code>NameNode</code>, 从节点会从上一次的<code>checkpoint</code>状态恢复, 并做操作日志回放.</p>
<p>当一个<code>DataNode</code>挂了, <code>NameNode</code>会从心跳中检查到, <code>NameNode</code>就会把它从集群中移除, 然后把它存储的chunk在其他节点写入. 这样做才能维护hadoop所需的<code>replication factor</code>.</p>
<p>如果这个挂掉的<code>DataNode</code>后来恢复了, 那么将会重新加入集群, 它会给<code>NameNode</code>报告所有它有的块, 每一个块是有版本号的, 所以<code>NameNode</code>可以检查是否这个<code>DataNode</code>数据是否已经过时, 如果是那么这个节点将会被后续回收.</p>
]]></content>
      <categories>
        <category>big data</category>
      </categories>
      <tags>
        <tag>big data</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark RDD转成Dataset的两种方式</title>
    <url>/2020/07/10/bigdata-2020-07-11-create-dataframe-from-rdd-in-spark/</url>
    <content><![CDATA[<h2 id="RDD-to-Datasets"><a href="#RDD-to-Datasets" class="headerlink" title="RDD to Datasets"></a>RDD to Datasets</h2><p><code>Spark SQL</code>支持两种方式把RDD转为Datasets. 第一种是使用反射<code>reflection</code>取得到RDD的schema, 这种方式需要预先知道数据的结构。如果是scala的接口，RDD包含<code>case class</code>(定义了表的结构)可以自动转化RDD到dataframe。<br>第二种方式是通过可编程接口对运行时的RDD进行构建datasets的schema， 这种方法更加动态。当<code>case classes</code>没有预先定义（比如，记录的结构被编码成了字符串）,一个DataFrame可以通过如下三步创建：</p>
<ul>
<li>从原RDD创建一个新的RDD Rows;</li>
<li>通过创建<code>StructType</code>来代表结构和第一步的Rows对应上去.</li>
<li>通过<code>SparkSession.createDataFrame</code>方法把结构应用到Rows上.</li>
</ul>
]]></content>
      <categories>
        <category>big data</category>
      </categories>
      <tags>
        <tag>big data</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas UDF and Function Api in Spark</title>
    <url>/2020/07/22/bigdata-2020-07-23-pyspark-for-pandas/</url>
    <content><![CDATA[<h2 id="Apache-Arrow-in-PySpark"><a href="#Apache-Arrow-in-PySpark" class="headerlink" title="Apache Arrow in PySpark"></a>Apache Arrow in PySpark</h2><p>Spark可以使用<code>Apache Arrow</code>对python和jvm之间的数据进行传输， 这样会比默认传输方式更加高效。<br>为了能高效地利用特性和保障兼容性，使用的时候可能需要一点点修改或者配置。</p>
<h2 id="为什么使用Arrow作为数据交换中介能够提升性能？"><a href="#为什么使用Arrow作为数据交换中介能够提升性能？" class="headerlink" title="为什么使用Arrow作为数据交换中介能够提升性能？"></a>为什么使用Arrow作为数据交换中介能够提升性能？</h2><p>普通的python udf需要经过如下步骤来和jvm交互：</p>
<ul>
<li>jvm中一条数据序列化</li>
<li>序列化的数据发送到python进程</li>
<li>记录被python反序列化</li>
<li>记录被python处理</li>
<li>结果被python序列化</li>
<li>结果被发送到jvm</li>
<li>jvm反序列化并存储结果到dataframe</li>
</ul>
<p>所以python udf会比java和scala原生的udf慢。<br>但是使用pandas udf可以克服数据传输中需要的序列化问题，关键是使用了Arrow. spark使用arrow把JVM中的Dataframe转为可共享的buffer, 然后python也可以把这块共享buffer作为pandas的dataframe, 所以python可以直接在共享内存上操作。<br>以上，我们总结一下，使用arrow主要有两个好处：</p>
<ol>
<li>因为直接使用了共享内存，不在需要python和jvm序列化和反序列化数据。</li>
<li>pandas有很多使用c实现的方法， 可以直接使用。</li>
</ol>
<h2 id="Spark-DataFrame和Pandas-DataFrame的转化"><a href="#Spark-DataFrame和Pandas-DataFrame的转化" class="headerlink" title="Spark DataFrame和Pandas DataFrame的转化"></a>Spark DataFrame和Pandas DataFrame的转化</h2><p>首先需要配置spark, 设置<code>spark.sql.execution.arrow.pyspark.enabled</code>, 默认这个选项是不打开的。<br>还可以开启<code>spark.sql.execution.arrow.pyspark.fallback.enabled</code>来避免如果没有安装<code>Arrow</code>或者其它相关错误。<br>Spark可以使用<code>toPandas()</code>方法转化为Pandas DataFrame; 而使用<code>createDataFrame(pandas_df)</code>把Pandas DataFrame转为Spark DataFrame.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">spark.conf.set(&#x27;spark.sql.execution.arrow.pyspark.enabled&#x27;, &#x27;true&#x27;)</span><br><span class="line"></span><br><span class="line">pdf = pd.DataFrame(np.random.rand(100,3))</span><br><span class="line"></span><br><span class="line">df = spark.createDataFrame(pdf)</span><br><span class="line"></span><br><span class="line"># 使用arrow把spark df转化为pandas df</span><br><span class="line">result_pdf = df.select(&quot;*&quot;).toPandas()</span><br></pre></td></tr></table></figure></div>

<h2 id="Pandas-UDF-矢量UDF"><a href="#Pandas-UDF-矢量UDF" class="headerlink" title="Pandas UDF(矢量UDF)"></a>Pandas UDF(矢量UDF)</h2><p><code>Pandas UDF</code>是用户定义的函数， Spark是用arrow传输数据并用pandas来运行<code>pandas UDF</code>， <code>pandas UDF</code>使用向量计算，相比于旧版本的<code>row-at-a-time</code>python udf, 最多增加100倍的性能. 使用<code>pandas_udf</code>修饰器装饰函数，就可以定义一个<code>pandas UDF</code>.对spark来说，UDF就是一个普通的pyspark函数。<br>从spark3.0开始， 推荐使用python类型(<code>type hint</code>)来定义pandas udf.<br>定义类型的时候，<code>StructType</code>需要使用<code>pandas.DataFrame</code>类型， 其他一律使用<code>pandas.Series</code>类型。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from pyspark.sql.functions import pandas_udf</span><br><span class="line"></span><br><span class="line">@pandas_udf(&quot;col1 string, col2 long&quot;)</span><br><span class="line">def func(s1: pd.Series, s2: pd.Series, s3: pd.DataFrame) -&gt; pd.DataFrame:</span><br><span class="line">  s3[&#x27;col2&#x27;] = s1+s2.str.len()</span><br><span class="line">  s3[&#x27;col1&#x27;] = &#x27;sss&#x27;</span><br><span class="line">  return s3</span><br><span class="line">  </span><br><span class="line">df = spark.createDataFrame(</span><br><span class="line">      [[1, &quot;a string&quot;, (&quot;a nested string&quot;,)]],</span><br><span class="line">      &quot;long_col long, string_col string, struct_col struct&lt;col1:string&gt;&quot;)</span><br><span class="line">      </span><br><span class="line">df.printSchema()</span><br><span class="line"></span><br><span class="line">df.select(func(&quot;long_col&quot;, &quot;string_col&quot;, &quot;struct_col&quot;)).printSchema()</span><br><span class="line"></span><br><span class="line">df.select(func(&quot;long_col&quot;, &quot;string_col&quot;, &quot;struct_col&quot;)).show()     </span><br><span class="line">+--------------------------------------+</span><br><span class="line">|func(long_col, string_col, struct_col)|</span><br><span class="line">+--------------------------------------+</span><br><span class="line">|                              [sss, 9]|</span><br><span class="line">+--------------------------------------+</span><br></pre></td></tr></table></figure></div>

<h3 id="Series-to-Series-类型的UDF"><a href="#Series-to-Series-类型的UDF" class="headerlink" title="Series to Series 类型的UDF"></a>Series to Series 类型的UDF</h3><p>当类型提示可以被表达为<code>pandas.Series -&gt; pandas.Series</code>时，称为<code>Series to Series</code>UDF<br>这种类型的<code>pandas UDF</code>的输入和输出必须要有相同的长度， PySpark会把数据按列分成多个batch, 然后对每个batch运行<code>pandas UDF</code>, 然后组合各自的结果。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pandas as pd</span><br><span class="line">&gt;&gt;&gt; from pyspark.sql.functions import col, pandas_udf</span><br><span class="line">&gt;&gt;&gt; from pyspark.sql.types import LongType</span><br><span class="line">&gt;&gt;&gt; def multiply_func(a: pd.Series, b:pd.Series) -&gt; pd.Series:</span><br><span class="line">...     return a*b</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; multiply = pandas_udf(multiply_func, returnType=LongType())</span><br><span class="line">&gt;&gt;&gt; x = pd.Series([1,3,4,5])</span><br><span class="line">&gt;&gt;&gt; df = spark.createDataFrame(pd.DataFrame(x, columns=[&#x27;x&#x27;]))</span><br><span class="line">&gt;&gt;&gt; df.select(multiply(col(&#x27;x&#x27;),col(&#x27;x&#x27;))).show()</span><br><span class="line">+-------------------+</span><br><span class="line">|multiply_func(x, x)|</span><br><span class="line">+-------------------+</span><br><span class="line">|                  1|</span><br><span class="line">|                  9|</span><br><span class="line">|                 16|</span><br><span class="line">|                 25|</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure></div>

<h3 id="Series迭代器-gt-Series迭代器-类型的UDF"><a href="#Series迭代器-gt-Series迭代器-类型的UDF" class="headerlink" title="Series迭代器 -&gt; Series迭代器 类型的UDF"></a>Series迭代器 -&gt; Series迭代器 类型的UDF</h3><p>当类型提示可以被表达为<code>Iterator[pandas.Series] -&gt; Iterator[pandas.Series]</code>时，称为<code>Iterator[Series] to Iterator[Series]</code>UDF.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from typing import Iterator</span><br><span class="line">import pandas as pd</span><br><span class="line">from pyspark.sql.functions import pandas_udf</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pdf = pd.DataFrame([1,2,3], columns=[&#x27;x&#x27;])</span><br><span class="line">&gt;&gt;&gt; df = spark.createDataFrame(pdf)</span><br><span class="line">&gt;&gt;&gt; df</span><br><span class="line">DataFrame[x: bigint]</span><br><span class="line">&gt;&gt;&gt; @pandas_udf(&#x27;long&#x27;)</span><br><span class="line">... def plus_one(iterator: Iterator[pd.Series]) -&gt; Iterator[pd.Series]:</span><br><span class="line">...     for x in iterator:</span><br><span class="line">...             yield x+1</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; df.select(plus_one(&#x27;x&#x27;)).show()</span><br><span class="line">+-----------+</span><br><span class="line">|plus_one(x)|</span><br><span class="line">+-----------+</span><br><span class="line">|          2|</span><br><span class="line">|          3|</span><br><span class="line">|          4|</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure></div>

<h3 id="多个Series迭代器-gt-Series迭代器-类型的UDF"><a href="#多个Series迭代器-gt-Series迭代器-类型的UDF" class="headerlink" title="多个Series迭代器 -&gt; Series迭代器 类型的UDF"></a>多个Series迭代器 -&gt; Series迭代器 类型的UDF</h3><p>当类型提示可以被表达为<code>Iterator[Tuple[pandas.Series,...]] -&gt; Iterator[pandas.Series]</code>时，称为<code>Iterator[Tuple[pandas.Series,...]] to Iterator[Series]</code>UDF.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from typing import Iterator, Tuple</span><br><span class="line">&gt;&gt;&gt; @pandas_udf(&#x27;long&#x27;)</span><br><span class="line">... def multiply_two_cols(</span><br><span class="line">...     iterator: Iterator[Tuple[pd.Series, pd.Series]]) -&gt; Iterator[pd.Series]:</span><br><span class="line">...     for a,b in iterator:</span><br><span class="line">...             yield a*b</span><br><span class="line">... </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; df.select(multiply_two_cols(&#x27;x&#x27;,&#x27;x&#x27;)).show()</span><br><span class="line">+-----------------------+</span><br><span class="line">|multiply_tow_cols(x, x)|</span><br><span class="line">+-----------------------+</span><br><span class="line">|                      1|</span><br><span class="line">|                      4|</span><br><span class="line">|                      9|</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure></div>

<h3 id="Series-gt-Scalar-类型的UDF"><a href="#Series-gt-Scalar-类型的UDF" class="headerlink" title="Series -&gt; Scalar 类型的UDF"></a>Series -&gt; Scalar 类型的UDF</h3><p>当类型提示可以被表达为<code>pandas.Series -&gt; Scalar</code>时，称为<code>Series to Scalar</code>UDF.<br>Scalar具体的类型必须是原生python类型如int, float等等， 或者是numpy的数据类型如numpy.int64, numpy.float64<br>这种UDF可以被用于<code>groupBy(), agg(), pyspark.sql.Window</code>.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from pyspark.sql import Window</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; df = spark.createDataFrame([(1,1.0), (1,2.0),(2,3.0),(2,4.0),(2,10.0)], (&#x27;id&#x27;,&#x27;v&#x27;))</span><br><span class="line">&gt;&gt;&gt; df</span><br><span class="line">DataFrame[id: bigint, v: double]</span><br><span class="line">&gt;&gt;&gt; @pandas_udf(&#x27;double&#x27;)</span><br><span class="line">... def mean_udf(v: pd.Series) -&gt; float:</span><br><span class="line">...     return v.mean()</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; df.select(mean_udf(&#x27;v&#x27;)).show()</span><br><span class="line">+-----------+</span><br><span class="line">|mean_udf(v)|</span><br><span class="line">+-----------+</span><br><span class="line">|        4.0|</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; df.groupby(&#x27;id&#x27;).agg(mean_udf(&#x27;v&#x27;)).show()</span><br><span class="line">+---+-----------------+</span><br><span class="line">| id|      mean_udf(v)|</span><br><span class="line">+---+-----------------+</span><br><span class="line">|  1|              1.5|</span><br><span class="line">|  2|5.666666666666667|</span><br><span class="line">+---+-----------------+</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; df</span><br><span class="line">DataFrame[id: bigint, v: double]</span><br><span class="line">&gt;&gt;&gt; df.show()</span><br><span class="line">+---+----+</span><br><span class="line">| id|   v|</span><br><span class="line">+---+----+</span><br><span class="line">|  1| 1.0|</span><br><span class="line">|  1| 2.0|</span><br><span class="line">|  2| 3.0|</span><br><span class="line">|  2| 4.0|</span><br><span class="line">|  2|10.0|</span><br><span class="line">+---+----+</span><br><span class="line">&gt;&gt;&gt; w = Window.partitionBy(&#x27;id&#x27;).rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)</span><br><span class="line">&gt;&gt;&gt; df.withColumn(&#x27;mean_v&#x27;, mean_udf(&#x27;v&#x27;).over(w)).show()</span><br><span class="line">+---+----+-----------------+                                                    </span><br><span class="line">| id|   v|           mean_v|</span><br><span class="line">+---+----+-----------------+</span><br><span class="line">|  1| 1.0|              1.5|</span><br><span class="line">|  1| 2.0|              1.5|</span><br><span class="line">|  2| 3.0|5.666666666666667|</span><br><span class="line">|  2| 4.0|5.666666666666667|</span><br><span class="line">|  2|10.0|5.666666666666667|</span><br><span class="line">+---+----+-----------------+</span><br></pre></td></tr></table></figure></div>

<h2 id="Spark的Pandas函数API"><a href="#Spark的Pandas函数API" class="headerlink" title="Spark的Pandas函数API"></a>Spark的Pandas函数API</h2><p>Spark有一些函数可以让python的函数通过pandas实例直接用在spark dataframe上。内部机制上类似<code>pandas udf</code>, jvm把数据转成arrow的buffer, 然后pandas可以直接在buffer上操作。但是区别是，这些函数api使用起来就像普通pyspark api一样是作用在dataframe上的, 而不像udf那样作用于一个<code>column</code>. 实际使用的时候，一般是<code>DataFrame.groupby().applyInPandas()</code>或者<code>DataFrame.groupby().mapInPandas()</code></p>
<h3 id="Grouped-Map-api"><a href="#Grouped-Map-api" class="headerlink" title="Grouped Map api"></a>Grouped Map api</h3><p>Spark的dataframe在<code>groupby</code>后使用普通的pandas函数， 如<code>df.groupby().applyInPandas(func, schema))</code>， 普通的pandas函数需要输入是pandas dataframe, 返回普通的pandas dataframe. 上面这写法会把每个分组group映射到pandas dataframe.<br><code>df.groupby().applyInPandas(func, schema))</code>过程其实分为三步， 典型的<code>split-apply-combine</code>模式：</p>
<ul>
<li><code>DataFrame.groupBy</code>分组数据</li>
<li>分组的数据映射到pandas dataframe后，apply到传入的函数</li>
<li>组合结果成一个新的pyspark Dataframe<br>使用groupBy().applyInPandas(), 用户需要做两件事：</li>
<li>写好pandas函数</li>
<li>定义好pyspark dataframe结果的schema<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def subtract_mean(pdf):</span><br><span class="line">...     v = pdf.v</span><br><span class="line">...     return pdf.assign(v=v-v.mean())</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; df.groupby(&#x27;id&#x27;).applyInPandas(subtract_mean,schema=&#x27;id long, v double&#x27;).show()</span><br><span class="line">+---+------------------+                                                        </span><br><span class="line">| id|                 v|</span><br><span class="line">+---+------------------+</span><br><span class="line">|  1|              -0.5|</span><br><span class="line">|  1|               0.5|</span><br><span class="line">|  2|-2.666666666666667|</span><br><span class="line">|  2|-1.666666666666667|</span><br><span class="line">|  2| 4.333333333333333|</span><br><span class="line">+---+------------------+</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="Map-api"><a href="#Map-api" class="headerlink" title="Map api"></a>Map api</h3><p>也可以对pyspark dataframe和pandas dataframe做map操作，<code>DataFrame.mapInPandas()</code>是对当前的DataFrame的取一个迭代器映射普通到pandas函数。这个普通pandas函数必须是输入输出都是pdf.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def filter_func(iterator):</span><br><span class="line">...     for pdf in iterator:</span><br><span class="line">...             yield pdf[pdf.id == 1]</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; df.mapInPandas(filter_func, schema=df.schema).show()</span><br><span class="line">+---+---+</span><br><span class="line">| id|  v|</span><br><span class="line">+---+---+</span><br><span class="line">|  1|1.0|</span><br><span class="line">|  1|2.0|</span><br><span class="line">+---+---+</span><br></pre></td></tr></table></figure></div>

<h3 id="Co-grouped-Map-api"><a href="#Co-grouped-Map-api" class="headerlink" title="Co-grouped Map api"></a>Co-grouped Map api</h3><p>这个api可以使两个pyspark dataframe组合后使用pandas函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df1 = spark.createDataFrame(</span><br><span class="line">    [(20000101, 1, 1.0), (20000101, 2, 2.0), (20000102, 1, 3.0), (20000102, 2, 4.0)],</span><br><span class="line">    (&quot;time&quot;, &quot;id&quot;, &quot;v1&quot;))</span><br><span class="line"></span><br><span class="line">df2 = spark.createDataFrame(</span><br><span class="line">    [(20000101, 1, &quot;x&quot;), (20000101, 2, &quot;y&quot;)],</span><br><span class="line">    (&quot;time&quot;, &quot;id&quot;, &quot;v2&quot;))</span><br><span class="line"></span><br><span class="line">def asof_join(l, r):</span><br><span class="line">    return pd.merge_asof(l, r, on=&quot;time&quot;, by=&quot;id&quot;)</span><br><span class="line"></span><br><span class="line">df1.groupby(&quot;id&quot;).cogroup(df2.groupby(&quot;id&quot;)).applyInPandas(</span><br><span class="line">    asof_join, schema=&quot;time int, id int, v1 double, v2 string&quot;).show()</span><br><span class="line"># +--------+---+---+---+</span><br><span class="line"># |    time| id| v1| v2|</span><br><span class="line"># +--------+---+---+---+</span><br><span class="line"># |20000101|  1|1.0|  x|</span><br><span class="line"># |20000102|  1|3.0|  x|</span><br><span class="line"># |20000101|  2|2.0|  y|</span><br><span class="line"># |20000102|  2|4.0|  y|</span><br><span class="line"># +--------+---+---+---+</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>big data</category>
      </categories>
      <tags>
        <tag>big data</tag>
      </tags>
  </entry>
  <entry>
    <title>从Pandas到Spark</title>
    <url>/2020/07/23/bigdata-2020-07-24-from-pandas-to-spark/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要讨论如何把pandas移植到spark, 他们的dataframe共有一些特性如操作方法和模式。pandas的灵活性比spark强， 但是经过一些改动spark基本上能完成相同的工作。<br>同时又兼具了扩展性的优势，当然他们的语法和用法稍稍有些不同。</p>
<h2 id="主要不同处："><a href="#主要不同处：" class="headerlink" title="主要不同处："></a>主要不同处：</h2><h3 id="分布式处理"><a href="#分布式处理" class="headerlink" title="分布式处理"></a>分布式处理</h3><p>pandas只能单机处理， 把dataframe放进内存计算。spark是集群分布式地，可以处理的数据可以大大超出集群的内存数。</p>
<h3 id="懒执行"><a href="#懒执行" class="headerlink" title="懒执行"></a>懒执行</h3><p>spark不执行任何<code>transformation</code>直到需要运行<code>action</code>方法，<code>action</code>一般是存储或者展示数据的操作。这种将<code>transformation</code>延后的做法可以让spark调度知道所有的执行情况，用于优化执行顺序和读取需要的数据。<br>懒执行也是scala的特性之一。通常，在pandas我们总是和数据打交道， 而在spark,我们总是在改变产生数据的执行计划。</p>
<h3 id="数据不可变"><a href="#数据不可变" class="headerlink" title="数据不可变"></a>数据不可变</h3><p>scala的函数式编程通常倾向使用不可变对象， 每一个spark transformation会返回一个新的dataframe(除了一些meta info会改变）</p>
<h3 id="没有索引"><a href="#没有索引" class="headerlink" title="没有索引"></a>没有索引</h3><p>spark是没有索引概念的.</p>
<h3 id="单条数据索引不方便"><a href="#单条数据索引不方便" class="headerlink" title="单条数据索引不方便"></a>单条数据索引不方便</h3><p>pandas可以快速使用索引找到数据，spark没有这个功能，因为在spark主要操作的是执行计划来展示数据， 而不是数据本身。</p>
<h3 id="spark-sql"><a href="#spark-sql" class="headerlink" title="spark sql"></a>spark sql</h3><p>因为有了SQL功能的支持， spark更接近关系型数据库。</p>
<h2 id="两者的一些操作例子"><a href="#两者的一些操作例子" class="headerlink" title="两者的一些操作例子"></a>两者的一些操作例子</h2><h3 id="projections"><a href="#projections" class="headerlink" title="projections"></a>projections</h3><p>pandas的投影可以直接通过<code>[]</code>操作</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person_pd[[&#x27;age&#x27;,&#x27;name&#x27;]]</span><br><span class="line">   age     name</span><br><span class="line">0   23    Alice</span><br><span class="line">1   21      Bob</span><br><span class="line">2   27  Charlie</span><br><span class="line">3   24      Eve</span><br><span class="line">4   19  Frances</span><br><span class="line">5   31   George</span><br></pre></td></tr></table></figure></div>


<p>pyspark也可以直接<code>[]</code>来选取投影， 但是这是一个语法糖， 实际是用了<code>select</code>方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res[[&#x27;Quarter&#x27;]].show()</span><br><span class="line">+-------+</span><br><span class="line">|Quarter|</span><br><span class="line">+-------+</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">+-------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line">&gt;&gt;&gt; res.select(&#x27;Quarter&#x27;).show()</span><br><span class="line">+-------+</span><br><span class="line">|Quarter|</span><br><span class="line">+-------+</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">|Q1 2012|</span><br><span class="line">+-------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure></div>
<h3 id="simple-transformations"><a href="#simple-transformations" class="headerlink" title="simple transformations"></a>simple transformations</h3><p><code>select</code>实际上接受任何<code>column</code>对象， 一个<code>column</code>对象概念上是dataframe的一列。一列可以是dataframe的一列输入，也可以是一个计算结果或者多个列的<code>transformation</code>结果。<br>以改变一列为大写为例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ret = pd.DataFrame(person_pd[&#x27;name&#x27;].apply(lambda x: x.upper()))</span><br><span class="line">&gt;&gt;&gt; ret</span><br><span class="line">      name</span><br><span class="line">0    ALICE</span><br><span class="line">1      BOB</span><br><span class="line">2  CHARLIE</span><br><span class="line">3      EVE</span><br><span class="line">4  FRANCES</span><br><span class="line">5   GEORGE</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pyspark.sql.functions as sf</span><br><span class="line"></span><br><span class="line">result = persons.select(</span><br><span class="line">  sf.upper(persons.name)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<h3 id="增加一列"><a href="#增加一列" class="headerlink" title="增加一列"></a>增加一列</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def create_salutation(row):</span><br><span class="line">  sex = row[0]</span><br><span class="line">  name = row[1]</span><br><span class="line">  if sex == &#x27;male&#x27;:</span><br><span class="line">    return &#x27;Mr &#x27;+name</span><br><span class="line">  else:</span><br><span class="line">    return &quot;Mrs &quot;+name</span><br><span class="line">   </span><br><span class="line">result = persons_pd.copy()</span><br><span class="line">result[&#x27;salutation&#x27;] = result[[&#x27;sex&#x27;,&#x27;name&#x27;]].apply(create_salutation, axis=1, result_type=&#x27;expand&#x27;)</span><br><span class="line">result</span><br><span class="line">age	height	name	sex	salutation</span><br><span class="line">0	23	156	Alice	female	Mrs Alice</span><br><span class="line">1	21	181	Bob	male	Mr Bob</span><br><span class="line">2	27	176	Charlie	male	Mr Charlie</span><br><span class="line">3	24	167	Eve	female	Mrs Eve</span><br><span class="line">4	19	172	Frances	female	Mrs Frances</span><br><span class="line">5	31	191	George	female	Mrs George</span><br></pre></td></tr></table></figure></div>
<p>spark sql有个控制流方法<code>when</code>可以使代码更简洁， 配合<code>withColumn</code>增加一列</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = persons.withColumn(</span><br><span class="line">    &quot;salutation&quot;,</span><br><span class="line">    sf.concat(sf.when(persons.sex == &#x27;male&#x27;, &quot;Mr &quot;).otherwise(&quot;Mrs &quot;), persons.name).alias(&quot;salutation&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>big data</category>
      </categories>
      <tags>
        <tag>big data</tag>
      </tags>
  </entry>
  <entry>
    <title>Arrow and Pyarrow</title>
    <url>/2020/08/19/bigdata-2020-08-20-arrow-and-pyarrow/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Apache Arrow是一个用于内存分析的跨语言开发平台。它定义了一种标准的、语言无关的列式内存数据格式。<br>这种格式支持平整的和嵌套的数据结构。它还提供了一些计算库，零拷贝流式消息和内部进程通信。<br>Arrow的主要用处可以是大数据的快速移动和处理。由于是开发平台，Arrow包含了许多组件：</p>
<ul>
<li>Arrow列式内存格式：一个标准和高效的内存表示。可用于平的和嵌套的数据结构，做到了语言无关。</li>
<li>Arrow IPC格式：一种高效的序列化格式，并且带有元信息，可用于进程和异构环境间的通信</li>
<li>Arrow Flight RPC协议：基于Arrow IPC格式，用于远程服务交换arrow数据与应用定义的语义数据</li>
<li>C++, C, C#, Go, Python, Matlib, Java等等库</li>
<li>Grandiva: 一个LLVM编译器</li>
<li>Plasma对象存储：一个共享内存blob存储</li>
</ul>
<p>本文主要展示一些python的实践案例和源码解读， 希望能够总结以期有进一步了解Arrow.</p>
<h2 id="Dive-into"><a href="#Dive-into" class="headerlink" title="Dive into"></a>Dive into</h2><p>下面让我们去看一看pyarrow的源代码（1.0.0)</p>
<h3 id="pyarrow项目目录"><a href="#pyarrow项目目录" class="headerlink" title="pyarrow项目目录"></a>pyarrow项目目录</h3><p>![](&#x2F;images&#x2F;screenshots&#x2F;Screen Shot 2020-08-28 at 3.53.07 PM.png)</p>
<p>pip安装的pyarrow少了一些cython编写的pyx代码，这些文件被编译成pxd或so后可以被py代码import, 比如<code>from pyarrow.lib import (ChunkedArray, RecordBatch, Table)</code><br>是从lib.so中导入的。</p>
<h3 id="pyarrow-init-py源码解读"><a href="#pyarrow-init-py源码解读" class="headerlink" title="pyarrow._init_.py源码解读"></a>pyarrow._<em>init_</em>.py源码解读</h3><p>首先导入版本号，如果不是通过包安装，那么版本通过解析<code>git describe</code>确定版本。<br>接着导入cython的pyarrow.lib库，由于Cython有个bug(<a class="link"   href="https://github.com/cython/cython/issues/3603" >https://github.com/cython/cython/issues/3603 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>), 这里暂时关掉gc。<br>然后有一个<code>show_versions</code>的函数可以查看c++版本信息：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pa.show_versions()</span><br><span class="line">pyarrow version info</span><br><span class="line">--------------------</span><br><span class="line">Package kind: manylinux2010</span><br><span class="line">Arrow C++ library version: 1.0.0</span><br><span class="line">Arrow C++ compiler: GNU 8.3.1</span><br><span class="line">Arrow C++ compiler flags:  -fdiagnostics-color=always -O3 -DNDEBUG</span><br><span class="line">Arrow C++ git revision: b0d623957db820de4f1ff0a5ebd3e888194a48f0</span><br><span class="line">Arrow C++ git description: apache-arrow-0.16.0-1340-gb0d623957</span><br></pre></td></tr></table></figure></div>
<p>然后导入Cython定义的各种类型，<br>导入buffer和IO相关。关于Pyarrow的memory和IO, 下面会介绍。<br>导入异常，<br>导入序列化相关，到这lib模块导入完毕。<br>然后从hdfs.py，ipc.py, filesystem.py, serialization.py,types.py导入相关模块，<br>定义启动plasma server入口函数和一些其他的包工具函数。</p>
<h3 id="pyarrow的内存和IO管理"><a href="#pyarrow的内存和IO管理" class="headerlink" title="pyarrow的内存和IO管理"></a>pyarrow的内存和IO管理</h3><p>本节主要总结pyarrow的内存管理和IO管理，涉及buffer, memory pool和file-like&#x2F;stream-like对象</p>
<h4 id="访问和分配内存"><a href="#访问和分配内存" class="headerlink" title="访问和分配内存"></a>访问和分配内存</h4><p>在<code>pyarrow.__init__.py</code>可以看到代码的引入:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Buffers, allocation</span></span><br><span class="line"><span class="keyword">from</span> pyarrow.lib <span class="keyword">import</span> (Buffer, ResizableBuffer, foreign_buffer, py_buffer,</span><br><span class="line">                         Codec, compress, decompress, allocate_buffer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyarrow.lib <span class="keyword">import</span> (MemoryPool, LoggingMemoryPool, ProxyMemoryPool,</span><br><span class="line">                         total_allocated_bytes, set_memory_pool,</span><br><span class="line">                         default_memory_pool, logging_memory_pool,</span><br><span class="line">                         proxy_memory_pool, log_memory_allocations,</span><br><span class="line">                         jemalloc_set_decay_ms)</span><br></pre></td></tr></table></figure></div>
<p><strong>pyarrow.Buffer</strong><br><code>Buffer</code>对象是C++代码<code>arrow::Buffer</code>的封装，作为基础工具管理C++中的arrow内存。一个buffer代表一段连续的内存空间。<br>大部分buffer拥有他们各自的内存，但是也有例外。Buffer对象可以允许高级array类安全地和属于或不属于他们的内存交互。<code>arrow::Buffer</code><br>允许一个buffer访问另一个buffer通过zero-copy, 同时保持内存的生命周期和清晰的父子关系。<br><code>arrow::Buffer</code>有很多种实现，但是对外接口是一致的：一个数据指针和长度。有点类似python自带的buffer和<code>memoryview</code>对象</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/apache/arrow/blob/67983cf56f/python/pyarrow/io.pxi</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyarrow <span class="keyword">as</span> pa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data=<span class="string">b&#x27;aaaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf = pa.py_buffer(data)  <span class="comment"># buf是zero-copy的data对象memory view, buf不会分配内存.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf</span><br><span class="line">&lt;pyarrow.lib.Buffer <span class="built_in">object</span> at <span class="number">0x7fabc0e05d30</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf.size</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf.to_pybytes()  <span class="comment"># 这个转化是会复制数据。</span></span><br><span class="line"><span class="string">b&#x27;aaaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>外部的内存，只要有指针和size，保持接口一致，也可以通过<code>foreign_buffer()</code>来访问。<br>在创建buffer之后，可以通过memoryview或python buffer装换，这种转化是zero-copy.</p>
<p><strong>Memory Pools</strong><br>所有内存分配和释放(malloc&#x2F;free)都可通过<code>arrow::MemoryPool</code>来追踪。代码在<a class="link"   href="https://github.com/apache/arrow/blob/67983cf56f/python/pyarrow/memory.pxi" >memory.pxi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyarrow <span class="keyword">as</span> pa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pa.total_allocated_bytes()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf = pa.allocate_buffer(<span class="number">1024</span>,resizable=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pa.total_allocated_bytes()</span><br><span class="line"><span class="number">1024</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf.resize(<span class="number">2048</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pa.total_allocated_bytes()</span><br><span class="line"><span class="number">2048</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf=<span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pa.total_allocated_bytes()</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>Arrow C++库有几个抽象接口用于不同IO类型：</p>
<ul>
<li>只读流</li>
<li>随机可访问只读文件</li>
<li>只写流</li>
<li>随机可访问只写文件</li>
<li>可读可写可随机访问文件</li>
</ul>
<p>在<code>pyarrow.__init__.py</code>可以看到代码的引入:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># I/O</span></span><br><span class="line"><span class="keyword">from</span> pyarrow.lib <span class="keyword">import</span> (HdfsFile, NativeFile, PythonFile,</span><br><span class="line">                         BufferedInputStream, BufferedOutputStream,</span><br><span class="line">                         CompressedInputStream, CompressedOutputStream,</span><br><span class="line">                         TransformInputStream, transcoding_input_stream,</span><br><span class="line">                         FixedSizeBufferWriter,</span><br><span class="line">                         BufferReader, BufferOutputStream,</span><br><span class="line">                         OSFile, MemoryMappedFile, memory_map,</span><br><span class="line">                         create_memory_map, have_libhdfs,</span><br><span class="line">                         MockOutputStream, input_stream, output_stream)</span><br><span class="line"><span class="keyword">from</span> pyarrow.lib <span class="keyword">import</span> (ChunkedArray, RecordBatch, Table, table,</span><br><span class="line">                         concat_arrays, concat_tables)</span><br></pre></td></tr></table></figure></div>

<p>为了能够和python自带<code>file</code>对象行为一致，arrow定义了<code>NativeFile</code>(其实是个stream).代码在<a class="link"   href="https://github.com/apache/arrow/blob/67983cf56f/python/pyarrow/io.pxi" >io.pxi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><code>NativeFile</code>是所有arrow流的基类，arrow流可以是可读，可写，也可以支持<code>seek</code>.<code>NativeFile</code>暴露的方法用于读写python的数据对象，然后把他们变成stream传递给其他arrow工具，比如Arrow IPC.<br>cython代码中定义了好几种NativeFile子类:</p>
<ul>
<li>OSFile, 使用操作系统的描述符</li>
<li>MemoryMappedFile, 使用memory maps做zero-copy读和写。</li>
<li>BufferReader, 把对象转成arrow buffer使用Zero-copy reader</li>
<li>BufferOutputStream, 内存中写数据，最后生成buffer</li>
<li>FixedSizeBufferWriter, 再一句生成的buffer中写数据</li>
<li>HdfsFile, hadoop生态读写数据</li>
<li>PythonFile, 在C++中交互python文件对象,可以对python文件对象使用c++的方法，但是可能有GIL的限制。</li>
<li>CompressedInputStream and CompressedOutputStream, 从流中压缩和解压数据。</li>
</ul>
<p><strong>高级API</strong><br><strong>input streams</strong><br><code>input_streams()</code>函数可以从各种输入创建可读<code>NativeFile</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf = <span class="built_in">memoryview</span>(<span class="string">b&#x27;some data&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stream = pa.input_stream(buf)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stream.read(<span class="number">4</span>)</span><br><span class="line"><span class="string">b&#x27;some&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stream.read()</span><br><span class="line"><span class="string">b&#x27; data&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stream.read()</span><br><span class="line"><span class="string">b&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>output streams</strong><br>同理，<code>output_stream</code>把stream写成文件。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> pa.output_stream(<span class="string">&#x27;example1.dat&#x27;</span>) <span class="keyword">as</span> stream:</span><br><span class="line"><span class="meta">... </span>    stream.write(<span class="string">b&#x27;some data&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;example1.dat&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b&#x27;some data&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="OSFile和Memory-Mapped-Files"><a href="#OSFile和Memory-Mapped-Files" class="headerlink" title="OSFile和Memory Mapped Files"></a>OSFile和Memory Mapped Files</h4><p>对于在磁盘上的文件读写，pyarrow提供标准系统级别的文件api和memory-mapped文件。memory-mapped是在用户态创建虚拟空间来映射磁盘上的内容。<br>通过对這段虚拟内存的讀取和修改, 实现对文件的讀取和修改。使用虚拟内存映射进行文件读写有几个好处：</p>
<ul>
<li>可以不用读取整个文件进入物理内存，文件已经在虚拟内存中</li>
<li>可以用对内存的操作命令来操作文件，更加高效</li>
<li>由于实际上这个mapped文件还是文件，与进程无关，所以这段虚拟内存可以共享给多个进程。</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mmap = pa.memory_map(<span class="string">&#x27;example1.dat&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mmap.read()</span><br><span class="line"><span class="string">b&#x27;some data&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mmap.seek(<span class="number">5</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf=mmap.read_buffer(<span class="number">4</span>)  <span class="comment"># read into arrow buffer</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf.to_pybytes()</span><br><span class="line"><span class="string">b&#x27;data&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="内存中buffer读写"><a href="#内存中buffer读写" class="headerlink" title="内存中buffer读写"></a>内存中buffer读写</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer = pa.BufferOutputStream()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer.write(<span class="string">b&#x27;hello, friends&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf = writer.getvalue()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reader = pa.BufferReader(buf)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reader.seek(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reader.read(<span class="number">7</span>)</span><br><span class="line"><span class="string">b&#x27;friends&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="plasma"><a href="#plasma" class="headerlink" title="plasma"></a>plasma</h3><p>plasma是arrow的一个共享对象存储，plasma只能用在单机上，客户端和服务端使用unix domain socket通信。plasma中的对象是不可变的。</p>
<h4 id="pyarrow-plasma源码"><a href="#pyarrow-plasma源码" class="headerlink" title="pyarrow.plasma源码"></a>pyarrow.plasma源码</h4><p>这个文件一上来要导入TensorFlow相关库，暂时跳过。<br>主要功能函数式，用来启动plasma server.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def start_plasma_store(plasma_store_memory,</span><br><span class="line">                       use_valgrind=False, use_profiler=False,</span><br><span class="line">                       plasma_directory=None, use_hugepages=False,</span><br><span class="line">                       external_store=None):</span><br><span class="line"># plasma_store_memory定义存储大小</span><br><span class="line"># use_valgrind定义是否使用valgrind和use_profiler互斥</span><br><span class="line"># use_profiler定义是否测试性能</span><br><span class="line"># plasma_directory定义mmap文件位置</span><br><span class="line"># use_hugepages是否使用大文件存储，需要划分文件格式</span><br><span class="line"># external_store溢出的对象存储到外部位置，由于plasma超过预设空间时候会溢出对象。 </span><br></pre></td></tr></table></figure></div>
<p>这个函数会默认创建<code>/tmp/test_plasma-plasma.sock</code>用于客户端sock连接, 然后就是普通的shell命令行选取参数启动server.</p>
<h4 id="使用plasma共享pandas-dataframe"><a href="#使用plasma共享pandas-dataframe" class="headerlink" title="使用plasma共享pandas dataframe"></a>使用plasma共享pandas dataframe</h4><p>由于arrow支持平整或嵌套的数据结构，尤其适合pandas dataframe或者numpy(使用tensor), 然后我们可以把arrow格式的数据持久化到plasma用于共享对象，实现数据的高效读取。<br>核心代码就三步，1.创建plasma对象，2.存入转为recordbatch的dataframe, 3.读取plasma的dataframe对象。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># basic plasma client</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlasmaClient</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, location=<span class="string">&quot;plasma&quot;</span>, *args, **kwargs</span>):</span><br><span class="line">        self.client = plasma.connect(location)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_object_id</span>(<span class="params">self, name</span>):</span><br><span class="line">        name = self.pad_str_with_20char(name)</span><br><span class="line">        <span class="built_in">id</span> = plasma.ObjectID(name)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pad_str_with_20char</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(name) &lt; <span class="number">20</span>:</span><br><span class="line">            name = <span class="string">f&quot;<span class="subst">&#123;name:&lt;<span class="number">20</span>&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            name = name[:<span class="number">20</span>]</span><br><span class="line">        <span class="keyword">return</span> name.encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode_hex_bytes</span>(<span class="params">self, <span class="built_in">hex</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>).decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_object</span>(<span class="params">self, object_id</span>):</span><br><span class="line">        obj = self.client.get(object_id)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_object</span>(<span class="params">self, obj</span>):</span><br><span class="line">        self.client.put(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_buffer</span>(<span class="params">self, obj, object_id</span>):</span><br><span class="line">        object_size = <span class="built_in">len</span>(obj)</span><br><span class="line">        buf = <span class="built_in">memoryview</span>(self.client.create(object_id, object_size))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(object_size):</span><br><span class="line">            buf[i] = i % <span class="number">128</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">seal_buffer</span>(<span class="params">self, object_id</span>):</span><br><span class="line">        self.client.seal(object_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_buffer</span>(<span class="params">self, object_id</span>):</span><br><span class="line">        [buffer] = self.client.get_buffers([object_id])</span><br><span class="line">        <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_objects</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.client.<span class="built_in">list</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>然后写一个子类能够使用plasma存储对象来读取dataframe:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PlasmaPandas</span>(<span class="title class_ inherited__">PlasmaClient</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, location=<span class="string">&quot;plasma&quot;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(location)</span><br><span class="line">        self.object_id = self.get_object_id(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dataFrame2recordBatch</span>(<span class="params">self, df</span>):</span><br><span class="line">        <span class="keyword">return</span> pa.RecordBatch.from_pandas(df)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_plasma_obj_from_record_batch</span>(<span class="params">self, record_batch</span>):</span><br><span class="line">        <span class="comment"># get the size of record batch and schema</span></span><br><span class="line">        mock_sink = pa.MockOutputStream()</span><br><span class="line">        stream_writer = pa.RecordBatchStreamWriter(mock_sink, record_batch.schema)</span><br><span class="line">        stream_writer.write_batch(record_batch)</span><br><span class="line">        stream_writer.close()</span><br><span class="line">        data_size = mock_sink.size()</span><br><span class="line"></span><br><span class="line">        buf = self.client.create(self.object_id, data_size)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write dataframe into store</span></span><br><span class="line">        stream = pa.FixedSizeBufferWriter(buf)</span><br><span class="line">        stream_writer = pa.RecordBatchStreamWriter(stream, record_batch.schema)</span><br><span class="line">        stream_writer.write_batch(record_batch)</span><br><span class="line">        stream_writer.close()</span><br><span class="line">        self.seal_buffer(self.object_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_df_by_name</span>(<span class="params">self</span>): </span><br><span class="line">        [data] = self.client.get_buffers([self.object_id])</span><br><span class="line">        arrow_buffer = pa.BufferReader(data)</span><br><span class="line">        <span class="comment"># Convert object back into an Arrow RecordBatch</span></span><br><span class="line">        reader = pa.RecordBatchStreamReader(arrow_buffer)</span><br><span class="line">        record_batch = reader.read_next_batch()</span><br><span class="line">        result = record_batch.to_pandas()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_df_column</span>(<span class="params">self, column</span>): <span class="comment">#可以直接在arrow中取column, 性能比pandas快5-10倍 </span></span><br><span class="line">        [data] = self.client.get_buffers([self.object_id])</span><br><span class="line">        arrow_buffer = pa.BufferReader(data)</span><br><span class="line">        <span class="comment"># Convert object back into an Arrow RecordBatch</span></span><br><span class="line">        reader = pa.RecordBatchStreamReader(arrow_buffer)</span><br><span class="line">        table = reader.read_all()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = table.select([<span class="string">&quot;index&quot;</span>, column]).to_pandas()</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">return</span> pd.DataFrame()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store_df_in_store</span>(<span class="params">self, df</span>): </span><br><span class="line">        rb = self.dataFrame2recordBatch(df)</span><br><span class="line">        self.create_plasma_obj_from_record_batch(rb)</span><br></pre></td></tr></table></figure></div>
<p>在应用中使用：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pp = PlasmaPandas(<span class="string">&#x27;obj_key&#x27;</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;example.csv&#x27;</span>)</span><br><span class="line">pp.store_df_in_store(df)</span><br><span class="line">df = pp.get_df_column(<span class="string">&#x27;col_name&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>big data</category>
      </categories>
      <tags>
        <tag>big data</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Integration</title>
    <url>/2021/04/09/bigdata-2021-04-10-data-integration-tools/</url>
    <content><![CDATA[<h2 id="数据集成简介"><a href="#数据集成简介" class="headerlink" title="数据集成简介"></a>数据集成简介</h2><p>企业总是有从各个系统里集成数据的需求, 数据集成就是一门技术用来提供企业层面的统一和一致的数据视图. 数据集成的目的是维护数据源整体上的数据一致性, 解决企业数据孤岛问题, 提高信息共享和利用的效率. 数据集成的核心任务是将有关联的异构数据源集成到一起, 使用户能够透明地方式访问这些数据.</p>
<h2 id="数据集成的分类"><a href="#数据集成的分类" class="headerlink" title="数据集成的分类"></a>数据集成的分类</h2><p>从集成方式的角度来分, 数据集成可分为:</p>
<ul>
<li>点对点集成</li>
<li>总线式集成</li>
<li>离线批量集成</li>
<li>流式数据集成</li>
</ul>
<h3 id="点对点数据集成"><a href="#点对点数据集成" class="headerlink" title="点对点数据集成"></a>点对点数据集成</h3><p>点对点一般采用接口方式对接, 适合连接对象比较少的情况, 具有开发周期短, 技术难度低的优势. 问题是当连接对象变多, 连接路径将会指数级增长, 效率和维护成本会变大. 主要的维护成本在于不能集中管理和监控接口服务, 如果交换协议不一致将会遇到开发困难.<br>点对点的集成是紧耦合的，当一个连接变化时，所有与其相关的接口程序都需要重新开发或调试。</p>
<h3 id="总线式数据集成"><a href="#总线式数据集成" class="headerlink" title="总线式数据集成"></a>总线式数据集成</h3><p>总线式数据集成是通过在中间件上定义和执行集成规则，其拓扑结构不再是点对点集成形成的无规则网状，而主要是中心辐射型的（Hub型）星型结构或总线结构.<br>总线结构通过与点对点集成架构相比，采用总线架构可以显著减少编写的专用集成代码量，提升了集成接口的可管理性。不同连接对象如果连接方式有差异，可以通过总线完全屏蔽掉，做到对连接对象透明，无需各个连接对象关心。通过总线结构，把原来复杂的网状结构变成简单的星形结构，极大提高了硬件的可靠性和可用性。</p>
<ul>
<li><p>第一代总线集成工具: EDI电子数据交换系统<br>企业直接按照通用的消息格式发送信息，接收方也需要按统一规定的语法规则，对消息进行处理，并引起其他相关系统的EDI综合处理。一般EDI用于企业间交换交易凭证和发票等数据, 是无纸化办公的实现.</p>
</li>
<li><p>第二代总线集成工具: ESB企业服务总线<br>ESB的使用标志着企业的应用集成进入了SOA时代（SOA是一种面向服务的集成架构）。SOA架构的其主要特征是基于一系列Web标准或规范来开发接口程序，包括UDDI、SOAP、WSDL、XML、REST，并采用支持这些规范的中间件产品作为集成平台，从而实现了一种开放而富有弹性的应用集成方式。<br>ESB是对web服务（WebService）的注册、编排和管理。<br>WebService是一种跨编程语言、跨操作系统平台的远程调用技术，是web的一种标准。可以理解为：WebService是一个应用程序向外界暴露了一个能通过Web调用的API接口，我们把调用这个WebService的应用程序称作客户端，把提供这个WebService的应用程序称作服务端。客户端进行服务的远程调用前，需要知道服务的地址与服务有什么方法可以调用。<br>因此，WebService服务端通过一个文件（WSDL）来说明自己家里有啥服务可以对外调用，服务是什么，服务中有哪些方法，方法输入的参数是什么，返回值是什么，服务的网络地址是什么，通过什么方式来调用等。<br>WSDL是一个基于XML的语言，用于描述WebService及其函数、参数和返回值，它是WebService客户端和服务器端都能理解的标准格式。</p>
</li>
</ul>
<h3 id="离线批量数据集成"><a href="#离线批量数据集成" class="headerlink" title="离线批量数据集成"></a>离线批量数据集成</h3><p>在传统数据集成的语境下，离线批量数据集成，通常是指基于ETL工具的离线数据集成，ETL即数据的提取（Extract)、转换(Transform)和加载(Load)。<br>ETL的实现有多种方法，常用的有三种：</p>
<ul>
<li>第一种是借助ETL工具：例如：Informatic、IBM CDC、talend、kettle、Nifi等，借助工具可以快速的建立起ETL工程，屏蔽了复杂的编码任务，提高了速度，降低了难度，但是缺少灵活性。</li>
<li>第二种是SQL编码实现：SQL的方法优点是灵活，提高ETL运行效率，但是编码复杂，对技术要求比较高。</li>
<li>第三种是ETL工具和SQL组合实现：综合了前面二种的优点，会极大地提高ETL的开发速度和效率。</li>
</ul>
<h3 id="流程数据集成"><a href="#流程数据集成" class="headerlink" title="流程数据集成"></a>流程数据集成</h3><p>流式数据集成也叫流式数据实时数据处理，通常是采用Flume、Kafka等流式数据处理工具对数据库进行实时监控和复制，然后根据业务场景做对应的处理（例如去重、去噪、中间计算等），之后再写入到对应的数据存储中。</p>
<h3 id="网络数据集成"><a href="#网络数据集成" class="headerlink" title="网络数据集成"></a>网络数据集成</h3><p>网络数据集成也叫网络数据采集，指通过网络爬虫或网站公开API等方式从网站上获取数据信息的过程。<br>网页爬虫，即一种按照一定的规则，自动地抓取互联网信息的程序或者脚本，一般分为通用网络爬虫和聚焦网络爬虫两种。网页爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列，直到满足系统的一定停止条件。<br>聚焦爬虫的工作流程较为复杂，需要根据一定的网页分析算法过滤与主题无关的链接，保留有用的链接并将其放入等待抓取的URL队列。<br>网页爬虫支持文本文件、图片、音频、视频等非结构化数据、半结构化数据从网页中提取出来，存储在本地的存储系统中。<br>目前网络上有许多网页爬虫，Octoparse、WebCopy、HTTrack、Getleft、Scraper等.</p>
<h3 id="表格总结"><a href="#表格总结" class="headerlink" title="表格总结"></a>表格总结</h3><p>|—————–+————+—————–+—————-|</p>
<table>
<thead>
<tr>
<th>方式</th>
<th align="left">优点</th>
<th>缺点</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>点对点</td>
<td align="left">1.开发周期短 2.技术难度低</td>
<td>1.维护成本高 2.紧耦合 3.接口协议局限</td>
<td>基本不选择</td>
</tr>
<tr>
<td>总线式</td>
<td align="left">1.集中管理  2.多协议 3. 解耦和结构星型化 4.可声明</td>
<td>1.存在单点问题,需要高可用 2.开发成本比点对点高</td>
<td>适合API类型的数据集成</td>
</tr>
<tr>
<td>离线批量</td>
<td align="left">1.吞吐量大 2.可自定义数据模型 3.可集成数仓</td>
<td>1.需要一定编码能力 2.数据有延迟 3.ETL一般只支持关系型数据</td>
<td>适合数仓系统</td>
</tr>
<tr>
<td>流式数据集成</td>
<td align="left">1.实时 2.吞吐量达每秒百MB 3.支持NoSQL</td>
<td>1.架构较复杂 2.需要devops能力</td>
<td>一般使用Kafka</td>
</tr>
<tr>
<td>—————–+————+—————–+—————-</td>
<td align="left"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>big data</category>
      </categories>
      <tags>
        <tag>big data</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云和aws的网路特点</title>
    <url>/2018/05/05/cloud-2018-05-06-aliyun%E5%92%8Caws%E7%9A%84%E7%BD%91%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="本文主要介绍aws网络产品-并对比阿里云的产品"><a href="#本文主要介绍aws网络产品-并对比阿里云的产品" class="headerlink" title="本文主要介绍aws网络产品, 并对比阿里云的产品"></a>本文主要介绍aws网络产品, 并对比阿里云的产品</h2><h3 id="阿里云高速通道支持不同区域vpc直连，这个比aws的vpc-peering好，-vpc-peering只能用于同一区域，且是不同ip段连接。"><a href="#阿里云高速通道支持不同区域vpc直连，这个比aws的vpc-peering好，-vpc-peering只能用于同一区域，且是不同ip段连接。" class="headerlink" title="阿里云高速通道支持不同区域vpc直连，这个比aws的vpc peering好， vpc peering只能用于同一区域，且是不同ip段连接。"></a>阿里云高速通道支持不同区域vpc直连，这个比aws的vpc peering好， vpc peering只能用于同一区域，且是不同ip段连接。</h3><h3 id="aws每个区域的默认-VPC-数量是5个-每个vpc默认子网有200个-VPC-的网段从-x2F-16-到-x2F-28"><a href="#aws每个区域的默认-VPC-数量是5个-每个vpc默认子网有200个-VPC-的网段从-x2F-16-到-x2F-28" class="headerlink" title="aws每个区域的默认 VPC 数量是5个, 每个vpc默认子网有200个, VPC 的网段从&#x2F;16 到 &#x2F;28."></a>aws每个区域的默认 VPC 数量是5个, 每个vpc默认子网有200个, VPC 的网段从&#x2F;16 到 &#x2F;28.</h3><h3 id="aws的弹性网路接口（ENI-，是一个虚拟网卡，只能用于VPC中的实例。阿里云叫弹性网卡。我们可以在虚机默认的主网卡上额外添加网路接口，由于它是弹性的，所以可以把它从一个实例移除，-然后放到另一个虚机上，并保留原有的网路属性。-那么ENI有哪些网路属性呢？-一个弹性网路接口可以有如下属性："><a href="#aws的弹性网路接口（ENI-，是一个虚拟网卡，只能用于VPC中的实例。阿里云叫弹性网卡。我们可以在虚机默认的主网卡上额外添加网路接口，由于它是弹性的，所以可以把它从一个实例移除，-然后放到另一个虚机上，并保留原有的网路属性。-那么ENI有哪些网路属性呢？-一个弹性网路接口可以有如下属性：" class="headerlink" title="aws的弹性网路接口（ENI)，是一个虚拟网卡，只能用于VPC中的实例。阿里云叫弹性网卡。我们可以在虚机默认的主网卡上额外添加网路接口，由于它是弹性的，所以可以把它从一个实例移除， 然后放到另一个虚机上，并保留原有的网路属性。 那么ENI有哪些网路属性呢？ 一个弹性网路接口可以有如下属性："></a>aws的弹性网路接口（ENI)，是一个虚拟网卡，只能用于VPC中的实例。阿里云叫弹性网卡。我们可以在虚机默认的主网卡上额外添加网路接口，由于它是弹性的，所以可以把它从一个实例移除， 然后放到另一个虚机上，并保留原有的网路属性。 那么ENI有哪些网路属性呢？ 一个弹性网路接口可以有如下属性：</h3><ul>
<li>有一个主要IPv4私有地址</li>
<li>一个或多个辅助私有地址</li>
<li>每一个私有IP可以有一个弹性IP</li>
<li>一个公有IP(取决于子网是否分配公有IP的属性设置）</li>
<li>一个或多个IPv6地址</li>
<li>一个或多个安全组</li>
<li>一个MAC地址</li>
<li>一个源&#x2F;目标检查标记</li>
<li>一个描述</li>
</ul>
<h3 id="aws的弹性IP不支持IPv6，-弹性IP地址只能在一个特定区域中使用。一个运行着一个弹性IP的实例是不收取ip费用的，但是闲置的弹性IP-aws将按小时收费。而aliyun总是收取EIP保有费的（除非EIP和VPC中虚机绑定），包年包月还不能释放；后付费可以用按量或者按带宽选择。"><a href="#aws的弹性IP不支持IPv6，-弹性IP地址只能在一个特定区域中使用。一个运行着一个弹性IP的实例是不收取ip费用的，但是闲置的弹性IP-aws将按小时收费。而aliyun总是收取EIP保有费的（除非EIP和VPC中虚机绑定），包年包月还不能释放；后付费可以用按量或者按带宽选择。" class="headerlink" title="aws的弹性IP不支持IPv6， 弹性IP地址只能在一个特定区域中使用。一个运行着一个弹性IP的实例是不收取ip费用的，但是闲置的弹性IP aws将按小时收费。而aliyun总是收取EIP保有费的（除非EIP和VPC中虚机绑定），包年包月还不能释放；后付费可以用按量或者按带宽选择。"></a>aws的弹性IP不支持IPv6， 弹性IP地址只能在一个特定区域中使用。一个运行着一个弹性IP的实例是不收取ip费用的，但是闲置的弹性IP aws将按小时收费。而aliyun总是收取EIP保有费的（除非EIP和VPC中虚机绑定），包年包月还不能释放；后付费可以用按量或者按带宽选择。</h3><h3 id="aws-VPC-flow-logs-flow-log用于捕获有关传入和传出-VPC-中网络接口的-IP-流量的信息。流日志数据使用-Amazon-CloudWatch-Logs-存储。创建流日志后，您可以在-Amazon-CloudWatch-Logs-中查看和检索其数据。可以为-VPC、子网或网络接口创建流日志。如果为子网或-VPC-创建流日志，则会监视-VPC-或子网中的每个网络接口。"><a href="#aws-VPC-flow-logs-flow-log用于捕获有关传入和传出-VPC-中网络接口的-IP-流量的信息。流日志数据使用-Amazon-CloudWatch-Logs-存储。创建流日志后，您可以在-Amazon-CloudWatch-Logs-中查看和检索其数据。可以为-VPC、子网或网络接口创建流日志。如果为子网或-VPC-创建流日志，则会监视-VPC-或子网中的每个网络接口。" class="headerlink" title="aws VPC flow logs. flow log用于捕获有关传入和传出 VPC 中网络接口的 IP 流量的信息。流日志数据使用 Amazon CloudWatch Logs 存储。创建流日志后，您可以在 Amazon CloudWatch Logs 中查看和检索其数据。可以为 VPC、子网或网络接口创建流日志。如果为子网或 VPC 创建流日志，则会监视 VPC 或子网中的每个网络接口。"></a>aws VPC flow logs. flow log用于捕获有关传入和传出 VPC 中网络接口的 IP 流量的信息。流日志数据使用 Amazon CloudWatch Logs 存储。创建流日志后，您可以在 Amazon CloudWatch Logs 中查看和检索其数据。可以为 VPC、子网或网络接口创建流日志。如果为子网或 VPC 创建流日志，则会监视 VPC 或子网中的每个网络接口。</h3><h3 id="使用aws的Direct-Connect除了常规的优势：-减少流量费、网速保证、私有连接外，它比vpn连接最大的优势是，支持10G带宽，而vpn只能到4Gbps-实现direct-connect需要2个组件：物理链路和virtual-interface-VIF-。"><a href="#使用aws的Direct-Connect除了常规的优势：-减少流量费、网速保证、私有连接外，它比vpn连接最大的优势是，支持10G带宽，而vpn只能到4Gbps-实现direct-connect需要2个组件：物理链路和virtual-interface-VIF-。" class="headerlink" title="使用aws的Direct Connect除了常规的优势： 减少流量费、网速保证、私有连接外，它比vpn连接最大的优势是，支持10G带宽，而vpn只能到4Gbps. 实现direct connect需要2个组件：物理链路和virtual interface(VIF)。"></a>使用aws的Direct Connect除了常规的优势： 减少流量费、网速保证、私有连接外，它比vpn连接最大的优势是，支持10G带宽，而vpn只能到4Gbps. 实现direct connect需要2个组件：物理链路和virtual interface(VIF)。</h3><p>想要把流量通过direct connect 路由到VPC, 那么需要在aws这边创建私有VIF；如果需要连接公有的aws服务，那么需要创建公有VIF.每个VIF有如下组件：</p>
<ul>
<li>Virtual Local Area Network ID. 这个VLAN id是唯一的</li>
<li>需要连接的IP地址， 支持IPv6.</li>
<li>只支持BGP路由协议</li>
</ul>
<h3 id="aws-LoadBalancer有三种类型：-Classic-Network-Application-LoadBalancer-见下图："><a href="#aws-LoadBalancer有三种类型：-Classic-Network-Application-LoadBalancer-见下图：" class="headerlink" title="aws LoadBalancer有三种类型： Classic, Network, Application LoadBalancer. 见下图："></a>aws LoadBalancer有三种类型： Classic, Network, Application LoadBalancer. 见下图：</h3><p><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%888.21.58.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%888.21.58.png"><br>![<a class="link"   href="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%888.37.46.png]" >https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%888.37.46.png] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>(<a class="link"   href="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95" >https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%888.37.46.png)</p>
<h3 id="aws-CloudFront-是一个能加速你的静态和动态内容的web服务-除了能分发静态内容-还能分发动态内容和流内容"><a href="#aws-CloudFront-是一个能加速你的静态和动态内容的web服务-除了能分发静态内容-还能分发动态内容和流内容" class="headerlink" title="aws CloudFront 是一个能加速你的静态和动态内容的web服务.除了能分发静态内容,还能分发动态内容和流内容."></a>aws CloudFront 是一个能加速你的静态和动态内容的web服务.除了能分发静态内容,还能分发动态内容和流内容.</h3><h3 id="aws-Route-53的5中路由方式"><a href="#aws-Route-53的5中路由方式" class="headerlink" title="aws Route 53的5中路由方式:"></a>aws Route 53的5中路由方式:</h3><ul>
<li>sample routing. 简单匹配dns数据库中的记录, 比如一个域名对应一个IP</li>
<li>weighted routing. 加权路由是按比例分发流量</li>
<li>latency-based routing. 基于延迟时间选择延迟低的分发流量</li>
<li>geolocation routing. 根据用户的IP所在地分发流量, 有时候可能定位用户IP, 那么需要定义一个默认路由, 方式路由出现no answer.</li>
<li>failover routing. 失效转移路由.作为辅助路由, 当主要路由健康检查失败, 那么切换到这个路由.</li>
</ul>
<h3 id="aws有三种提供vpn连接的方式："><a href="#aws有三种提供vpn连接的方式：" class="headerlink" title="aws有三种提供vpn连接的方式："></a>aws有三种提供vpn连接的方式：</h3><ul>
<li>Virtual Private Gateway。VGW是高可用和可扩展的。 给VPC绑定一个VGW, 就可以通过IPsec建立安全连接。 VGW支持静态路由和BGP方式， 如果是静态路由，那么对方网路的IP段不能和VPC相同。</li>
<li>AWS VPN CloudHub. CloudHub是高可用和可扩展的。如果有多个站点需要建立安全通信，可以使用CloudHUB, 这样不仅可以访问VPC内资源，还可以在站点间建立通信。</li>
<li>第三方的software VPN</li>
</ul>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>使用阿里云的批量计算做SGE</title>
    <url>/2018/05/13/cloud-2018-05-14-aliyun-sge/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>阿里云批量计算支持SGE集群, 版本是GE6.2, 只支持centos. 使用aliyun镜像市场已经打包好的镜像可以方便的起一个集群, 然后使用<code>batchcompute_sge</code>sdk管理和定制自己想要的sge集群特性, 比如动态扩展执行节点.</p>
<h2 id="SGE是什么"><a href="#SGE是什么" class="headerlink" title="SGE是什么?"></a>SGE是什么?</h2><p>Sun Grid Engine (SGE)是一个经典的UNIX批量计算调度系统. SGE可以使用网格有效地利用计算资源, 把节点的CPU当成slots来分配资源, 而不用管计算资源是何种结构. 理论上, 只要网络稳定, 一个简单的sge安装就可以满足小量用户使用而不需要任何维护. 但是SGE的背后是复杂的, 真正掌握SGE可能需要6到12个月. SGE具备一个典型的批量计算特征:</p>
<ul>
<li>接受外部job请求</li>
<li>可以暂存未运行job</li>
<li>把暂存的job送到一个或多个执行节点</li>
<li>管理job运行, 中心化存储结果文件</li>
<li>LOGs<br>SGE的架构主要围绕两个概念构建: queue队列和parallel environment平行环境.</li>
</ul>
<h3 id="sge架构"><a href="#sge架构" class="headerlink" title="sge架构"></a>sge架构</h3><p>SGE由头节点和计算节点组成, master host头节点运行<code>sge_master</code>. 这个守护进程控制GE的调度和组件(队列和job). sge_master维护着组件状态表, 用户访问权限等. sge_master也会处理从执行节点周期性传来的job状态, 负载等信息. 通常头节点也是提交节点和管理节点.<br>计算节点通常运行着<code>sge_execd</code>, 通常是执行节点<code>execution host</code>, 但是也可以是管理节点或提交节点, 不同于在master做管理节点, 把运行节点当管理节点需要注册这台host<code>qconf -ah &lt;hostname&gt;</code>; 提交节点就是用户提交job运行的节点, <code>qconf -as &lt;hostname&gt;</code>可以把一个计算节点作为提交节点. 在运行的job还有一个守护进程<code>sge_shepherd</code>, 它会作如下操作:</p>
<ul>
<li>由<code>sge_execd</code>唤醒用于处理job</li>
<li>设置脚本前置的参数(跑Prolog)和PE</li>
<li>系统调用<code>setuid</code>成为用户</li>
<li>用子进程开始job, 控制job</li>
<li>处理停止,恢复,终止信号, 处理checkpointing</li>
<li>跑Epilog脚本, 清理环境, 关闭PE</li>
</ul>
<h3 id="sge-queue"><a href="#sge-queue" class="headerlink" title="sge queue"></a>sge queue</h3><p>队列是一类对资源需求相似job的容器, 他们能够同时在多个节点运行. 逻辑上说, 队列是并行环境的孩子, 虽然它可以有多个父亲. 一个队列可以在一个节点上, 也可以在多个节点上.<br>在多个节点上的队列叫做服务器场队列, 使用上如同在一个节点上一样. 一个节点也可以有多个队列. 应该把同一个属性的job分到同一个队列, 这样队列上属性的改变会影响到对应job, 比如暂停一个队列会暂停所以队列中的job. 默认安装的队列名是all.q, 可以定义额外的队列用于不同计算资源需求, 这样sge调度器可以选择合适的job到合适的网格节点运行.  </p>
<h3 id="parallel-environment"><a href="#parallel-environment" class="headerlink" title="parallel environment"></a>parallel environment</h3><p>并行环境（PE）是SGE的核心概念，代表了一系列设置，可以告诉Grid Engine如何启动，停止和管理由使用此环境的队列运行的作业. 可以使用PE设置一个队列所有job分配的最大slots, 也可以设置parallel messaging的参数, 用于并行计算. 使用如下命令可以管理PE:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">qconf -spl ##show all pe</span><br><span class="line">qconf -sp &lt;PE name&gt;</span><br><span class="line">qconf -mp &lt;PE name&gt;</span><br><span class="line">qconf -Ap ./my-PE-template.txt</span><br><span class="line">qconf -ape &lt;PE name&gt;</span><br></pre></td></tr></table></figure></div>
<p>创建PE的时候有几个关键属性要注意:</p>
<ul>
<li>slots: job可以占用的最大slots</li>
<li>allocation_rule: 此设置控制如何将作业槽分配给主机。它可以有四个可能的值：<ul>
<li>a number: 每个host会给job槽分配固定数字的slot, 直到满足job slots要求.</li>
<li>$fill_up: 会把当前host所有slots分配给job, 不够再到下一个host请求资源, 直到满足</li>
<li>round_robin: 使用轮询的方式从每个host索取资源, 直到满足job需求</li>
<li>pe_slots: 只占用某一台节点的资源. 这就意味着sge只会把job调度到某个满足slots要求的节点</li>
</ul>
</li>
<li>control_slaves: 控制MPI slaves</li>
<li>job_is_first_task: job是否是并行计算的一部分</li>
<li>accounting_summary: 如果<code>control_slaves</code>设为True, 可以使用这个配置查看子任务的统计信息</li>
</ul>
<h2 id="简单使用sge"><a href="#简单使用sge" class="headerlink" title="简单使用sge"></a>简单使用sge</h2><h3 id="qsub"><a href="#qsub" class="headerlink" title="qsub"></a>qsub</h3><p>使用<code>qsub</code>提交job后, 调度器会对job做调度并且直接返回qsub是否调度成功. 例子:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ qsub -cwd -b y -o my.txt -q all.q@iZuf63555dkqqm58d7dc9nZ hostname</span><br><span class="line">Your job 8 (&quot;hostname&quot;) has been submitted</span><br><span class="line">$ qstat -j 8</span><br><span class="line">==============================================================</span><br><span class="line">job_number:                 8</span><br><span class="line">exec_file:                  job_scripts/8</span><br><span class="line">submission_time:            Tue May 15 11:39:27 2018</span><br><span class="line">owner:                      rookie</span><br><span class="line">uid:                        500</span><br><span class="line">group:                      rookie</span><br><span class="line">gid:                        500</span><br><span class="line">sge_o_home:                 /home/rookie</span><br><span class="line">sge_o_log_name:             rookie</span><br><span class="line">sge_o_path:                 /usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/rookie/bin</span><br><span class="line">sge_o_shell:                /bin/bash</span><br><span class="line">sge_o_workdir:              /home/rookie</span><br><span class="line">sge_o_host:                 iZuf668cj7e7k2ws1y6pdkZ</span><br><span class="line">account:                    sge</span><br><span class="line">cwd:                        /home/rookie</span><br><span class="line">mail_list:                  rookie@iZuf668cj7e7k2ws1y6pdkZ</span><br><span class="line">notify:                     FALSE</span><br><span class="line">job_name:                   hostname</span><br><span class="line">stdout_path_list:           NONE:NONE:my.txt</span><br><span class="line">jobshare:                   0</span><br><span class="line">hard_queue_list:            all.q@iZuf63555dkqqm58d7dc9nZ</span><br><span class="line">env_list:                   </span><br><span class="line">script_file:                hostname</span><br><span class="line">error reason    1:          can&#x27;t get password entry for user &quot;rookie&quot;. Either the user does not exist or NIS error!</span><br><span class="line">scheduling info:            (Collecting of scheduler job information is turned off)</span><br></pre></td></tr></table></figure></div>
<p>上述job执行失败, 由于新创建的用户没有加入sge entry. 如果执行成功会在执行节点的当前目录看到<code>my.txt</code>, 默认是用户家目录. 参数详解:</p>
<ul>
<li>-o <output file>: 输出文件的路径. 如果不指定文件名, 默认采用<job_name>.o<job_id></li>
<li>-e <errorfile>: 指定错误文件, 默认采用 <job_name>.e<job_id>格式</li>
<li>-b y&#x2F;n: 执行的是脚本还是二进制job.</li>
<li>-N [name]: job 名称</li>
<li>-A [account name] 这个job的资源消耗记在谁的头上</li>
<li>-r [y,n]: 这个job是否可重新跑, 默认y</li>
<li>-cwd: qsub的-cwd选项告诉Sun Grid Engine，该作业应该在调用qsub的相同目录中执行</li>
<li>-q: 指定节点上的队列</li>
<li>-S [shell path]: 指定使用哪个shell</li>
<li>-pe <parallel environment> [<number of cores>]: 执行并行job时需要指定CPU核数.  </li>
<li>-l resource&#x3D;value,.. : 指定资源需求, 使job在满足需求的队列上运行. <code>-l</code>可以在qsub, qsh, qrsh, qlogin, qalter上使用. <code>resource</code>这个键值可以是queue或host相关, 可以是queue相关的资源属性:<ul>
<li>qname</li>
<li>hostname</li>
<li>notify</li>
<li>calendar</li>
<li>min_cpu_interval</li>
<li>tmpdir</li>
<li>seq_no</li>
<li>s_rt</li>
<li>h_rt</li>
<li>s_cpu</li>
<li>h_cpu</li>
<li>s_data</li>
<li>h_data</li>
<li>s_stack</li>
<li>h_stack</li>
<li>s_core</li>
<li>h_core</li>
<li>s_rss</li>
<li>h_rss<br>host相关是资源属性有:</li>
<li>slots</li>
<li>s_vmem</li>
<li>h_vmem</li>
<li>s_fsize</li>
<li>h_fsize</li>
</ul>
</li>
</ul>
<h3 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h3><p>有三个参数可以配置输出流</p>
<ul>
<li>-e path_list: 设置标准错误输出流路径</li>
<li>-j y[es]n[o]: 合并标准输出和标准错误流</li>
<li>-o path_list: 设置标准输出路径</li>
</ul>
<h3 id="执行脚本中设置参数"><a href="#执行脚本中设置参数" class="headerlink" title="执行脚本中设置参数"></a>执行脚本中设置参数</h3><p>在job的执行脚本头上写入<code>#$</code>可以设置job的qsub参数, 这样就不需要在命令行输入参数.</p>
<h3 id="指定队列"><a href="#指定队列" class="headerlink" title="指定队列"></a>指定队列</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">qsub -q queue_name job</span><br><span class="line">qsub -q queue_name@hostname job</span><br><span class="line">qsub -q queue_name@@hostgroupname job</span><br><span class="line">qsub -q &#x27;*@@hostgroupname&#x27; job # 可以使用通配符匹配</span><br></pre></td></tr></table></figure></div>

<h3 id="SGE-环境变量继承关系"><a href="#SGE-环境变量继承关系" class="headerlink" title="SGE 环境变量继承关系"></a>SGE 环境变量继承关系</h3><p>execd -&gt; shepherd -&gt; shell -&gt; job, 后续继承的环境变量可以被覆盖</p>
<h3 id="默认job参数-在提交节点设置-HOME-x2F-sge-request"><a href="#默认job参数-在提交节点设置-HOME-x2F-sge-request" class="headerlink" title="默认job参数, 在提交节点设置$HOME&#x2F;.sge_request"></a>默认job参数, 在提交节点设置$HOME&#x2F;.sge_request</h3><p>可以设置以上这个文件来让job启用默认参数, 比如邮件通知方式:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-M &lt;email-address&gt;  # -M root@localhost 邮件会给执行节点root发邮件</span><br><span class="line">-m baes  ## will notify whether job is begin, aborted, end, suspend.  </span><br><span class="line">-v PYTHONPATH ## environment variables</span><br><span class="line">-V   # pass all environment variables, 这个参数可能有bug</span><br><span class="line">-pe smp 2 ## pe settings</span><br></pre></td></tr></table></figure></div>
<p>如下三个文件是默认参数读取的文件, 可以被覆盖.<br>$SGE_ROOT&#x2F;$SGE_CELL&#x2F;common&#x2F;sge_request<br>$HOME&#x2F;.sge_request<br>$PWD&#x2F;.sge_request</p>
<h3 id="qdel-job-id"><a href="#qdel-job-id" class="headerlink" title="qdel job_id"></a>qdel job_id</h3><h3 id="qhost-查看所有节点状态"><a href="#qhost-查看所有节点状态" class="headerlink" title="qhost 查看所有节点状态"></a>qhost 查看所有节点状态</h3><h3 id="qstat-查看queue和job的状态"><a href="#qstat-查看queue和job的状态" class="headerlink" title="qstat 查看queue和job的状态"></a>qstat 查看queue和job的状态</h3><p>qstat输出的job<code>state</code>有d(eletion),  E(rror), h(old), r(unning), R(estarted),q(ueued), s(uspended), S(uspended), t(ransfering), T(hreshold) or w(aiting).  <code>qstat -explain c -j &lt;job_id&gt;</code>可以查看具体job跑失败的原因. 下面是一些例子:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">qstat -u &#x27;*&#x27; Displays list of all jobs from all users.</span><br><span class="line">qstat -g c    show available nodes and load</span><br><span class="line">qstat -u joeuser  -- useful in seeing list of jobs from particular user. Especially when particular user job are having troubles</span><br><span class="line">qstat -u hpc1***: Displays list of all jobs belonging to user hpc1***</span><br><span class="line">qstat -f: gives full information about jobs and queues. Provides a full listing of the job that has the listed Job ID (or all jobs if no Job ID is given).  See qstat -f below.</span><br><span class="line">qstat -j job_number -- provide detailed information why the pending job is not being scheduled. See qstat -j below</span><br><span class="line">qhost -F</span><br><span class="line">qstat -g t -- command is useful for showing where all of your parallel tasks are running, otherwise you only see where the &quot;master&quot; task (MPI task #0) is running.</span><br><span class="line">qstat -s p shows pending jobs, which is all those with state &quot;qw&quot; and &quot;hqw&quot;.</span><br><span class="line">qstat -s h shows hold jobs, which is all those with state &quot;hqw&quot;.</span><br></pre></td></tr></table></figure></div>

<h2 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h2><p>SGE有4个角色: Managers, Operators, Owners, Users.</p>
<ul>
<li>Managers: 就是admin, 具有有权限</li>
<li>Operators: 除了没有add, delete, modify队列, 具有manager所有权限.</li>
<li>Owners: 队列拥有者, 可以对他所有的队列做任何操作.</li>
<li>Users: 没有管理集群和队列的权限, 只能使用队列.</li>
</ul>
<h3 id="配置用户Access-list"><a href="#配置用户Access-list" class="headerlink" title="配置用户Access list"></a>配置用户Access list</h3><p>只要用户在一个提交节点和一个执行节点有ID, 那么就可以使用SGE. 但是管理员可以限制用户对某些队列的访问限制, 也可以限制对一些工具的使用比如PE. 指定访问权限需要定义<code>User Access List</code>, 可以使用unix的user和group定义user access list. 然后根据这个list来限制对资源的读写权限.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">qconf -au username[,...] access-list-name[,...]</span><br><span class="line">qconf -sul ##查看所有user access list</span><br></pre></td></tr></table></figure></div>

<h2 id="使用sdk调整执行节点"><a href="#使用sdk调整执行节点" class="headerlink" title="使用sdk调整执行节点"></a>使用sdk调整执行节点</h2><ul>
<li>调整队列</li>
<li>调整执行节点</li>
<li>调整host subgroups<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">qconf -ahgrp &lt;hostgroupname&gt;  ## add host group to group list</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="SGE节点组的概念"><a href="#SGE节点组的概念" class="headerlink" title="SGE节点组的概念"></a>SGE节点组的概念</h2><p>就像Unix操作系统一样, 可以把节点分组, 组名用@开头. 组和组可以嵌套, 叫做subgroups(和&#x2F;etc&#x2F;group不同)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">qconf -shgrpl</span><br><span class="line">@allhosts</span><br></pre></td></tr></table></figure></div>

<h2 id="执行节点动态拓展"><a href="#执行节点动态拓展" class="headerlink" title="执行节点动态拓展"></a>执行节点动态拓展</h2><p>使用<code>qstat -u &#39;*&#39; -s p</code>检查<code>qw</code>或<code>hwq</code>队列的长度, 相应地启动执行节点进行动态拓展; 同时当队列为空时, 减少执行节点到一定数目</p>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS和Route53简介</title>
    <url>/2018/10/26/cloud-2018-10-27-DNS-and-Route53/</url>
    <content><![CDATA[<h2 id="DNS基本概念"><a href="#DNS基本概念" class="headerlink" title="DNS基本概念"></a>DNS基本概念</h2><p>DNS(Domain Name Service)是人们使用英特网的基础服务，DNS提供的服务就像一个电话本一样, 计算机可以用它找到域名对应的IP地址。<code>DNS</code>采用层级的结构， 不同层采用<code>.</code>来分层。顶层是root, 用一个<code>.</code>表示，后面就是TLD了。<br><code>Top Level Domain</code>(TLD)顶级域名是域名中的最后一个部分， 比如<code>.com</code>. TLD又分为通用顶级域名和地域顶级域名如<code>.cn</code>. <code>Internet Corporation for Assigned Names and Numbers</code>(ICANN)<br>负责管理和分配部分顶级域名， 这些顶级域名下可以再分配我们常见的域名，这些域名会在<code>Network Information Center</code>(InterNIC)注册， 每个域名会在一个叫<code>Whois</code>的数据库注册， 以维护域名的唯一性。<br>这里有一个误区，域名如<code>example.com</code>, 一般所说的二级域名是应该是<code>example</code>(而国内的运营商叫做一级域名, .com叫顶级域名)， 其他的二级域名&#x2F;三级依次往后叫.</p>
<h3 id="host和Subdomain"><a href="#host和Subdomain" class="headerlink" title="host和Subdomain"></a>host和Subdomain</h3><p>有了域名， 域名拥有者可以把自己的服务或主机定义成<code>host</code>, 比如大部分的web服务都可以通过<code>www</code>这个<code>host</code>访问。<br><code>TLD</code>是可以被按层级扩展成多个子域名的。如<code>example.com</code>中<code>example</code>就是<code>SLD</code>(Second-level domain), 又如<code>sina.com.cn</code>中<code>.com</code>是<code>SLD</code>. <code>SLD</code>和<code>host</code>主要的区别在于host定义的是一个资源，<br>而<code>SLD</code>是一个域名的扩展。不管是<code>SLD</code>还是<code>host</code>, 我们都从域名的左边读起， 可以看到越左边的部分意义越具体。</p>
<h3 id="Name-Server"><a href="#Name-Server" class="headerlink" title="Name Server"></a>Name Server</h3><p>名字服务器就是实际把域名解析成Ip的服务器。由于域名实在太多，名字服务器需要转发解析请求到其他服务器。如果某个域名是这台名字服务器管理的， 那么这个NS的解析相应我们认为是权威的。（<code>authoritative</code>）</p>
<h3 id="Zone-file"><a href="#Zone-file" class="headerlink" title="Zone file"></a>Zone file</h3><p><code>zone file</code>区域档案是DNS服务器存储域名和IP映射记录的文本。一个<code>zone file</code>定义了一个dns域, 多个<code>zone file</code>通常用来定义一个域。每个文件中的记录称为资源记录（<code>resource record</code>）。<br><code>zone file</code>有两个指令需要注意， 一个是<code>$ORIGIN</code>参数设定， 代表了本NS管理的域。<code>$TTL</code>表示解析记录在缓存中默认过期时间。</p>
<h3 id="DNS-Record-Types"><a href="#DNS-Record-Types" class="headerlink" title="DNS Record Types"></a>DNS Record Types</h3><ul>
<li><code>SOA Start Of Authority</code>, 每个区域文件的一条强制记录， 记录每个域的dns基本信息，具体包括：<ul>
<li>这个区域的DNS server名称</li>
<li>这个区域的管理员</li>
<li>当前文件的版本</li>
<li>二级域名服务器重试、更新、过期信息的时间设置</li>
<li>RR的TTL默认时间</li>
</ul>
</li>
<li><code>A</code> and <code>AAAA</code>. <code>A</code>把一个<code>host</code>映射到IPv4地址， <code>AAAA</code>映射到IPv6地址。</li>
<li><code>CNAME</code> 别名.可以为你的<code>A</code>或者<code>AAAA</code>记录映射的服务取别名.</li>
<li><code>MX</code>(Mail Exchange), 邮件交换主机记录. 此记录是用来宣告一个域底下哪一个<code>A</code>记录为专门负责邮件进出. 由于一个网域底下的<code>MX</code>记录可以超过一笔, 所以, 在众多<code>MX</code>记录里要排列出优先順序就必须倚靠<code>MX</code>记录里的另一项设定—<code>Preference</code>值, 值越小, 优先权越高, 最小的值为0. 同时<code>MX</code>不能指向<code>CNAME</code>.</li>
<li><code>NS</code>(Name Server). 指定哪个<code>Name Server</code>可以得到某个域名的权威解析, 用于TLD顶级域名服务器解析会用到.</li>
<li><code>PTR</code>(Pointer)反向解析, 把IP解析到域名.</li>
<li>aws还支持一种叫<code>alias</code>的record, 指向aws的某个公网服务。</li>
</ul>
<h3 id="Fully-Qualified-Domain-Name-FQDN"><a href="#Fully-Qualified-Domain-Name-FQDN" class="headerlink" title="Fully Qualified Domain Name(FQDN)"></a>Fully Qualified Domain Name(FQDN)</h3><p>按ICANN的标准FQDN是需要按<code>.</code>结尾的，虽然通常我们并没有这么做. 具体语法如下图所示<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/fqdn-explained.jpg" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/fqdn-explained.jpg"></p>
<h3 id="浏览器解析DNS步骤"><a href="#浏览器解析DNS步骤" class="headerlink" title="浏览器解析DNS步骤"></a>浏览器解析DNS步骤</h3><p>浏览器输入域名后， 从域名解析到实际的IP, 会走如下步骤：</p>
<ul>
<li>计算机先检查浏览器缓存是否存在， 如果是使用chrome, 可以在地址栏输入<code>chrome://net-internals/#dns</code>查看缓存信息。</li>
<li>浏览器的缓存有一些限制， 比如缓存的条目数只有1000等等，所以如果不命中缓存， 那么就会查询本地hosts文件是否存在对应的ip。</li>
<li>如果还是不中那么检查服务器端设置的域名解析服务器<code>Resolving Name Servers</code>（<code>/etc/resolv.conf</code>设置的DNS首选项）缓存是否命中。</li>
<li>如果还是没有命中，那么就会查询<code>Resolving Name Servers</code>(通常是ISP供应商提供)。后续还会往root服务器迭代查询， root服务器又会重定向到TLD服务器，TLD再重定向到<code>Domain-Level Name Servers</code>等等。 但是基本上是本地设置的DNS服务器帮助用户做了和上层服务的交互。<br>下图很好解释流整个dns解析流程.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-28%20%E4%B8%8B%E5%8D%887.51.42.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-28%20%E4%B8%8B%E5%8D%887.51.42.png"></li>
</ul>
<h3 id="Route53提供的服务"><a href="#Route53提供的服务" class="headerlink" title="Route53提供的服务"></a>Route53提供的服务</h3><p>Route53提供三个服务：域名注册，DNS服务，健康检查。</p>
<h3 id="使用Route53和其他服务提高系统韧性"><a href="#使用Route53和其他服务提高系统韧性" class="headerlink" title="使用Route53和其他服务提高系统韧性"></a>使用Route53和其他服务提高系统韧性</h3><ol>
<li>每个区域有一个负载均衡器， 均衡器下的服务器分布在不同可用区。</li>
<li>每个可用区都需要是自动伸缩。</li>
<li>负载均衡器需要设置健康检查。</li>
<li>每个负载均衡器上面是Route53， Route53设置别名记录<code>alias record</code>指向每个负载均衡器， 同时设置路由规则采用最小延时规则， 开启每个均衡器的健康检查。</li>
<li>所有静态和动态内容使用CDN缓存。</li>
</ol>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS的VPC组件</title>
    <url>/2018/11/04/cloud-2018-11-05-aws-internet-gateway/</url>
    <content><![CDATA[<h3 id="IGW"><a href="#IGW" class="headerlink" title="IGW"></a>IGW</h3><p><code>Internet Gateway</code>(IGW)是一个水平扩展, 冗余, 高可用的aws VPC组件. 主要的作用是能让你的VPC和英特网连接. 一个<code>IGW</code>可以作为<code>VPC</code>路由表中的<code>target</code>, 会把虚机的IP地址做NAT(网络地址转换), 以让英特网认为私有的虚机具有公网的IP, 从而做到私有虚机和英特网能够通讯.</p>
<h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><p><code>Dynamic Host Configuration Protocal</code>(DHCP)提供了一个标准用于通过TCP&#x2F;IP传输配置信息给主机.</p>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>aws, vpc, igw, acl</tag>
      </tags>
  </entry>
  <entry>
    <title>一台虚机多个IP</title>
    <url>/2018/12/09/cloud-2018-12-10-one-instance-multiple-ip/</url>
    <content><![CDATA[<p>一个云主机可以被分配多个IP, 这样做的好处有:</p>
<ul>
<li>一台虚机运行多个web应用, 然后每个ip一个应用,每个ip一张ssl证书</li>
<li>防火墙或者负载均衡器需要多个IP</li>
<li>如果一台虚机宕机, 那么可以把多个ip的一个转移到另一台备用主机, 做到高可用.<br>下面以AWS为例子介绍一台主机多个IP是怎么工作的.</li>
</ul>
<h3 id="多个IP地址是如何工作的"><a href="#多个IP地址是如何工作的" class="headerlink" title="多个IP地址是如何工作的?"></a>多个IP地址是如何工作的?</h3><p>ip需要绑定到网卡, 以下主要以IPv4为例做介绍</p>
<ul>
<li>多个IPv4私有地址可以绑定到任何网路接口, 网路接口可以绑定或解绑到主机.</li>
<li>IPv4的地址必须是在子网的网段内</li>
<li>网路接口是有安全组的, 所以对应的IP就应该遵循这个安全组规则.</li>
<li>多个IP地址可以被分配给网路接口, 网路接口可以是绑定到运行着或者非运行着的主机.</li>
<li>一个已经被分配的ip可以从一个网卡分配到另一个网卡.</li>
<li>虽然主机的主网卡不能被移走, 但是主网卡的第二个ip可以被移动到另一个网卡.</li>
<li>每一个IPv4地址可以被分配一个弹性IP, 反之亦然</li>
<li>当一个Ipv4的私有地址被分配到另一个网卡时, 它对应的弹性IP会跟随移走.</li>
<li>当一个IPv4私有地址从网卡移走, 那么弹性IP会自动和这个IP解绑.</li>
</ul>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>现有基因大数据云平台简单比较</title>
    <url>/2018/12/10/cloud-2018-12-11-current-genomics-solutions/</url>
    <content><![CDATA[<h3 id="大背景"><a href="#大背景" class="headerlink" title="大背景"></a>大背景</h3><p>大药厂一般会搭建自己的内部分析平台或者数据仓库, 用于聚合不同的数据, 这些数据可能来自化学或生物的论文, 可穿戴设备, 或基因组学数据等等. 基于这些数据得出一些统计分析, 药厂能够加速创新研发, 同时保持在AI方面的跟进. 但是在整合基因数据到药厂自己的分析系统时, 大部分公司往往力不从心. 这里面主要原因是由于基因数据的多维复杂度和数据量, 使得药厂需要一批既懂生信又懂计算机科学的人才, 而这样的人往往又不好招. 所以用于分析基因数据的专有云面世了, 本文主要对现有的国外基因数据分析平台做一个简单比较.</p>
<h3 id="PasS比较"><a href="#PasS比较" class="headerlink" title="PasS比较"></a>PasS比较</h3><p>|—————–+————+—————–+—————-|</p>
<table>
<thead>
<tr>
<th>产品</th>
<th align="left">商业&#x2F;学术</th>
<th>特点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>Google Variant Transforms</td>
<td align="left">商业</td>
<td>google出品</td>
<td>只支持部分变异varaints, 查询有限制, 企业级支持有限</td>
</tr>
<tr>
<td>Cloudera + Databricks</td>
<td align="left">商业</td>
<td>基于spark+hadoop的云, 企业级大数据咨询服务, 与大部分IasS是合作伙伴</td>
<td>NGS数据经验有限, 不能直接支持基因序列查询, spark基于列式数据库不适合基因这样有顺序的数据结构</td>
</tr>
<tr>
<td>PLINK</td>
<td align="left">学术</td>
<td>开源,  偏学术分享</td>
<td>缺少企业级支持, 需要devops去部署和集成</td>
</tr>
<tr>
<td>Broad Fire Cload</td>
<td align="left">学术</td>
<td>出自broad, 有workflow工具支持查询<code>hail</code>, 支持定制化</td>
<td>缺少企业级支持, 需要devops部署和集成系统, 产品被设计成一个学术型沙盒而不是企业级产品</td>
</tr>
<tr>
<td>—————–+————+—————–+—————-</td>
<td align="left"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Hail</td>
<td align="left">都有</td>
<td>开源, Broad出品</td>
<td>对变异有限制, 缺少企业级支持,数据需要建索引,需要devops团队支持</td>
</tr>
<tr>
<td>Paradigm4</td>
<td align="left">商业</td>
<td>数据库技术先进, 支持可穿戴设备的数据</td>
<td>没有NGS数据的经验, 缺少针对基因数据库的扩展性设计和分析引擎设计</td>
</tr>
<tr>
<td>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</td>
<td align="left"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Seven Bridges Sonar</td>
<td align="left">商业</td>
<td>二级分析平台</td>
<td>缺少针对基因数据库的扩展性设计和分析引擎设计</td>
</tr>
<tr>
<td>BC Platforms</td>
<td align="left">商业</td>
<td>平台强于<code>micro-array</code>数据,对于基因型有较好的服务</td>
<td>缺少针对基因数据库的扩展性设计和分析引擎设计, 缺少NGS数据经验</td>
</tr>
<tr>
<td>—————–+————+—————–+—————-</td>
<td align="left"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>现在市面上还没有一款产品能够解决上述大药厂的烦恼, 要真正能够开发一款这样的产品, 可能需要做到如下几点:</p>
<ul>
<li>易于部署</li>
<li>易于集成. 方便集成药厂现有的工作流&#x2F;工具, 无论是通过API方式还是其他方式.</li>
<li>ETL的能力. 标准化各种基因数据的能力.</li>
<li>最好有一个开放的社区支持.</li>
<li>较平的学习曲线</li>
<li>易于自定义工作流</li>
<li>能和其他大数据工具和机器学习平台整合.</li>
</ul>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>cloud, big data</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库ETL的两个设计主线</title>
    <url>/2020/11/21/data-warehouse-2020-11-22-etl-toolkit/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据仓库ETL有两个设计主线, 其一为规划与设计主线, 其二为数据主线.</p>
<h2 id="规划-amp-设计主线"><a href="#规划-amp-设计主线" class="headerlink" title="规划&amp;设计主线"></a>规划&amp;设计主线</h2><p>规划与设计分为四步骤:需求&#x2F;现状 -&gt; 架构 -&gt; 实现 -&gt; 测试&#x2F;发布. 每个步骤又有相应的具体问题考虑.</p>
<p>*** 需求与现状 ***</p>
<ul>
<li>业务需求</li>
<li>数据评估和数据源现状</li>
<li>监察需求</li>
<li>安全需求</li>
<li>数据集成</li>
<li>数据延迟</li>
<li>归档和沿袭</li>
<li>最终用户提交界面</li>
<li>可用的开发技能</li>
<li>可用的管理技能</li>
<li>已有的许可证</li>
</ul>
<p>*** 架构 ***</p>
<ul>
<li>手工编码还是使用ETL工具</li>
<li>批处理还是流数据处理</li>
<li>水平任务依赖还是垂直任务依赖</li>
<li>自动调度</li>
<li>异常处理</li>
<li>质量控制</li>
<li>恢复与重启</li>
<li>元数据</li>
<li>安全</li>
</ul>
<p>*** 实现 *** </p>
<ul>
<li>硬件</li>
<li>软件</li>
<li>编码</li>
<li>文档</li>
<li>特定质量检查</li>
</ul>
<p>*** 测试&#x2F;发布 ***</p>
<ul>
<li>开发系统</li>
<li>测试系统</li>
<li>生产系统</li>
<li>提交过程</li>
<li>升级方案</li>
<li>系统快照和回滚过程</li>
<li>性能调优</li>
</ul>
<h2 id="数据主线"><a href="#数据主线" class="headerlink" title="数据主线"></a>数据主线</h2><p>数据流:抽取 -&gt; 清洗 -&gt; 规格化 -&gt; 提交. 每个数据流步骤都可以用运行步骤来监控:</p>
<ul>
<li>调度</li>
<li>作业执行</li>
<li>异常处理</li>
<li>恢复和重启</li>
<li>质量检查</li>
<li>发布</li>
<li>支持</li>
</ul>
<p>*** 抽取 ***</p>
<ul>
<li>读取源数据模型</li>
<li>连接并访问数据</li>
<li>调度源系统，截取通知和后台程序</li>
<li>捕获变化数据</li>
<li>将抽取的数据集结到磁盘</li>
</ul>
<p>*** 清洗 ***</p>
<ul>
<li>强制列属性</li>
<li>强制结构</li>
<li>强制数据和数值规则</li>
<li>强制复杂业务规则</li>
<li>创建元数据来描述数据质量</li>
<li>将清洗后的数据集结到磁盘</li>
</ul>
<p>*** 规格化 ***</p>
<ul>
<li>业务标志（在维表中）的规格化</li>
<li>业务度量和绩效指标（在事实表中）的规格化</li>
<li>复制</li>
<li>家庭关联信息的规格化（Householding）</li>
<li>国际化</li>
<li>将规格化的数据集结到磁盘</li>
</ul>
<p>*** 提交 ***</p>
<ul>
<li>加载平面型和雪花型维度</li>
<li>生成时间维度</li>
<li>加载退化维度</li>
<li>加载子维度</li>
<li>加载缓慢变化维（包括类型 1、 2、 3）</li>
<li>规格化维和规格化事实</li>
<li>处理迟到维和迟到事实</li>
<li>加载多值维</li>
<li>加载ragged层次维</li>
<li>加载维中的文本型事实</li>
<li>为事实表运行代理健pipeline</li>
<li>加载三种基础事实表粒度</li>
<li>加载和更新聚合表</li>
<li>将提交数据集结到磁盘</li>
</ul>
]]></content>
      <categories>
        <category>data warehouse</category>
      </categories>
      <tags>
        <tag>db, data warehouse</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Governance Guide</title>
    <url>/2021/05/06/data-warehouse-2021-05-07-data-governance-guide/</url>
    <content><![CDATA[<h2 id="What-is-data-governance"><a href="#What-is-data-governance" class="headerlink" title="What is data governance?"></a>What is data governance?</h2><p>根据DGI定义: <code>Data Governance is a system of decision rights and accountabilities for information-related processes, executed according to agreed-upon models which describe who can take what actions with what information, and when, under what circumstances, using what methods</code> 数据治理指的是对数据相关事宜的决策制定与权利控制。具体来说，数据治理是处理信息和实施决策的一个系统，即根据约定模型实施决策，包括实施者、实施步骤、实施时间、实施情境以及实施途径与方法。<br>数据治理是业务流程, 角色, 规则, 标准和指标的集合, 为了让企业能够有效, 高效地使用信息以到达企业的目标. 数据治理需要建立流程和职责使得数据的质量和安全性在业务使用数据时中得到保证. 数据治理定义了谁可以在什么情况下对什么数据进行何种数据的操作. 一个好的数据治理框架需要覆盖策略, 战术, 和操作人员的角色和职责.</p>
<p>一般情况下, 业务会驱动数据治理的策略, 如哪些数据需要仔细的监管. 所以业务规则是数据治理策略制定的基础之一. 举个例子, 如果一个业务驱动的需求是保证健康相关数据的隐私性, 那么治理策略就应该保证数据流被安全地处理. 留存需求如历史上谁在什么时候改了信息等, 这些需求需要能够满足相关监管的要求, 如GDPR和CCPA.</p>
<h3 id="良好数据治理的好处"><a href="#良好数据治理的好处" class="headerlink" title="良好数据治理的好处"></a>良好数据治理的好处</h3><ul>
<li>通用数据的理解. 良好治理能够提供一致的角度, 通用的术语对于数据来说.</li>
<li>数据质量提升. </li>
<li>数据地图. 帮助理清数据的来源位置</li>
<li>360视图. </li>
<li>一致性合规.</li>
<li>容易访问.</li>
</ul>
]]></content>
      <categories>
        <category>data warehouse</category>
      </categories>
      <tags>
        <tag>db, data governance</tag>
      </tags>
  </entry>
  <entry>
    <title>Slow Change Dimension in DW</title>
    <url>/2021/06/17/data-warehouse-2021-06-18-SCD/</url>
    <content><![CDATA[<h2 id="What-is-Slow-Change-Dimension"><a href="#What-is-Slow-Change-Dimension" class="headerlink" title="What is Slow Change Dimension"></a>What is Slow Change Dimension</h2><p><code>SCD</code>缓慢变化维是指维度的值会随着时间缓慢变化. 当维度值变化时, 我们可以直接把旧的值覆盖, 也可以存储一行新的值(把旧的记录无效), 还可以加一个字段使用列式存储新的值. 所以基本上<code>SCD</code>有几种类型:</p>
<ul>
<li>type 1, 覆盖旧的值, 不保留历史信息</li>
<li>type 2, 保留旧的值, 使用一个字段表示它无效, 插入一行新的维度记录. 每行增加<code>effective_date</code>, <code>expiry_date</code>字段</li>
<li>type 3, 保留旧的值, 仅增加几个新的字段存储几个历史版本值, 增加<code>effective_date</code>字段</li>
<li>type 4, 把历史数据存入另一个表中, 当前维表保存最新的数据</li>
</ul>
<h3 id="Comparison-of-type2-and-type3"><a href="#Comparison-of-type2-and-type3" class="headerlink" title="Comparison of type2 and type3"></a>Comparison of type2 and type3</h3><p>type2通常情况下可以满足大部分需要保留历史数据的需求, 但是如果一次插入行的记录过多的话, 也可以考虑使用type3. type3的确定是只能保留固定的版本数量, 但是我们不知道需要几个版本记录需要保留.</p>
<h3 id="How-slow-is-slow"><a href="#How-slow-is-slow" class="headerlink" title="How slow is slow?"></a>How slow is slow?</h3><p>一般缓慢的程度以一个季度作为分界点, 如果维度一个月就会变化, 就应该以其他方式处理. 但是如上的表述往往是不准确的, 一个维度中可能有几个维度是快速变化的,而有几个不怎么变化, 那么还需要从几个方便考虑:</p>
<ul>
<li>维度表的行数, 如果行数越多可能越有可能不是缓慢变化维</li>
<li>维表中一个维度属性和其它属性的耦合关系, 越松耦合越可能这个属性是快速变化维</li>
<li>第三是如果维表中其它属性都不怎么变化, 而某个属性经常变化, 那么这个属性是快速变化维</li>
</ul>
<p>针对SCD中某几个属性是快速变化维的情况, 我们有单独的处理方式.</p>
<h3 id="Rapidly-Change-Dimension"><a href="#Rapidly-Change-Dimension" class="headerlink" title="Rapidly Change Dimension"></a>Rapidly Change Dimension</h3><p>那么我们怎么处理快速变化维呢? 很简单, 只需要把这个维度放入事实表就行. 这种维度属性我们叫<code>degenerate dimension</code>退化维度.</p>
]]></content>
      <categories>
        <category>data warehouse</category>
      </categories>
      <tags>
        <tag>data warehouse, scd</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Quality Overview</title>
    <url>/2021/06/18/data-warehouse-2021-06-19-Data-Quality/</url>
    <content><![CDATA[<h2 id="The-importance-of-data-quality"><a href="#The-importance-of-data-quality" class="headerlink" title="The importance of data quality"></a>The importance of data quality</h2><p>数据质量对于数据报表至关重要, 数据的准确性(<code>Accuracy</code>), 完整性(<code>Completeness</code>), 一致性(<code>Consistency</code>), 精确性(<code>Precision</code>)和时效性(<code>timeliness</code>)这几个指标是评价数据质量的核心指标. 数据没有质量我们将构建数据仓库的意义将不复存在, 没有人相信一个数据不正确的数据仓库.</p>
<h3 id="Data-cleaning-amp-matching"><a href="#Data-cleaning-amp-matching" class="headerlink" title="Data cleaning &amp; matching"></a>Data cleaning &amp; matching</h3><p>数据清洗用于处理脏数据, 同时也用于识别相同的数据, 一般用到三种逻辑:</p>
<ul>
<li>exact</li>
<li>fuzzy</li>
<li>rule-based, 包括<code>incoming data, cross-reference, and internal rules</code></li>
</ul>
<h3 id="Action-to-violated-data"><a href="#Action-to-violated-data" class="headerlink" title="Action to violated data"></a>Action to violated data</h3><p>当一个数据违反数据规则时, 我们有多种处理方案: </p>
<ul>
<li>拒绝数据进入仓库</li>
<li>允许数据进入仓库</li>
<li>修正数据</li>
</ul>
<h3 id="DQ-process"><a href="#DQ-process" class="headerlink" title="DQ process"></a>DQ process</h3><p>数据质量的控制一般分为三步: </p>
<ul>
<li>检查, </li>
<li>报告,</li>
<li>修正.</li>
</ul>
<p>如下图所示是一般的DQ流程.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/screenshots/screen_dq_process.png"
                     
                ></p>
]]></content>
      <categories>
        <category>data warehouse</category>
      </categories>
      <tags>
        <tag>data warehouse, data quality</tag>
      </tags>
  </entry>
  <entry>
    <title>Metadata in Data Warehouse</title>
    <url>/2021/07/12/data-warehouse-2021-07-04-metadata-database/</url>
    <content><![CDATA[<h2 id="What-is-metadata"><a href="#What-is-metadata" class="headerlink" title="What is metadata?"></a>What is metadata?</h2><p><code>Metadata</code>元数据是描述数据的数据。举个例子，一是原始单反拍摄的照片一般是RAW格式，这个格式的文件会附带一些属性信息，如Etag, 描述照片拍摄的时间，拍摄的相机，曝光ISO, 分辨率等等信息，<br>这些信息就是照片的元数据。</p>
<h2 id="Why-do-we-need-metadata"><a href="#Why-do-we-need-metadata" class="headerlink" title="Why do we need metadata?"></a>Why do we need metadata?</h2><p>为什么需要元数据, 主要为了向用户解释数据和数据仓库, 让用户更好地理解数据仓库. </p>
<h2 id="Metadata-in-data-warehouse"><a href="#Metadata-in-data-warehouse" class="headerlink" title="Metadata in data warehouse"></a>Metadata in data warehouse</h2><p>在数据仓库中存在7种元数据:</p>
<ul>
<li>数据结构元数据，描述每张表的表结构. 描述NDS, DDS, ODS和staging库中所有表结构, 包括<code>collation</code>(字符序). 这些信息大部分可以通过<code>object catalog view</code>拿到, 但是ETL元数据, DQ元数据, 数据定义元数据也需要结构信息, 所以我们需要单独创建这个库.</li>
<li>数据定义和数据映射元数据，分别描述事实表和维度表的字段意义和来源。为了避免混淆和误解, 必须有一个清晰, 全公司都能理解的字段定义. 数据映射元数据有时候也叫数据血缘（<code>data linage metadata</code>）, 数据血缘可以用于数据影响性分析。</li>
<li>数据源的元数据，描述原始数据库表结构和字段意义. 具体包含数据类型, 字符序, 主键, 外键, 视图, 索引和分区.</li>
<li>ETL元数据，描述每个ETL流程中的每个数据流. 描述数据的流向, 所经过的转换, 父流程和定时任务.</li>
<li>数据质量元数据，描述数据质量规则，对应的风险和措施.</li>
<li>审计元数据，包含了所有数据仓库中的流程和活动.</li>
<li>用量（<code>Usage metadata</code>）元数据，描述数据仓库的使用情况.</li>
</ul>
]]></content>
      <categories>
        <category>data warehouse</category>
      </categories>
      <tags>
        <tag>metadata, data warehouse</tag>
      </tags>
  </entry>
  <entry>
    <title>Three type of data model</title>
    <url>/2021/08/08/data-warehouse-2021-08-09-data-modeling-type/</url>
    <content><![CDATA[<h2 id="Three-Types-of-Data-Models"><a href="#Three-Types-of-Data-Models" class="headerlink" title="Three Types of Data Models"></a>Three Types of Data Models</h2><p>一般主要有三种数据模型<a class="link"   href="https://dl.acm.org/doi/book/10.5555/1594814" >数据模型定义 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>:</p>
<ul>
<li>概念模型</li>
<li>逻辑模型 </li>
<li>物理模型</li>
</ul>
<p>这三种模型可以使用工具来建模<a class="link"   href="https://en.wikipedia.org/wiki/Comparison_of_data_modeling_tools" >工具列表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. 我们通常先创建概念数据模型，然后再做逻辑数据模型。</p>
<h3 id="概念数据模型"><a href="#概念数据模型" class="headerlink" title="概念数据模型"></a>概念数据模型</h3><p>概念数据模型用于定义高层业务抽象和概念。通常是业务所有者绘制，建模时不用考虑具体系统的约束。使用SQL Server的SSMS可以很好地建模，一般使用SSMS创建概念模型的流程是：</p>
<ol>
<li>创建数据库关系图</li>
<li>在可编程性栏目下， 创建用户定义数据类型(可选)</li>
<li>在关系图画布下，创建只包含主键的维表和事实表。</li>
<li>使用拖拉关联事实表和维表外键关系</li>
<li>自动调整表大小和自动布局</li>
</ol>
<h3 id="逻辑数据模型"><a href="#逻辑数据模型" class="headerlink" title="逻辑数据模型"></a>逻辑数据模型</h3><p>逻辑数据模型用于指定实体的所有属性，并且识别实体之间的关系。逻辑模型通常是数据架构师定义的，用于业务分析。</p>
<h3 id="物理数据模型"><a href="#物理数据模型" class="headerlink" title="物理数据模型"></a>物理数据模型</h3><p>物理数据模型是把具体的逻辑数据模型使用某个数据库去具体实现。数据库开发者通常使用这个物理模型去做具体的开发工作。</p>
]]></content>
      <categories>
        <category>data warehouse</category>
      </categories>
      <tags>
        <tag>data warehouse, data model</tag>
      </tags>
  </entry>
  <entry>
    <title>企业级主数据治理框架</title>
    <url>/2021/10/24/data-warehouse-2021-10-25-master-data-governance/</url>
    <content><![CDATA[<h2 id="1-Introduction-介绍"><a href="#1-Introduction-介绍" class="headerlink" title="1. Introduction 介绍"></a>1. Introduction 介绍</h2><h3 id="1-1-什么是主数据？"><a href="#1-1-什么是主数据？" class="headerlink" title="1.1 什么是主数据？"></a>1.1 什么是主数据？</h3><p>主数据是以与业务活动相关的通用和抽象概念形式提供业务活动语境的数据，包括业务活动中涉及内部和外部对象的详细信息(定义与标识符)。一般主数据使用业务实体来表示，如客户、产品、雇员、供应商等数据，实体是客观世界的对象(人、组织、地方或事物等)，实体被实例以数据&#x2F;记录的形式表示。</p>
<h3 id="1-2-为什么需要管理主数据？"><a href="#1-2-为什么需要管理主数据？" class="headerlink" title="1.2 为什么需要管理主数据？"></a>1.2 为什么需要管理主数据？</h3><p>常见的主数据管理驱动因素有：</p>
<ol>
<li>满足组织数据的需求。组织中的多个业务领域需要访问相同的数据集，并且这些数据集是完整的、最新的、一致的。</li>
<li>管理数据质量。主数据管理通过使用统一的表示来定义对组织至关重要的实体，以降低由于数据不一致、质量和差异等问题对决策失误和机会错失的风险。</li>
<li>管理数据集成的成本。主数据管理需要将关键实体集成到统一的系统中，减少对因对关键实体定义和识别方式变化而产生的额外成本。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-10/master_data_semantics.png"
                     
                ><center>图1. 主数据语境关系图</center></li>
</ol>
<h3 id="1-3-主数据管理的目标和原则"><a href="#1-3-主数据管理的目标和原则" class="headerlink" title="1.3 主数据管理的目标和原则"></a>1.3 主数据管理的目标和原则</h3><h4 id="1-3-1-企业主数据管理的目标有："><a href="#1-3-1-企业主数据管理的目标有：" class="headerlink" title="1.3.1 企业主数据管理的目标有："></a>1.3.1 企业主数据管理的目标有：</h4><ol>
<li>确保组织在各个流程中拥有完整、一致、最新和权威的主数据。</li>
<li>促使企业在各个单元和各应用系统之间共享主数据。</li>
<li>通过采用标准的、通用的数据模型和整合模式，降低数据使用和数据整合的成本及复杂性。</li>
</ol>
<h4 id="1-3-2-企业主数据管理应遵循如下指导原则："><a href="#1-3-2-企业主数据管理应遵循如下指导原则：" class="headerlink" title="1.3.2 企业主数据管理应遵循如下指导原则："></a>1.3.2 企业主数据管理应遵循如下指导原则：</h4><ol>
<li>共享数据。需要组织的全局管理，以实现广泛地共享主数据。</li>
<li>所有权。主数据所有权属于整个组织，而不是属于某个应用系统或部门。在企业，主数据的所有权由信息化发展委员会做最终解释。相关业务记录系统的数据所有权属于相关业务部门，经过数据整合后在数据共享平台分发的主数据所有权转移为整个组织。</li>
<li>质量问题。主数据需要持续的数据质量监控和管理。</li>
<li>管理职责。企业信息化发展委员会拥有对主数据的远景和战略制定和监管，下设数据治理委员会负责策略发展和战略目标对齐，数据治理执行层负责具体地数据管理职责，控制和保证主数据的质量。</li>
<li>变更控制。在给定的时间点，主数据的值代表组织对准确和最新内容的最佳理解。改变数据值的取值规则，应该在有关数据治理执行层监督下谨慎进行，修改数据实体版本需要通过数据治理委员会审批通过，并且做到变更可追溯。</li>
<li>权限。任何主数据的使用和分发需要通过数据治理委员的审批，并由数据治理执行层执行并妥善管理权限。特定业务主数据的使用需要数据治理委员会分管领导亲自审批，例如人员信息主数据需要首席人力资源官审批才能给下游系统共享使用。</li>
</ol>
<h3 id="1-4-主数据治理管理层组织架构"><a href="#1-4-主数据治理管理层组织架构" class="headerlink" title="1.4 主数据治理管理层组织架构"></a>1.4 主数据治理管理层组织架构</h3><p>企业主数据治理组织架构分为管理层和执行层，管理层设信息化发展委员会负责整个集团的数据治理愿景设计和战略规划与监管。信息化发展委员会下设数据治理委员会，负责向上对齐目标，向下监督数据治理的执行和策略发展。数据治理的执行层负责具体的主数据治理工作，包括计划、开发、维护和运营。整个主数据治理组织架构设置如图 2。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-10/organization_architucture.png"
                     
                ></p>
<center>图2. 主数据治理组织架构图</center>

<h3 id="1-5-主数据共享系统架构"><a href="#1-5-主数据共享系统架构" class="headerlink" title="1.5 主数据共享系统架构"></a>1.5 主数据共享系统架构</h3><p>企业的主数据共享架构采用业务系统本地管理主数据，数据共享平台作为公共平台集成和共享数据，对主数据做治理和展示，并将问题数据反馈给相关业务系统。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-10/sharing_platform.png"
                     
                ></p>
<center>图3. 数据共享平台主数据共享架构</center>

<h3 id="1-6-评估主数据管理情况"><a href="#1-6-评估主数据管理情况" class="headerlink" title="1.6 评估主数据管理情况"></a>1.6 评估主数据管理情况</h3><p>公司需要定期评估当前主数据管理的能力、成熟度和有效性。需要从如下几点识别公司主数据管理的情况：</p>
<ol>
<li>哪些角色、组织、地点和事物等实体被反复引用</li>
<li>哪些数据被用来描述人、组织、地点和事物等实体</li>
<li>数据是如何被定义和设计的，以及数据颗粒度细化程度</li>
<li>数据在哪里被创建或源于哪个系统，在哪里被存储、提供和访问</li>
<li>数据通过组织内的系统时是如何发生变化的</li>
<li>谁使用了这些数据，为了什么目的</li>
<li>用什么标准来衡量数据及其来源的质量和可靠性</li>
</ol>
<h2 id="2-Activities-活动"><a href="#2-Activities-活动" class="headerlink" title="2.Activities 活动"></a>2.Activities 活动</h2><h3 id="2-1-主数据管理的关键步骤"><a href="#2-1-主数据管理的关键步骤" class="headerlink" title="2.1 主数据管理的关键步骤"></a>2.1 主数据管理的关键步骤</h3><p>主数据管理的关键步骤包括数据模型管理、数据采集、数据验证、标准化和数据丰富、实体解析、数据分发和共享。</p>
<h4 id="2-1-1-数据模型管理"><a href="#2-1-1-数据模型管理" class="headerlink" title="2.1.1 数据模型管理"></a>2.1.1 数据模型管理</h4><p>清晰一致的逻辑数据模型定义对主数据管理至关重要。数据模型必须是企业级定义的术语，并对整个组织所进行的业务相关联。源系统中数据定义的术语不能在企业具有全局意义，所以不能依赖源系统的定义。每个主数据模型都要有严格的版本定义和辅助字段以帮助确定某一时刻此版本主数据是对企业级实体的最佳理解。推荐的主数据附加辅助属性有：</p>
<p>|—————–+—————|</p>
<table>
<thead>
<tr>
<th>主数据元属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>正式名称</td>
<td>通过管理层审核的中英文名，统一企业内部语意</td>
</tr>
<tr>
<td>—————–+—————</td>
<td></td>
</tr>
<tr>
<td>数据源提供者</td>
<td>提供数据源系统</td>
</tr>
<tr>
<td>—————–+—————</td>
<td></td>
</tr>
<tr>
<td>数据源数据创建时间</td>
<td>标识数据值的创建时间</td>
</tr>
<tr>
<td>—————–+—————</td>
<td></td>
</tr>
<tr>
<td>数据源数据更新时间</td>
<td>标识数据值的更新时间</td>
</tr>
<tr>
<td>—————–+—————</td>
<td></td>
</tr>
<tr>
<td>实体模型版本号</td>
<td>官方确定的主数据版本号</td>
</tr>
<tr>
<td>—————–+—————</td>
<td></td>
</tr>
<tr>
<td>实体数据的创建时间</td>
<td>从源数据整合后的创建时间</td>
</tr>
<tr>
<td>—————–+—————</td>
<td></td>
</tr>
<tr>
<td>实体数据的更新时间</td>
<td>分发的数据集最新更新日期</td>
</tr>
<tr>
<td>—————–+—————</td>
<td></td>
</tr>
</tbody></table>
<center>表1.主数据附加属性</center>


<h4 id="2-1-2-数据采集"><a href="#2-1-2-数据采集" class="headerlink" title="2.1.2 数据采集"></a>2.1.2 数据采集</h4><p>从规划、评估和合并数据源数据到主数据系统必须是一个可靠、可重复的过程。数据采集活动包括:</p>
<ol>
<li>接受并应对新的数据源采集需求</li>
<li>使用数据清洗和数据分析工具进行快速、即时、匹配的数据质量评估</li>
<li>评估数据并将数据整合的复杂性传递给需求者，以帮助他们进行成本效益分析</li>
<li>尝试数据采集及评估其匹配规则的影响</li>
<li>为新数据源确定数据质量指标</li>
<li>确定维护和监控数据质量的责任人</li>
<li>完成与整体数据管理环境的集成</li>
</ol>
<h4 id="2-1-3-数据验证、标准化和数据丰富"><a href="#2-1-3-数据验证、标准化和数据丰富" class="headerlink" title="2.1.3 数据验证、标准化和数据丰富"></a>2.1.3 数据验证、标准化和数据丰富</h4><ol>
<li>验证。识别明显错误或者不正确的数据，并采用对应措施（删除或合并）。</li>
<li>标准化。确保数据内容符合标准参考数据、标准格式。</li>
<li>数据丰富。添加可以用于改进实体解析服务的额外属性。</li>
<li>实体解析和标识符管理。实体解析是指确定两个或多个对现实世界对象的表示是否为同一个对象的过程。通过确定两个或多个表示之间的相似性来确定是否为同一对象。实体解析包括一系列活动（实例提取、实例准备、实例解析、身份管理、关系分析），这些解析活动能够使实体、实例的身份以及实体、实例之间的关系持续地被管理。实例可以通过一个全局标识符把等价的实例关联起来。</li>
</ol>
<h4 id="2-1-4-数据分发与共享"><a href="#2-1-4-数据分发与共享" class="headerlink" title="2.1.4 数据分发与共享"></a>2.1.4 数据分发与共享</h4><p>主数据分发与共享需要严格的权限管理和数据安全使用声明。确保下游系统只使用最小的、必要的、可控的数据。</p>
<h3 id="2-2-评估和评价数据源"><a href="#2-2-评估和评价数据源" class="headerlink" title="2.2 评估和评价数据源"></a>2.2 评估和评价数据源</h3><p>现有应用中的数据是主数据管理工作的基础。理解这些数据的结构和内容的过程很重要，评估数据源主要是为了评估数据质量，具体包括数据的完整性、唯一性、有效性、一致性、准确性和及时性。对于有些数据实体，可以采用购买标准化数据来实现主数据管理工作，这些参考数据可以和内部数据进行比较，以此来改善企业内部数据的质量。</p>
<h3 id="2-3-定义架构方法"><a href="#2-3-定义架构方法" class="headerlink" title="2.3 定义架构方法"></a>2.3 定义架构方法</h3><p>主数据管理的架构方法取决于业务战略、现有数据源平台以及数据本身，特别受数据的血缘和波定性以及延迟性影响。依据企业现有的系统状况，由于缺少部分必要的业务记录系统，数据共享中心架构显得尤为重要，推荐开发数据共享平台，以便管理员可以在数据共享中心维护部分主数据并且共享数据给下游系统。</p>
<h3 id="2-4-建模主数据"><a href="#2-4-建模主数据" class="headerlink" title="2.4 建模主数据"></a>2.4 建模主数据</h3><p>主数据管理是一个持续的整合过程。为了实现一致的结果，必须在主题域中为数据建模，定义企业级的主题域实体和属性。主数据定义的术语和属性应该和整个组织所进行的业务相关联，而不是单单取决于某个源系统的数据。构成主数据的属性也应该定义粒度，并且粒度在整个组织具有意义。如果多个数据源存在不同的命名属性，在企业级模型中必须整合成单一属性，并且数据值处于适当的语境中。</p>
<h3 id="2-5-定义管理职责和维护过程"><a href="#2-5-定义管理职责和维护过程" class="headerlink" title="2.5 定义管理职责和维护过程"></a>2.5 定义管理职责和维护过程</h3><p>主数据管理组织架构如 1.4 章所述，具体的管理职责和维护方式如图 4 所示，技术解决方案和管理流程需要并存于主数据管理的工作中，技术解决方案用在主记录标识符的匹配、合并和管理工作，管理流程用来对记录进行修复和缺失补进。比如，相关业务部门作为业务系统和数据的所有者负有业务系统数据管理职责，当业务源数据经过主数据共享平台治理，数据所有权发生变更，相关业务数据也成为企业级主数据，同时主数据管理模块向源系统提供问题数据必要的反馈。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-10/management_flow.png"
                     
                ></p>
<center>图4. 管理职责和维护流程图</center>

<h3 id="2-6-建立治理制度，推动主数据使用"><a href="#2-6-建立治理制度，推动主数据使用" class="headerlink" title="2.6 建立治理制度，推动主数据使用"></a>2.6 建立治理制度，推动主数据使用</h3><p>在初步完成主数据治理工作后，需要在系统之间建立单向闭环的数据流，以保持系统之间值的一致性。强制要求各下游系统使用主数据，保持主数据的一致。</p>
<h2 id="3-Guidelines-实施指南"><a href="#3-Guidelines-实施指南" class="headerlink" title="3. Guidelines 实施指南"></a>3. Guidelines 实施指南</h2><h3 id="3-1-遵循主数据架构"><a href="#3-1-遵循主数据架构" class="headerlink" title="3.1 遵循主数据架构"></a>3.1 遵循主数据架构</h3><p>企业主数据建设需要遵循如上章描述的体系架构，整合方式需要考虑企业的组织架构、记录系统的数量、数据访问延迟性要求以及消费系统的需求。</p>
<h3 id="3-2-监测数据流动"><a href="#3-2-监测数据流动" class="headerlink" title="3.2 监测数据流动"></a>3.2 监测数据流动</h3><p>当数据在共享环境中流动时，应监控相关数据流，以达到如下目的：</p>
<ol>
<li>显示数据如何在整个组织中共享和使用</li>
<li>在应用系统中识别数据血缘关系</li>
<li>辅助进行数据问题的溯源</li>
<li>展示数据整合和消费整合技术的有效性</li>
<li>通过消费数据来评估源系统数据传输的及时性</li>
<li>确定在集成组件中执行业务规则和转换的有效性</li>
</ol>
<h3 id="3-3-设定主数据共享协议"><a href="#3-3-设定主数据共享协议" class="headerlink" title="3.3 设定主数据共享协议"></a>3.3 设定主数据共享协议</h3><p>为了确保恰当的访问和使用，数据共享协议需要被建立，协议规定：哪些数据可以被共享、在何种条件下可以被共享和使用。数据共享平台负责人应当建立服务水平协议和指标(SLA), 以衡量共享数据的可用性和分享数据的质量；并建立标准的沟通方法，使所有受到影响的相关方了解问题的存在和补救工作状况。</p>
<h3 id="3-4-组织和文化变革"><a href="#3-4-组织和文化变革" class="headerlink" title="3.4 组织和文化变革"></a>3.4 组织和文化变革</h3><p>提高主数据的可用性和质量需要先考虑组织的准备情况、组织的未来使命和愿景。<br>文化变革才是数据治理的中心课题：确定哪些决定由哪些人负责，哪些工作由哪些人负责。本框架建议使用图 2 进行组织和文化架构调整，以适应主数据治理的挑战。<br>在执行层面，当主数据治理执行层认为数据源存在风险，并通知该数据的本地管理员需要开展整改工作时，本地管理员需要及时做出相应的修补措施。</p>
<h2 id="4-Metrics-度量指标"><a href="#4-Metrics-度量指标" class="headerlink" title="4. Metrics 度量指标"></a>4. Metrics 度量指标</h2><p>企业的主数据治理状况可以参考如下指标度量：</p>
<h3 id="4-1-数据质量和遵从性"><a href="#4-1-数据质量和遵从性" class="headerlink" title="4.1 数据质量和遵从性"></a>4.1 数据质量和遵从性</h3><p>数据质量仪表盘可以用来描述数据质量，其中应该说明实体或相关属性的置信度，包括数据准确性，及时性、唯一性、有效性、完整性和一致性。</p>
<h3 id="4-2-数据变更活动"><a href="#4-2-数据变更活动" class="headerlink" title="4.2 数据变更活动"></a>4.2 数据变更活动</h3><p>审核可信的数据血缘对于提高数据共享环境中的数据质量十分重要，需要指标展示数据值的变化率，并且适当调整主数据管理进程中的算法。</p>
<h3 id="4-3-数据获取和消费"><a href="#4-3-数据获取和消费" class="headerlink" title="4.3 数据获取和消费"></a>4.3 数据获取和消费</h3><p>数据由上游系统供应，由下游系统和流程使用。需要有记录显示和追踪哪些系统共享数据，哪些系统消费数据。</p>
<h3 id="4-4-服务水平协议-SLA"><a href="#4-4-服务水平协议-SLA" class="headerlink" title="4.4 服务水平协议(SLA)"></a>4.4 服务水平协议(SLA)</h3><p>应建立服务水平协议并传到给贡献者和订阅者，以提供相应的流程支持，技术问题和数据问题解释。</p>
<h3 id="4-5-数据管理专员覆盖率"><a href="#4-5-数据管理专员覆盖率" class="headerlink" title="4.5 数据管理专员覆盖率"></a>4.5 数据管理专员覆盖率</h3><p>这个指标关注对数据内容负责的团队，识别人员覆盖率对数据管理方面的差距。</p>
<h3 id="4-6-拥有和维护成本"><a href="#4-6-拥有和维护成本" class="headerlink" title="4.6 拥有和维护成本"></a>4.6 拥有和维护成本</h3><p>从解决方案的角度来看，成本包括基础设施，软件许可证，支持人员，咨询费，培训等。</p>
<h3 id="4-7-数据共享量和使用情况"><a href="#4-7-数据共享量和使用情况" class="headerlink" title="4.7 数据共享量和使用情况"></a>4.7 数据共享量和使用情况</h3><p>需要跟踪纳入主数据的数据量和使用情况，以确定数据共享环境的有效性。具体指标有流入和流出数据的定义、纳入和订阅数量和速率。</p>
]]></content>
      <categories>
        <category>data governance</category>
      </categories>
      <tags>
        <tag>master data, data governance</tag>
      </tags>
  </entry>
  <entry>
    <title>增量ETL源数据的几种方式和细节</title>
    <url>/2022/01/09/data-warehouse-2022-01-10-%E5%A2%9E%E9%87%8FETL%E6%BA%90%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h2 id="Introduction-介绍"><a href="#Introduction-介绍" class="headerlink" title="Introduction 介绍"></a>Introduction 介绍</h2><p><code>ETL</code>是常见的把数据从 OLTP 系统导入数据仓库的方式，一般分为全量，增量，固定范围和推送方式。本文主要讲如何增量抽取，和抽取过程中遇到其它一些问题的解决方法。</p>
<h3 id="增量抽取"><a href="#增量抽取" class="headerlink" title="增量抽取"></a>增量抽取</h3><p>增量抽取一般可以使用表中列的时间戳，标识符，交易日期和触发器等组合来判断是否需要增量抽取。使用时间戳，标识符和交易日期的方法大致一样，通过比较元数据中记录的上一次成功<code>etl</code>点和当前时间或位置做比较，进行增量抽取。</p>
<h4 id="原始数据记录删除了数仓该如何处理？"><a href="#原始数据记录删除了数仓该如何处理？" class="headerlink" title="原始数据记录删除了数仓该如何处理？"></a>原始数据记录删除了数仓该如何处理？</h4><ul>
<li>方法 1：比较原始数据和数仓表的主键，如果发现原始数据库主键已经不存在，那么需要在数据表做软删除。</li>
<li>方法 2：如果原始数据库支持删除触发器，那么数仓只需 <code>etl</code>删除审计表或者事件表，标记记录已删除就行。（此方法也是用update,insert）<br>如果希望保存所有的更改记录，使用<code>temporal table</code>时态表是个很好的选择，但是需要业务系统支持。</li>
</ul>
<h4 id="使用固定范围etl"><a href="#使用固定范围etl" class="headerlink" title="使用固定范围etl"></a>使用固定范围etl</h4><p>如果有些数据源没有自增键或者可用的时间戳，可用系统赋值的<code>RowID</code>作为参考值，固定范围etl数据。在SQL Server中可用如下代码定位，</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">%</span><span class="operator">%</span>physloc<span class="operator">%</span><span class="operator">%</span> <span class="keyword">AS</span> [<span class="operator">%</span><span class="operator">%</span>physloc<span class="operator">%</span><span class="operator">%</span>],</span><br><span class="line">       sys.fn_PhysLocFormatter(<span class="operator">%</span><span class="operator">%</span>physloc<span class="operator">%</span><span class="operator">%</span>) <span class="keyword">AS</span> [File:Page:Slot]</span><br><span class="line"><span class="keyword">FROM</span> Table1</span><br></pre></td></tr></table></figure></div>
<p>但是数据的更新还是需要使用checksum来比对，如果字段较多性能还是会有瓶颈。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">add</span> col4 <span class="keyword">as</span> checksum(col1, col2, col3)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table2 <span class="keyword">add</span> col4 <span class="keyword">as</span> checksum(col1, col2, col3)</span><br><span class="line">go</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 t1</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">( <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2 t2</span><br><span class="line"><span class="keyword">where</span> t1.col4 <span class="operator">=</span> t2.col4 )</span><br><span class="line">go</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>data warehouse</category>
      </categories>
      <tags>
        <tag>etl, data warehouse</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis使用总结</title>
    <url>/2017/05/08/database-2017-05-09-redis-summary/</url>
    <content><![CDATA[<p><code>Redis</code>是我们常用的内存型key-value数据库, 它有着强大的读写能力(benchmark是几万IOPS). 而最初redis的源码只有2万行, 十分适合学习和研究. 本文主要总结一下redis的devops相关使用. 我觉得使用了<code>redis</code>时主要关心其单线程模型和内存的调度.</p>
<h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><p><code>Redis</code>使用了单线程架构和I&#x2F;O多路复用模型来实现高性能的内存数据库服务, 当几个客户端同时发送命令时, redis会先将命令存在队列, 然后通过epoll作为IO复用实现, 通过事件一条一条的执行命令.<br>单线程一个好处是避免了线程切换的开销和竞争(单线程自然没有CPU核切换的问题). 但是单线程有一个问题, 对于每个命令的执行时间是有要求的。如果某个命令执行过长，会造成其他命令的阻塞，对于Redis这种高性能的服务来说是致命的，所以Redis是面向快速执行场景的数据库。</p>
<h3 id="数据类型和内部编码"><a href="#数据类型和内部编码" class="headerlink" title="数据类型和内部编码"></a>数据类型和内部编码</h3><p><code>Redis</code>是KV数据库, 这个<code>V</code>的类型大致可以分为5类: Hash&#x2F;String&#x2F;List&#x2F;Set&#x2F;Zset&#x2F;, 每一种数据结构都有多种内部编码实现, 通过<code>type</code>可以看类型, 通过<code>object encoding</code>可以看编码实现.</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; object encoding hello</span><br><span class="line"><span class="string">&quot;embstr&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>一种数据类型有多种实现, 实际使用时到底用了哪一种方法<code>Redis</code>会帮用户做出选择, 使用时可以不必关心细节. 这样做也方便<code>redis</code>更新具体<code>encoding</code>实现的代码.</p>
<h3 id="内存理解"><a href="#内存理解" class="headerlink" title="内存理解"></a>内存理解</h3><p>需要了解<code>Redis</code>内存使用情况, 可以使用<code>info memory</code>. Redis进程内消耗主要包括：自身内存+对象内存+缓冲内存+内存碎片.</p>
<ul>
<li><code>redis</code>自身存储很小, 可以忽略不计.</li>
<li>对象存储: 对象内存是Redis内存占用最大的一块，存储着用户所有的数据.</li>
<li>缓冲内存主要包括：客户端缓冲、复制积压缓冲区、AOF缓冲区。</li>
<li>Redis默认的内存分配器采用jemalloc，可选的分配器还有：glibc、tcmalloc。内存分配器为了更好地管理和重复利用内存，分配内存策略一般采用固定范围的内存块进行分配.比如当保存5KB对象时jemalloc可能会采用8KB的块存储，而剩下的3KB空间变为了内存碎片不能再分配给其他对象存储。</li>
</ul>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>Redis支持RDB和AOF两种持久化机制，持久化功能有效地避免因进程退出造成的数据丢失问题，当下次重启时利用之前持久化的文件即可实现数据恢复。<br>RDB持久化是把当前进程数据生成快照保存到硬盘的过程，触发RDB持久化过程分为手动触发和自动触发。<br><code>bgsave</code>命令是执行RDB制作镜像的命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。运行<code>bgsave</code>命令对应的Redis日志如下：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">* Background saving started by pid <span class="number">3151</span></span><br><span class="line">* DB saved on disk</span><br><span class="line">* RDB: <span class="number">0</span> MB of memory used by copy-on-write</span><br><span class="line">* Background saving terminated with success</span><br></pre></td></tr></table></figure></div>
<p>Redis内部还存在自动触发RDB的持久化机制，例如以下场景：</p>
<ul>
<li>使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。</li>
<li>如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点</li>
<li>执行debug reload命令重新加载Redis时，也会自动触发save操作。</li>
<li>默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。<br>AOF（append only file）持久化：以独立日志的方式记录每次<strong>写</strong>命令在<code>buffer</code>,然后通过某种机制<code>fsync</code>到硬盘，日志的格式与客户端发给<code>Redis</code>的网络文本一样.重启时再重新执行AOF文件中的命令达到恢复数据的目的。AOF的主要作用是解决了数据持久化的实时性.<br>AOF的工作流程操作：命令写入（append）、文件同步（sync）、文件重写（rewrite）、重启加载（load）.在进行AOF重写工作的时候, <code>redis</code>也会fork一个子进程,由子进程进行文件重写, 主进程继续处理新的请求并将新的aof写入<code>aof_rewrite_buffer</code>, 在子进程完成重写工作后将<code>aof_rewrite_buffer</code>和新的<code>aof</code>合并,形成最终的<code>aof</code>文件.<br>现在主流redis持久化是使用AOF, 但是为了更加快速可以两种技术混合使用.</li>
</ul>
<h3 id="redis发生阻塞"><a href="#redis发生阻塞" class="headerlink" title="redis发生阻塞"></a>redis发生阻塞</h3><p>当Redis阻塞时，这时应用方会收到大量Redis超时异常，比如Jedis客户端会抛出JedisConnectionException异常.(CacheCloud是搜狐开源的监控工具可以看看). 发生阻塞一般分为两大原因:</p>
<ul>
<li>内部原因: 不合理地使用API或数据结构、CPU饱和、持久化阻塞等。<br>不合理使用API是指对复杂度较大的指令执行大量数据操作. <code>redis</code>提供<code>slowlog get &#123;n&#125;</code>查询慢查询, 默认命令执行时间在10ms以上的命令会存在一个定长为128的队列中。慢查询本身只记录了命令执行时间，不包括数据网络传输时间和命令排队时间，因此客户端发生阻塞异常后，可能不是当前命令缓慢，而是在等待其他命令执行. 发现是滥用api造成慢查询后, 可以采取两个方法:<ul>
<li>修改为低算法度的命令，如hgetall改为hmget等，禁用keys、sort等命令。</li>
<li>调整大对象：缩减大对象数据或把大对象拆分为多个小对象，防止一次命令操作过多的数据. <code>redis-cli --bigkeys</code>可以统计大对象.<br>CPU饱和是指单线程跑满了整个CPU, CPU饱和是非常危险的，将导致Redis无法处理更多的命令，严重影响吞吐量和应用方的稳定性.<code>redis-cli --stat</code>可以查看统计. 当CPU饱和, 垂直扩展是没有用的, 需要水平集群化分摊IOPS.如果只有几百或几千IOPS的Redis实例就接近CPU饱和是很不正常的，有可能使用了高算法复杂度的命令。还有一种情况是过度的内存优化，这种情况有些隐蔽，需要我们根据info<br>commandstats统计信息分析出命令不合理开销时间.</li>
</ul>
</li>
</ul>
<p>对于开启了持久化功能的Redis节点，需要排查是否是持久化导致的阻塞。持久化引起主线程阻塞的操作主要有：fork阻塞、AOF刷盘阻塞、HugePage写操作阻塞。可以执行<code>info stats</code>命令获取到<code>latest_fork_usec</code>指标，表示Redis最近一次fork操作耗时，如果耗时很大，比如超过1秒，则需要做出优化调整，如避免使用过大的内存实例和规避fork缓慢的操作系统等.</p>
<ul>
<li>外部原因: CPU竞争、内存交换、网络问题等.<br>CPU竞争主要分为: 进程竞争, 绑定CPU竞争.当Redis父进程创建子进程进行RDB&#x2F;AOF重写时，如果做了CPU绑定，会与父进程共享使用一个CPU。子进程重写时对单核CPU使用率通常在90%以上，父进程与子进程将产生激烈CPU竞争，极大影响Redis稳定性。因此对于开启了持久化或参与复制的主节点不建议绑定CPU。<br>内存交换(swap)对<code>redis</code>有极大的性能影响, 可以查看<code>cat /proc/&#123;redis process id&#125;/smaps | grep Swap</code>内存交换信息.如果交换量都是0KB或者个别的是4KB，则是正常现象，说明Redis进程<br>内存没有被交换。预防内存交换的方法有：<ul>
<li>保证机器充足的可用内存。</li>
<li>确保所有Redis实例设置最大可用内存（maxmemory），防止极端情况下Redis内存不可控的增长。</li>
<li>降低系统使用swap优先级，如<code>echo 10&gt;/proc/sys/vm/swappiness</code><br>网路问题分为: 连接拒绝、网络延迟、网卡软中断等。 拒绝连接的情况又有网路闪断, redis拒接连接和连接溢出. 可以查看<code>redis-cli -p 6384 info Stats | grep rejected_connections</code>查看redis拒绝连接数, 默认连接数是10000. 连接溢出是指操作系统或者Redis客户端在连接时的问题. 操作系统一般会对进程使用的资源做限制，其中一项是对进程可打开最<br>大文件数控制，通过ulimit -n查看，通常默认1024。由于Linux系统对TCP连接也定义为一个文件句柄，因此对于支撑大量连接的Redis来说需要增大这个值，如设置<code>ulimit -n 65535</code>，防止Too many open files错误;系统对于特定端口的TCP连接使用backlog队列保存, linux默认是128, Redis默认的长度为511，通过tcp-backlog参数设置。如果Redis用于高并发场景为了防止缓慢连接占用，可适当增大这个设置，但必须大于操作系统允许值才能生效, 使用<code>echo 511&gt;/proc/sys/net/core/somaxconn</code>命令进行修改。</li>
</ul>
</li>
</ul>
<h3 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h3><p>Redis Sentinel是Redis的高可用实现方案.</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database, redis</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展数据库注意事项</title>
    <url>/2018/10/02/database-2018-10-03-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%A9%E5%B1%95%E6%80%A7%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>关系型数据库扩展是一个永恒的话题, 尤其是<code>partitioning</code>和一致性方面的问题. 以下结合网上大神资料,做一个大致的总结.</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>想要快速查询, 必须建立合适的索引. 检查经常查询的sql语句, 分析sql是否使用了正确的索引十分重要. 如mysql可以临时开启<code>general_log</code>一两天, 查出使用最频繁的sql, 使用<code>explain sql</code>查看查询执行计划, 然后可以确定是否需要加索引. </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> version(); <span class="operator">/</span><span class="operator">/</span>查看版本</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log<span class="operator">=</span><span class="number">1</span>;<span class="operator">/</span><span class="operator">/</span>开启查询日志, 需要管理员权限.</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output<span class="operator">=</span><span class="string">&#x27;TABLE&#x27;</span>;<span class="operator">/</span><span class="operator">/</span>general_log支持输出到<span class="keyword">table</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.general_log;<span class="operator">/</span><span class="operator">/</span>查询所有<span class="keyword">sql</span>语句的使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> argument, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> number <span class="keyword">from</span> mysql.general_log  <span class="keyword">group</span> <span class="keyword">by</span> argument)t </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> number <span class="keyword">DESC</span>;<span class="operator">/</span><span class="operator">/</span>降序排列使用最多的<span class="keyword">sql</span>语句</span><br></pre></td></tr></table></figure></div>

<h3 id="反规范化"><a href="#反规范化" class="headerlink" title="反规范化"></a>反规范化</h3><p><code>join</code>是十分费时的操作, 可以使用冗余数据, 做到同样的<code>join</code>查询效果.</p>
<h3 id="数据库复制"><a href="#数据库复制" class="headerlink" title="数据库复制"></a>数据库复制</h3><p>数据库的复制是数据扩展性常见话题, 具体操作流程是通过<code>change log</code>把主数据库的改变<code>replay</code>到从数据库中, 保证从数据库有多个数据的复制. 这里主要的注意点是如何保证数据的一致性问题.</p>
<h3 id="表的分区"><a href="#表的分区" class="headerlink" title="表的分区"></a>表的分区</h3><p>分表分库包含两种方式: 垂直&#x2F;水平分割. 垂直分割是把一张表的列分开, 成为两张表;或者是把不同表放在不同的数据库中. 这里需要注意的是垂直分割的表如果有<code>join</code>需求, 那么不要做分割.<br>水平分割是把一个表中的不同行分入不同的表库中, 这里主要注意把相同业务逻辑的行放在一起.</p>
<h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><p>最好能把<code>OLAP</code>和<code>OLTP</code>频繁操作的表分为不同的库, 也就是所谓的<code>读写分离</code>. 如果是<code>OLTP</code>频繁的操作, 那么需要把长时间操作移到业务逻辑实现, 同时设定合适的<code>Isolation</code>隔离等级.<br>如果使用缓存配合数据库, 那么在用户提交的时候需要验证数据的时间戳, 保证提交时读取的数据是最新的. 如果不是那么需要终止提交, 刷新缓存中数据后再重新提交.</p>
<h3 id="ORM使用"><a href="#ORM使用" class="headerlink" title="ORM使用"></a>ORM使用</h3><p><code>ORM</code>可以简化持久层逻辑, 但是对于扩展性并不是很友好. 在使用<code>ORM</code>的时候需要调优考虑如下问题:</p>
<ul>
<li>当一个对象被引用的时候, 这个对象会被何种程度引用</li>
<li>如果一个集合被引用的时候, 需要考虑O&#x2F;R映射器是否会包含整个集合数据?</li>
<li>当一个对象需要扩展使用<code>join</code>时, 需要考虑如何选择, 是选择多个<code>single-join</code>查询还是单个<code>multiple-join</code>查询.</li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>一次奇怪的Docker Daemon Error</title>
    <url>/2018/01/17/docker-2018-01-18-strange-docker-error/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>环境：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/centos-release</span><br><span class="line">CentOS Linux release 7.1.1503 (Core) </span><br><span class="line">ansible --version</span><br><span class="line">ansible 2.3.1.0</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = Default w/o overrides</span><br><span class="line">  python version = 2.7.5 (default, Aug  4 2017, 00:39:18) [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]</span><br></pre></td></tr></table></figure></div>

<h3 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h3><p>用ansible安装部署docker时发现有容器一直起不来。安装的docker daemon是按docker官网<a class="link"   href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-docker-ce" >https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-docker-ce <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>安装的，然后log发现报错<code>Error response from daemon: OCI runtime create failed: unable to retrieve OCI runtime error</code>。</p>
<h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>搜索查看<a class="link"   href="https://github.com/moby/moby/issues/35972" >issue <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,发现是安装的docker-ce版本太新!而centos太旧，Centos7.1选择docker-ce-17.06.3.ce这个版本可用，17.12还是太新！</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br><span class="line">Server Version: 18.01.0-ce</span><br><span class="line">Storage Driver: devicemapper</span><br></pre></td></tr></table></figure></div>

<h3 id="措施，其他问题再现"><a href="#措施，其他问题再现" class="headerlink" title="措施，其他问题再现"></a>措施，其他问题再现</h3><p>卸载docker-ce, 重新安装。然后发现容器还是起不来！<br>尝试删除&#x2F;var&#x2F;lib&#x2F;docker, 报错</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">error: driver \&quot;devicemapper\&quot; failed to remove root filesystem <span class="keyword">for</span> 6f009dff997d9fe3f19c736d6dd662d7ff55cea2ec04ac5bba287b83684cac5b: remove /var/lib/docker/devicemapper/mnt/0efe8e6bc86a2ff1e1877979275c36d119995043ce231aeed661c15d26873692: device or resource busy</span><br></pre></td></tr></table></figure></div>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>看看到底是mount到其它什么地方了</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">find /proc/*/mounts | xargs grep  0efe8e6bc86a2ff1e187797927</span><br><span class="line">grep: /proc/1449/mounts: No such file or directory</span><br><span class="line">/proc/7280/mounts:/dev/mapper/docker-8:6-67114038-0efe8e6bc86a2ff1e1877979275c36d119995043ce231aeed661c15d26873692 /var/lib/docker/devicemapper/mnt/0efe8e6bc86a2ff1e1877979275c36d119995043ce231aeed661c15d26873692 xfs rw,relatime,nouuid,attr2,inode64,logbsize=64k,sunit=128,swidth=128,noquota 0 0</span><br><span class="line"></span><br><span class="line">ps 7280</span><br><span class="line">  PID TTY      STAT   TIME COMMAND</span><br><span class="line">  7280 ?        Ssl    0:03 /usr/libexec/colord</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 7280 </span><br><span class="line">yum install -y docker-ce-17.06.3.ce </span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker Cloud自动化部署</title>
    <url>/2018/02/01/docker-2018-02-02-docker-cloud-autodeploy/</url>
    <content><![CDATA[<h3 id="Docker-cloud介绍"><a href="#Docker-cloud介绍" class="headerlink" title="Docker cloud介绍"></a>Docker cloud介绍</h3><p>Docker cloud有点像云上的jenkins docker自动化构建部署工具，可以把云上的git仓库，部署的节点虚机整合在一起，做到提交代码就可以自动构建，测试，部署。</p>
<h3 id="例子-设置aliyun作为部署节点"><a href="#例子-设置aliyun作为部署节点" class="headerlink" title="例子: 设置aliyun作为部署节点"></a>例子: 设置aliyun作为部署节点</h3><p>docker cloud可以结合github, bitbucket仓库做到每次有新的pull request都进行一次重新构建。但是由于我本地直接用pycharm结合docker remote进行开发，所以开发测试完，我的image也已经构建好，所以我没有把git仓库和docker cloud整合，而是直接push到docker hub private repo。然后设置aliyun作为部署节点，当有image更新时自动重新部署。</p>
<ul>
<li><p>设置aliyun node</p>
<ul>
<li>选中图中Infrastructure下的<code>Node</code>选项<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%883.37.46.png"
                      alt="node1"
                ></li>
<li>点击<code>bring your own node</code>, 将截图中脚本在aliyun的虚机上运行。<strong>注意</strong>！！这里虚机必须没有安装过docker daemon. 同时安全组开通6783&#x2F;tcp，6783&#x2F;udp和2375&#x2F;tcp端口。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%883.45.39.png"
                      alt="node2"
                ></li>
<li>等待5分钟，查看timeline, 直到log显示下图，正确部署节点。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%883.49.11.png"
                      alt="node3"
                ><br><strong>注意</strong>！！由于cloud.docker.com是在aws上，当中可能网络timeout,导致部署失败。这就需要删除dokcercloud-agent, 重新安装。<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove dockercloud-agent</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/docker</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/dockercloud-agent</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>设置自动部署service</p>
<ul>
<li>从hub仓库中创建一个service, 设置成auto redeploy. <strong>注意</strong>当前只支持image的latest tag自动重新部署。<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%884.14.04.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%884.14.04.png"></li>
<li>选中AUTOREDEPLOY， 其他可以默认设置。<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%884.14.35.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%884.14.35.png"></li>
</ul>
</li>
<li><p>重新push image, 测试是否设置成功，在service的timeline应该看到如下截图，说明设置成功。<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%884.16.47.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%884.16.47.png"></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里只是简单介绍一下docker cloud的应用。还有一些其他功能比如swarm等商业功能没有触及，但是总体感觉docker越来越商业化。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>三种docker数据持久的方式</title>
    <url>/2018/02/18/docker-2018-02-19-docker-container-data-persistent/</url>
    <content><![CDATA[<h3 id="docker提供三种方式把数据挂载到容器"><a href="#docker提供三种方式把数据挂载到容器" class="headerlink" title="docker提供三种方式把数据挂载到容器"></a>docker提供三种方式把数据挂载到容器</h3><ul>
<li>volumes<br>volumes是宿主机上docker管理的文件系统， 比如在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;。 一个volume可以同时被多个容器挂载。使用<code>docker volume create --driver</code><br>可以指定远程的文件系统。</li>
<li>bind mounts<br>宿主机其他任意不是docker管理的文件系统</li>
<li>tmpfs<br>tmpfs是挂载在宿主机的内存中，可以用于临时挂载非持久化数据，比如secret. –tmpfs<br>docker17.08以后可以考虑使用–mount同一参数</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid and Flex Design</title>
    <url>/2019/03/18/frontend-2019-03-19-Grid-and-Flex/</url>
    <content><![CDATA[<h2 id="Flex-Background-Summary"><a href="#Flex-Background-Summary" class="headerlink" title="Flex Background Summary"></a>Flex Background Summary</h2><p><code>Flexbox layout</code>布局主要提供了一种为容器(<code>container</code>)中项目(<code>item</code>)布局, 对齐和分布空间的方式. 这种<code>flex</code>的布局方式可以不需要知道空间的大小或者动态改变大小.<br><code>Flex</code>主要的想法是给容器能够灵活地改变容器内项目的高度&#x2F;宽度&#x2F;排序, 使其能适应当前的空间.一个<code>flex</code>的容器能够把它的项目扩展到多余的空间, 或者收缩大小防止屏幕变小时项目溢出.<br><code>Floxbox</code>的布局和传统的布局不同, 它不固定排列的方向(而block基于垂直方向, inline基于水平方向).<br><code>Flowbox</code>布局比较适合组件和小型布局, 而<code>Grid</code>适合更大的布局.</p>
<h2 id="Grid-Background-Summary"><a href="#Grid-Background-Summary" class="headerlink" title="Grid Background Summary"></a>Grid Background Summary</h2><p><code>Grid Layout</code>是一个二维的布局系统, 既可以处理行又可以处理列. 应用<code>Grid</code>CSS的父元素称为<code>Grid Container</code>, 子元素称为<code>Grid Items</code>.<br><code>implicit grid and explicit grid</code>隐含和显式网格, 隐含网格指网格项目多出来或者网格项目布局在显式网格外面的情况.</p>
<h3 id="Grid属性表"><a href="#Grid属性表" class="headerlink" title="Grid属性表"></a>Grid属性表</h3><p>Grid 容器的属性:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: grid|inline-grid;</span><br><span class="line">grid-template-columns: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">grid-template-rows: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">grid-template-areas: &quot;&lt;grid-area-name&gt;|.|none| ...&quot;</span><br><span class="line">                     &quot;...&quot;;</span><br><span class="line">grid-template: none|&lt;grid-template-rows&gt;/&lt;grid-template-columns&gt; | &lt;line-names&gt;?&lt;string&gt;&lt;track-size&gt;?</span><br><span class="line">               &lt;line-names&gt;?+/&lt;explicit-track-list&gt;?;</span><br><span class="line">grid-column-gap: &lt;line-size&gt;</span><br><span class="line">grid-row-gap: &lt;line-size&gt;</span><br><span class="line">grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;</span><br><span class="line">justify-items: start|end|center|stretch;</span><br><span class="line">align-items: start|end|center|stretch;</span><br><span class="line">place-items: &lt;align-items&gt; / &lt;justify-items&gt;;</span><br><span class="line">justify-content: start|end|center|stretch|space-around|space-between|space-evenly;</span><br><span class="line">align-content: start|end|center|stretch|space-around|space-between|space-evenly;</span><br><span class="line">place-content: &lt;align-centent&gt;/&lt;justify-centent&gt;;</span><br><span class="line">grid-auto-columns: &lt;track-size&gt; ...;</span><br><span class="line">grid-auto-rows: &lt;track-size&gt; ...;</span><br><span class="line">grid-auto-flow: row|column|row dense|column dense;</span><br><span class="line">grid: &lt;grid-template&gt; | &lt;grid-template-rows&gt; / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns&gt;? | [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-rows&gt;? / &lt;grid-template-columns&gt;</span><br></pre></td></tr></table></figure></div>
<p>Grid 项目的属性:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-column-start: &lt;number&gt;|&lt;name&gt;|span &lt;number&gt;|span &lt;name&gt;|auto</span><br><span class="line">grid-column-end: &lt;number&gt; | &lt;name&gt; |span &lt;number&gt; | span &lt;name&gt; |auto</span><br><span class="line">grid-row-start: &lt;number&gt; | &lt;name&gt; |span &lt;number&gt; | span &lt;name&gt; |auto</span><br><span class="line">grid-row-end: &lt;number&gt; | &lt;name&gt; |span &lt;number&gt; | span &lt;name&gt; |auto</span><br><span class="line">grid-column: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">grid-row: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">grid-area: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">justify-self: start | end | center | stretch;</span><br><span class="line">align-self: start | end | center | stretch;</span><br><span class="line">place-self: &lt;align-self&gt;/&lt;justify-self&gt;;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>Apollo client的缓存机制</title>
    <url>/2019/04/07/frontend-2019-04-09-apollo-cache/</url>
    <content><![CDATA[<h2 id="Apollo-client2-0的缓存实现"><a href="#Apollo-client2-0的缓存实现" class="headerlink" title="Apollo client2.0的缓存实现"></a>Apollo client2.0的缓存实现</h2><p><code>Apollo client2.0</code>使用<code>apollo-client-inmemory</code>作为客户端数据的缓存实现, 主要使用包中的<code>InMemoryCache</code>作为<code>data store</code>来缓存数据. <code>InMemoryCache</code>除了作为客户端缓存的功能外, 还有一个好处是只有当遵循特定的标识符规则(给缓存加特定的id), 每次对后端做<code>mutation</code>后可以自动更新缓存.</p>
<h3 id="InMemoryCache的配置"><a href="#InMemoryCache的配置" class="headerlink" title="InMemoryCache的配置"></a><code>InMemoryCache</code>的配置</h3><p>引入cache:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">InMemoryCache</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-client-inmemory&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">InMemoryCache</span>();</span><br></pre></td></tr></table></figure></div>

<p><code>InMemoryCache</code>的构造器可以有如下配置:</p>
<ul>
<li><code>addTypename: boolean</code>, 指定是否需要在<code>document</code>中添加__typename, 默认为true.</li>
<li><code>dataIdFromObject</code>, 由于<code>InMemoryCache</code>是会<code>normalize</code>数据再存入<code>store</code>, 具体做法是先把数据分成一个个对象, 然后给每个对象创建一个全局标识符<code>_id</code>, 然后把这些对象以一种扁平的数据格式存储. 默认情况下, <code>InMemoryCache</code>会找到<code>__typename</code>和边上主键<code>id</code>值作为标识符<code>_id</code>的值(如<code>__typename:id</code>). 如果<code>id</code>或者<code>__typename</code>没有指定, 那么<code>InMemoryCache</code>会<code>fall back</code>查询<code>query</code>的对象路径. <strong>但是我们也可以使用<code>dataIdFromObject</code>来自定义对象的唯一表示符</strong>:</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InMemoryCache</span>, defaultDataIdFromObject &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-cache-inmemory&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">InMemoryCache</span>(&#123;</span><br><span class="line">  <span class="attr">dataIdFromObject</span>: <span class="function"><span class="params">object</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (object.<span class="property">__typename</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;foo&#x27;</span>: <span class="keyword">return</span> object.<span class="property">key</span>; <span class="comment">// use `key` as the primary key</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;bar&#x27;</span>: <span class="keyword">return</span> <span class="string">`bar:<span class="subst">$&#123;object.blah&#125;</span>`</span>; <span class="comment">// use `bar` prefix and `blah` as the primary key</span></span><br><span class="line">      <span class="attr">default</span>: <span class="keyword">return</span> <span class="title function_">defaultDataIdFromObject</span>(object); <span class="comment">// fall back to default handling</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>fragmentMatcher</code>, <code>fragment matcher</code>默认使用<code>heuristic fragment matcher</code></li>
<li><code>cacheRedirects</code>(以前叫<code>cacheResolvers</code>, <code>customResolvers</code>), 在发出请求之前将查询重定向到缓存中的另一个条目的函数映射。</li>
</ul>
<h3 id="自动缓存更新"><a href="#自动缓存更新" class="headerlink" title="自动缓存更新"></a>自动缓存更新</h3><p>假设我们有一个query:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    post(id: &#x27;4&#x27;)&#123;</span><br><span class="line">        id</span><br><span class="line">        score</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后我们再做一个mutation</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mutation &#123;</span><br><span class="line">    updatePost(id: &#x27;4&#x27;)&#123;</span><br><span class="line">        id</span><br><span class="line">        score</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果保持这个<code>id</code>匹配, 每次更新都会自定更新<code>data store</code>中<code>score</code>字段的数据, 如果query有多个字段, 那么只要mutation的结果数据尽量保持更新前一次的query的数据一致, 就可以利用上诉特点保持cache的数据鲜活.</p>
<h3 id="和Cache直接交互"><a href="#和Cache直接交互" class="headerlink" title="和Cache直接交互"></a>和Cache直接交互</h3><p>可以使用apollo client的类方法直接对cache做读写操作. 方法有: <code>readQuery</code>, <code>readFragment</code>, <code>writeQuery</code>,<br><code>writeFragment</code>.</p>
<ul>
<li><code>readQuery</code>, 从cache中读取数据, 有一个字段没有存在则会报错.<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; todo &#125; = client.<span class="title function_">readQuery</span>(&#123;</span><br><span class="line">  <span class="attr">query</span>: gql<span class="string">`</span></span><br><span class="line"><span class="string">    query ReadTodo($id: Int!) &#123;</span></span><br><span class="line"><span class="string">      todo(id: $id) &#123;</span></span><br><span class="line"><span class="string">        id</span></span><br><span class="line"><span class="string">        text</span></span><br><span class="line"><span class="string">        completed</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">variables</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></li>
<li><code>readFragment</code>, 读取已有数据的片段, 如果某个字段不存在则报错<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> todo = client.<span class="title function_">readFragment</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">  <span class="attr">fragment</span>: gql<span class="string">`</span></span><br><span class="line"><span class="string">    fragment myTodo on Todo &#123;</span></span><br><span class="line"><span class="string">      id</span></span><br><span class="line"><span class="string">      text</span></span><br><span class="line"><span class="string">      completed</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></li>
<li><code>writeFragment</code>和<code>writeQuery</code>, 用法和read差不多, 除了需要多一个参数<code>data</code>:<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">client.<span class="title function_">writeFragment</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;typename:5&#x27;</span>, <span class="comment">//复合键用于表示cache中数据</span></span><br><span class="line">  <span class="attr">fragment</span>: gql<span class="string">`</span></span><br><span class="line"><span class="string">    fragment myTodo on Todo &#123;</span></span><br><span class="line"><span class="string">      completed</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="忽略cache"><a href="#忽略cache" class="headerlink" title="忽略cache"></a>忽略cache</h3><p>有两者情况可能需要绕过缓存, 一种是想直接访问后端然后写入缓存, 另一种是完全不使用缓存(适合敏感信息).</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">client.<span class="title function_">query</span>(&#123;</span><br><span class="line">    <span class="attr">query</span>: <span class="title function_">gql</span>(queries.<span class="property">getUser</span>),</span><br><span class="line">    <span class="attr">fetchPolicy</span>: <span class="string">&#x27;network-only&#x27;</span>  <span class="comment">// &#x27;no-cache&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h3 id="mutation后cache的更新"><a href="#mutation后cache的更新" class="headerlink" title="mutation后cache的更新"></a>mutation后cache的更新</h3><p><code>refetchQueries</code>是mutation后更新cache的简单方法, 但是它会从后端再做一次请求而显得不那么优秀. Mutation组件有一个<code>update</code>prop可以用于手动更新cache, 而不用重新fetch.</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CommentAppQuery</span> <span class="keyword">from</span> <span class="string">&#x27;../queries/CommentAppQuery&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SUBMIT_COMMENT_MUTATION</span> = gql<span class="string">`</span></span><br><span class="line"><span class="string">  mutation SubmitComment($repoFullName: String!, $commentContent: String!) &#123;</span></span><br><span class="line"><span class="string">    submitComment(</span></span><br><span class="line"><span class="string">      repoFullName: $repoFullName</span></span><br><span class="line"><span class="string">      commentContent: $commentContent</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      postedBy &#123;</span></span><br><span class="line"><span class="string">        login</span></span><br><span class="line"><span class="string">        html_url</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      createdAt</span></span><br><span class="line"><span class="string">      content</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CommentsPageWithMutations</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Mutation</span> <span class="attr">mutation</span>=<span class="string">&#123;SUBMIT_COMMENT_MUTATION&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;mutate =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AddComment</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">submit</span>=<span class="string">&#123;(&#123;</span> <span class="attr">repoFullName</span>, <span class="attr">commentContent</span> &#125;) =&gt;</span></span></span><br><span class="line"><span class="language-xml">          mutate(&#123;</span></span><br><span class="line"><span class="language-xml">            variables: &#123; repoFullName, commentContent &#125;,</span></span><br><span class="line"><span class="language-xml">            update: (store, &#123; data: &#123; submitComment &#125; &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              // Read the data from our cache for this query.</span></span><br><span class="line"><span class="language-xml">              const data = store.readQuery(&#123; query: CommentAppQuery &#125;);</span></span><br><span class="line"><span class="language-xml">              // Add our comment from the mutation to the end.</span></span><br><span class="line"><span class="language-xml">              data.comments.push(submitComment);</span></span><br><span class="line"><span class="language-xml">              // Write our data back to the cache.</span></span><br><span class="line"><span class="language-xml">              store.writeQuery(&#123; query: CommentAppQuery, data &#125;);</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;;</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Mutation</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>frontend</category>
        <category>apollo</category>
      </categories>
      <tags>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>React函数式组件的状态</title>
    <url>/2019/04/17/frontend-2019-04-18-React-function-component-state/</url>
    <content><![CDATA[<h2 id="React无状态组件"><a href="#React无状态组件" class="headerlink" title="React无状态组件"></a>React无状态组件</h2><p>React的<code>Component</code>分为有状态的<code>class component</code>和无状态的<code>function component</code>, <code>class component</code>的好处是可以完全控制组件的生命周期, 坏处是写起来麻烦. <code>function component</code>的好处是可以使用高阶函数式的编程方式编写代码, 缺点是没有状态可以控制.所以一般需要状态初始化或者其他一些状态操控时, 以前可以用<a class="link"   href="https://github.com/acdlite/recompose" >recompose <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, 使用HOC让组件带有状态, 但是后来这个库的作者加入了React团队, v16.8版本后, 我们应该使用<a class="link"   href="https://reactjs.org/docs/hooks-overview.html" >Hooks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来管理组件状态和生命周期.</p>
<h3 id="recompose和hooks写法对比"><a href="#recompose和hooks写法对比" class="headerlink" title="recompose和hooks写法对比"></a>recompose和hooks写法对比</h3><p>使用recompose给组件设置状态及其他类似<code>componentDidMount</code>的功能时, 需要先定义好相应的状态和生命周期函数, 然后compose进组件:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Component</span> &#125; = <span class="title class_">React</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; compose, lifecycle, branch, renderComponent &#125; = <span class="title class_">Recompose</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> withUserData = <span class="title function_">lifecycle</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">loading</span>: <span class="literal">false</span>, ...data &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enhance = <span class="title function_">compose</span>(</span><br><span class="line">  withUserData</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="title function_">enhance</span>(<span class="function">(<span class="params">&#123; name, status &#125;</span>) =&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;User&quot;</span>&gt;</span>&#123; name &#125;—&#123; status &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">User</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure></div>
<p>而如果使用<code>Hooks</code>那么改写起来方便一点.</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState, useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">User</span> = (<span class="params">&#123;name, statue&#125;</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> [loading, toggleLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>); <span class="comment">//set default loading=true</span></span><br><span class="line">    <span class="title function_">useEffect</span>( <span class="function">() =&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">fetchDate</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> loading = <span class="literal">false</span>) ; <span class="comment">//useEffect替代componentDidMount, 主要不会合并状态!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;User&quot;</span>&gt;</span>&#123; name &#125;—&#123; status &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">User</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>React, hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>D3-selection总结</title>
    <url>/2019/04/18/frontend-2019-04-19-D3-selection/</url>
    <content><![CDATA[<h2 id="什么是D3-selections"><a href="#什么是D3-selections" class="headerlink" title="什么是D3.selections?"></a>什么是D3.selections?</h2><p><code>D3</code>的selection概念其实很简单, 就是一组元素节点. 具体代码表达就是<code>d3.selectAll(&#39;div&#39;)</code>, 所有选中的<code>div</code>就是selection,有的翻译叫它<code>选择集</code>, 然后基于这个selection就可以做各种操作.</p>
<h3 id="D3-selection"><a href="#D3-selection" class="headerlink" title="D3-selection"></a>D3-selection</h3><p>在selection上我们可以做到操作有: </p>
<ul>
<li>设置属性attribute</li>
<li>设置样式</li>
<li>设置属性property</li>
<li>修改HTML或text内容</li>
<li>等等…</li>
</ul>
<p>在绑定数据后返回的新selection上使用<code>data join</code>的<code>enter</code>,<code>exit</code>, <code>append</code>,<code>remove</code>, 我们可以<strong>增删改</strong>数据对应的元素.<br>selection的方法返回一般是当前selection的副本, 或者一个新的selection, 这样能使用链式方法的形式给选中的selection做相应的处理.<br>selection是不可变的<code>immutable</code>, 但是元素是可变的.</p>
<h3 id="D3-join-方法"><a href="#D3-join-方法" class="headerlink" title="D3-join 方法"></a>D3-join 方法</h3><ul>
<li><p><code>selection.data([data[,key]])</code>: 将指定的数据和选中的元素进行绑定, 返回一个新的selection. <code>data</code>可以是任意值(数字或对象)的数组, 或者是一个返回一组矩阵的函数. 当一个数据绑定到元素时, 数据将会绑定在元素的<code>__data__</code>property, 这样再次select的时候,数据仍旧保持绑定.</p>
<p><code>data</code>数据是会被分配给selection的每个组, 如果selection有多个组(如d3.selectAll…selectAll), 那么data参数应该以函数的形式指定. 如下图所示一个selection对象<code>_groups</code>数组中有多个对象.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-04-22%20at%2010.16.51.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-04-22%20at%2010.16.51.png"></p>
<p><code>data</code>方法中含有一个<code>key</code>参数可以用来指定data中的数据按什么方式绑定到元素, 默认不加参数采用按索引位置顺序一一绑定.一个例子:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;Ford&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;Jarrah&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;Kwon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;Locke&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;Reyes&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;Shephard&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Locke&#x27;</span>, <span class="attr">number</span>:<span class="number">14</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Ford&#x27;</span>, <span class="attr">number</span>: <span class="number">53</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kwon&#x27;</span>, <span class="attr">number</span>: <span class="number">3</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Shephard&#x27;</span>, <span class="attr">number</span>: <span class="number">38</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Reyes&#x27;</span>, <span class="attr">number</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jarrah&#x27;</span>, <span class="attr">number</span>: <span class="number">88</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d3.<span class="title function_">selectAll</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">    .<span class="title function_">data</span>(data, <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> d ? d.<span class="property">name</span> : <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">text</span>(<span class="keyword">function</span> (<span class="params">d</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> d.<span class="property">number</span>;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></div>
<p>上面这个例子达到的效果是让每个元素的text按<code>div</code>的<code>#id</code>和<code>data</code>映射的关系来展示展示数字.结果如下:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">53</span><br><span class="line">88</span><br><span class="line">3</span><br><span class="line">14</span><br><span class="line">18</span><br><span class="line">38</span><br></pre></td></tr></table></figure></div>
<p><code>update</code>和<code>enter</code>的selections以数据的顺序返回, 而<code>exit</code>selection保留原来的selection顺序.<br>如果<code>data</code>方法不传入参数, 方法返回选中元素的数据数组.</p>
</li>
<li><p><code>selection.join(enter[,update][,exit])</code>: 给绑定的数据做对应的增加&#x2F;移除&#x2F;排序元素操作, 返回<strong>合并</strong>的<code>enter</code>&#x2F;<code>update</code>selection. 想要更加颗粒度地控制join中的是三个操作, 可以显式地传入<code>enter, update, exit</code>方法来控制元素:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">svg.<span class="title function_">selectAll</span>(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">.<span class="title function_">data</span>(data)</span><br><span class="line">.<span class="title function_">join</span>(</span><br><span class="line">  <span class="function"><span class="params">enter</span> =&gt;</span> enter.<span class="title function_">append</span>(<span class="string">&quot;circle&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;green&quot;</span>),</span><br><span class="line">  <span class="function"><span class="params">update</span> =&gt;</span> update.<span class="title function_">attr</span>(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">)</span><br><span class="line">  .<span class="title function_">attr</span>(<span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>selection.enter()</code>: 返回<code>enter selection</code>. 什么是<code>enter selection</code>呢? 其实就是数据多于元素的情况下, 需要预留位置新给元素.而这个预留的<code>palceholder</code>就是返回值. 在使用<code>data()</code>函数后, 当前selection对象会增加<code>_enter</code>和<code>_exit</code>属性,<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-04-22%20at%2013.54.46.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-04-22%20at%2013.54.46.png"><br>如上图所示, 绑定数据后,<code>_enter</code>的值是<code>EnterNode</code>数组, 这时候使用<code>enter()</code>就会进入<code>_enter</code>属性(就是返回<code>enter selection</code>了), 把还没有找到DOM的数据找出来调用<code>append()</code>生成最终需要生成的DOM.如下图所示, 调用<code>append</code>后,最终要多余生成的<code>rect</code>就生成了.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-04-22%20at%2014.00.17.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-04-22%20at%2014.00.17.png"></p>
</li>
<li><p><code>selection.exit()</code>: 返回<code>exit</code>selection, 就是返回那些没有数据可以再绑定的元素.</p>
</li>
<li><p><code>selection.datum([value])</code>: 读取或设置选中的selection的__data__.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">d3.selectAll(&#x27;div&#x27;).datum(33).text(d=&gt;d)  //所有的div渲染成33</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>D3, data-driven</tag>
      </tags>
  </entry>
  <entry>
    <title>小探微前端</title>
    <url>/2022/03/18/frontend-2022-03-19-microfront-intro/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="关键好处和缺点-Key-Pros-amp-Cons-of-Micro-frontend"><a href="#关键好处和缺点-Key-Pros-amp-Cons-of-Micro-frontend" class="headerlink" title="关键好处和缺点 Key Pros&amp;Cons of Micro frontend"></a>关键好处和缺点 Key Pros&amp;Cons of Micro frontend</h3><p>微前端的好处类似微服务，主要表现在:</p>
<ul>
<li>分开的前端代码仓库，每个仓库代码量少</li>
<li>每个小团队有更多的自主权，解耦相互依赖</li>
<li>重构或更新部分代码的代价更小</li>
</ul>
<p>微前端的缺点主要有:</p>
<ul>
<li>多个前端仓库可能导致依赖包的重复，这样客户端会多下载相关医疗</li>
<li>高度的自治可能会导致开发的碎片化</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>frontend, micro</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 8.5.35 简介</title>
    <url>/2017/11/28/java-2017-11-29-tomcat-8-5-35-intro/</url>
    <content><![CDATA[<p>今天看了一下官网的<code>Tomcat</code>介绍, 特地记录一下相关信息. <code>Tomcat</code>是一个开源的<code>Java Servlet Container</code>, 这个容器提供了一个Java运行的HTTP web的环境.</p>
<h3 id="一个术语"><a href="#一个术语" class="headerlink" title="一个术语"></a>一个术语</h3><p><strong><code>Context</code></strong>: 一个<code>Context</code>就是一个web应用.</p>
<h3 id="Tomcat解压后包含的相关目录和文件"><a href="#Tomcat解压后包含的相关目录和文件" class="headerlink" title="Tomcat解压后包含的相关目录和文件"></a>Tomcat解压后包含的相关目录和文件</h3><ul>
<li><code>/bin</code> 里面的脚本用于启动, 停止, 和其他如设置环境变量的功能. <code>*.sh</code>是<code>Unix</code>系统, <code>*.bat</code>是<code>Windows</code>系统.</li>
<li><code>/conf</code> 里面有一些配置文件和<code>DTD</code>(<code>Document Type Definition</code>). 最重要的是<code>Server.xml</code>, 是容器的主要配置文件.</li>
<li><code>/logs</code> log文件</li>
<li><code>/webapps</code> 应用所在处</li>
</ul>
<h3 id="CATALINA-HOME-和-CATALINA-BASE"><a href="#CATALINA-HOME-和-CATALINA-BASE" class="headerlink" title="CATALINA_HOME 和 CATALINA_BASE"></a>CATALINA_HOME 和 CATALINA_BASE</h3><p><code>CATALINA_HOME</code>是<code>tomcat</code>安装的根目录, <code>CATALINA_BASE</code>代表了一个<code>tomcat</code>实例运行的配置根目录. 如果一台服务器有多个<code>tomcat</code>实例在跑, 可以使用这个参数分别启动不同实例. 总的来说, <code>CATALINA_HOME</code>的位置包含了静态文件如<code>.jar</code>和二进制文件, <code>CATALINA_BASE</code>位置包含了配置文件, 日志, 部署的应用和其他运行所需的依赖.<br>使用同一个<code>CATALINA_HOME</code>和多个<code>CATALINA_BASE</code>的好处是:</p>
<ul>
<li>容易更新tomcat, 由于共享<code>CATALINA_HOME</code>中<code>.jar</code>文件和二进制文件, 我们可以只用更新一个tomcat, 但是运行多个tomcat实例.</li>
<li>防止重复<code>*.jar</code>文件.</li>
<li>共享一些脚本, 如<code>setenv</code>脚本</li>
</ul>
<h3 id="RUNNING-txt"><a href="#RUNNING-txt" class="headerlink" title="RUNNING.txt"></a>RUNNING.txt</h3><p><code>RUNNING.txt</code>这个文件包含所有用于在各个平台运行tomcat的信息, 需要仔细看一下.<br>在Unix安装tomcat的时候, 需要把<code>JAVA_HOME</code>环境变量设置于<code>JDK</code>的基目录.</p>
<h3 id="使用tomcat开发"><a href="#使用tomcat开发" class="headerlink" title="使用tomcat开发"></a>使用tomcat开发</h3><p>在<code>Servlet API Specification 2.2</code>以后, 公认使用<code>Web Application Archive</code>（WAR)作为网页应用的标准格式. 所以一个打包的web应用是有标准的层级布局的。比如把HTML和JSP页面放在一起作为用户交互， 然后部署的时候管理员给你的应用设置一个<code>context path</code>， 比如<code>catalog/</code>, 那么一个请求到<code>catalog/index.html</code>就会取你项目根目录的<code>index.html</code>文件.</p>
<h4 id="标准的WAR目录结构"><a href="#标准的WAR目录结构" class="headerlink" title="标准的WAR目录结构"></a>标准的WAR目录结构</h4><p>打包一个标准的WAR， 一般会在项目中有如下目录结构：</p>
<ul>
<li><code>html, jsp, etc</code>这些文件是用户可以在客户端访问的文件， 可以在一个文件夹或分成多个目录。</li>
<li><code>/WEB-INF/web.xml</code>这个文件是<code>Web Application Deployment Descriptor</code>, 代表应用部署的描述文件.这个xml文件描述了应用所组成的部分:包括servlet和其他组件; 还有初始化参数和容器级别的安全限制.</li>
<li><code>/WEB-INF/classes/</code>包含了java类文件, 包含所有没有打成jar文件的java文件.如果你的java类以package的形式组织, 那么可以在<code>/WEB-INF/classes/com/...class</code>找到.</li>
<li><code>/WEB-INF/lib/</code>这个目录包含了jar包<br>在<code>/WEB-INF/lib/</code>和<code>/WEB-INF/classes/</code>中的所有java类是对整个应用可见的.</li>
</ul>
<h4 id="共享Library文件"><a href="#共享Library文件" class="headerlink" title="共享Library文件"></a>共享Library文件</h4><p>大部分servlet容器如tomcat支持预安装jar文件, 然后使它们可以被web应用可见(不需要被应用引入). <code> $CATALINA_HOME/lib</code>是tomcat安装共享代码的地方. Tomcat使用<code>class loader</code>来定位和共享这些类. 首先, Tomcat会安装<code>java.lang.ClassLoader</code>实现的<code>class loader</code>, 让web应用和容器的组成部分能够访问不同的类和资源. 这个机制实现了<code>Servlet Specification</code>V2.4的9.4和9.6章节提出的技术要求.</p>
<h3 id="class-loader的大致情况"><a href="#class-loader的大致情况" class="headerlink" title="class loader的大致情况"></a>class loader的大致情况</h3><p>java环境中, <code>class loader</code>是父子树结构. 通常情况下, 当一个<code>class loader</code>需要加载某个类或者资源时, 它会首先去请求它的父<code>class loader</code>, 如果父<code>class loader</code>不能加载某个类或者资源才会从它自己的仓库查找. 注意, web应用的<code>class loader</code>可能有一点不一样, 但是总体原则类似.</p>
<h4 id="class-loader定义"><a href="#class-loader定义" class="headerlink" title="class loader定义"></a>class loader定义</h4><p>tomcat初始化时会创建如下<code>class loader</code>:</p>
<ul>
<li>Bootstrap. 这个<code>class loader</code>包含了JVM的基本运行类和<code>$JAVA_HOME/jre/lib/ext</code>中的系统扩展jar包.</li>
<li>System. 这个<code>class loader</code>初始化所有在<code>CLASSPATH</code>定义的内容. 这个路径中所有的类可以被tomcat内部类和应用看见, 除了tomcat的catalina启动脚本(<code>$CATALINA_HOME/bin/catalina.sh</code>).这个启动脚本会忽略<code>CLASSPATH</code>环境变量, 而从这个脚本启动的<code>system class loader</code>将会从如下仓库构建:<ul>
<li><code>$CATALINA_HOME/bin/bootstrap.jar</code>, main()函数用于初始化tomcat server和class loader实现类.</li>
<li><code>$CATALINA_BASE/bin/tomcat-juli.jar</code>或者<code>CATALINA_BASE/bin/tomcat-juli.jar</code>. 日志实现类.</li>
<li><code>$CATALINA_HOME/bin/commons-daemon.jar</code> <a class="link"   href="https://commons.apache.org/proper/commons-daemon/" >Apache Commons Daemon <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 项目中的类.</li>
</ul>
</li>
<li>Common. 这个<code>class loader</code>包含了所有能让Tomcat内部类和所有应用可见的类. 这个<code>class loader</code>的搜索路径在<code>$CATALINA_BASE/conf/catalina.propeties</code>文件的<code>common.loader</code>属性定义.<br><code>common.loader=&quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</code></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java, tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Pod含义</title>
    <url>/2018/01/03/kubernetes-2018-01-04-Kubernetes-pod/</url>
    <content><![CDATA[<blockquote>
<p>官网文档 <a class="link"   href="https://kubernetes.io/docs/concepts/workloads/pods/pod/" >https://kubernetes.io/docs/concepts/workloads/pods/pod/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="什么是Pod？"><a href="#什么是Pod？" class="headerlink" title="什么是Pod？"></a>什么是Pod？</h3><p>Pod的本身含义是<strong>一群鲸鱼</strong>的意思, 而Docker的Logo刚好是🐳。所以简单说pod就是一组容器。（不一定是docker container) pod里的容器共享存储，网络和运行的容器环境。共享的东西包括cgroup, 命名空间, Ip, 端口和其他隔离方面的东西</p>
<h3 id="pod内部通讯"><a href="#pod内部通讯" class="headerlink" title="pod内部通讯"></a>pod内部通讯</h3><p>由于pod里面的容器共享ip, 容器间的通讯可以通过内部进程通信（SystemV semaphores， POSIX shared memory）或localhost.</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes的service</title>
    <url>/2018/02/21/kubernetes-2018-02-22-k8s-service/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://kubernetes.io/docs/concepts/services-networking/service/" >https://kubernetes.io/docs/concepts/services-networking/service/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="Service定义"><a href="#Service定义" class="headerlink" title="Service定义"></a>Service定义</h3><p>简单来说，<code>service</code>是一组pods和访问这些pods<strong>规则</strong>的逻辑抽象， 它的作用就是代理pods和端口映射（具体的实现似乎是通过复杂的iptable路由NAT）。Service是一个REST对象，这个对象将所有通过某个node端口进来TCP或者UDP包转发给下游pod， 默认上游的端口直接映射到下游pod，比如80—&gt;80，<br>但是也可以指定下游端口为字符串（将pod端口取个名称）， 这样下游不同的pod端口可以对应同一个端口名，大大提供了便利性。<code>service</code>定义代码如下，通过对apiserver post这组定义，可以产生一个新的service。（对于原生k8s服务，还会生成一个同名的<code>Endpoints</code>用来更新pod的地址）。每个node里有一个进程<code>kube-proxy</code>会分配的虚拟IP（cluster ip）。<code>kube-proxy</code>是一个守护进程, 管理着每个节点的service的虚拟IP. service既可以管理kubernetes原生的服务（通过更新<code>Endpoints</code>API)，也可以抽象非k8s服务.(通过提供VIP)<br>k8s的Serivce支持TCP和UDP两种协议，默认是TCP.下面这个例子执行<code>kubectl create -f my-service.yml</code>后，将会生产一个叫my-service <code>Service</code>对象和一个<br>叫my-service的<code>Endpoints</code>对象（其实就是一组pods的ip)，<code>Service</code>负责将流量导入到某组pods，<code>Endpoints</code>负责具体分配给某个pod。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span>  <span class="comment">#service port</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9376</span>  <span class="comment"># pod port</span></span><br></pre></td></tr></table></figure></div>

<h3 id="抽象外部服务"><a href="#抽象外部服务" class="headerlink" title="抽象外部服务"></a>抽象外部服务</h3><p>上面的例子使用label selector找到pods， 但是也有可能服务不是kubernetes管理的，这时候可以使用non selector service + endpoints抽象一个外部服务。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure></div>
<p>没有<code>selector</code>的Service是不会生成<code>Endpoint</code>的，需要手动把对应的非k8s服务Endpoint映射到service.</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">addresses:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure></div>
<p>如果在云上使用类似RDS之类的服务，没有IP,可以使用<code>externalName</code>来定义service. 这样就会使用DNS来解析地址，不会使用代理或者端口映射。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ExternalName</span></span><br><span class="line">  <span class="attr">externalName:</span> <span class="string">my.database.example.com</span></span><br></pre></td></tr></table></figure></div>
<h3 id="虚拟IP和service代理"><a href="#虚拟IP和service代理" class="headerlink" title="虚拟IP和service代理"></a>虚拟IP和service代理</h3><p>每一个k8s节点都有一个kube-proxy服务来管理service的虚拟IP. 有三种实现service代理模式： userspace, iptables, ipvs. 在v1.0版本，<code>service</code>是一个4层通信协议，直到TCP层，所以代理只在用户空间进行。v1.1加入了<code>ingress</code>和<code>iptables proxy</code>, 实现了7层<code>service</code>.</p>
<ul>
<li><code>userspace</code>, 这个模式下当用户访问service时，iptables中有规则会把流量从service对应的port转发到kube-proxy在node创建的随机端口，随机端口再代理到下游pods。这个模式下kube-proxy会监控kubernetes master的对Service和endpoints的增删，<br>并会给每一个service随机创建一个本地node端口，任何到这个端口的连接将会被代理到service后面pods.（具体是哪一个pod取决于service的<code>SessionAffinity</code>)， 默认采用轮询的方式转发流量.</li>
<li><code>iptables</code>, 默认kube-proxy采用的方式。这个模式下kube-proxy也会监控kubernetes master的对Service和endpoints的增删，每一个service都有一套iptable规则，根据service的ip:port重定向流量到某个Service后端endpoints, endpoints也会安装iptables来选择pod。特点是iptable不需要在用户态和内核态转换， 缺点是如果原来选择的pod无效，<br>那么不会重试另一个pod,需要readiness探针来实现重试。具体实现原理可以看<a class="link"   href="https://github.com/jasonGeng88/blog/blob/master/201707/k8s-service.md#q3kube-proxy-%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-iptables-%E5%81%9A%E5%88%B0%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%E7%9A%84%E5%AF%B9%E4%BA%8E-iptables-%E4%B8%8D%E4%BA%86%E8%A7%A3%E7%9A%84%E5%90%8C%E5%AD%A6%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BF%87" >地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><code>ipvs</code>, 这模式是v1.9beta版。 此模式调用netlink接口创建ipvs规则，然后从service和endpoint同步ipvs规则， 当一个service被访问时，流量会被重定向到后端pods。 ipvs使用的是hash表，有着更好的性能和多种负载均衡方案：<ul>
<li>round robin</li>
<li>least connection</li>
<li>destination hashing</li>
<li>source hashing</li>
<li>shortest expected delay</li>
<li>never queue</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S的StatefulSets</title>
    <url>/2018/03/06/kubernetes-2018-03-07-StatefulSets/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>K8S的StatefulSets是一个负载API对象用于管理有状态的应用。StatefulSets会给每个pod维护一个独特的标记， 所以这些pods是不能交换的。<br>注意，V1.9才是稳定版本， 可以通过apiserver发送<code>--runtime-config</code>禁用这个控制器。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>StatefulSets适合如下应用场景：</p>
<ul>
<li>稳定、唯一的网络标识</li>
<li>稳定、持久的存储</li>
<li>有序的部署和扩展</li>
<li>有序的删除和终止</li>
<li>有序的自动化滚动更新<br>如果不需要持久化，应该考虑Deployment或ReplicaSet控制器.</li>
</ul>
<h2 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h2><ul>
<li>版本1.9</li>
<li>如果是给pod提供存储，那么必须预先配置好PV, 或者通过PersistentVolume Provisioner提供</li>
<li>删除或者向下缩减StatefulSet并不会删除相应的volume, 出于安全考虑。</li>
<li>需要创建一个Headless Service（clusterIP: None）负责pods的网络标识</li>
</ul>
<h2 id="StatefulSet的组件"><a href="#StatefulSet的组件" class="headerlink" title="StatefulSet的组件"></a>StatefulSet的组件</h2><p>下面这个例子创建一个无头的service, 一个有状态的pod，挂载在声明模板的PV.</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.template.metadata.labels</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span> <span class="comment"># by default is 1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.selector.matchLabels</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/nginx-slim:0.8</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;my-storage-class&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Pod-Identity"><a href="#Pod-Identity" class="headerlink" title="Pod Identity"></a>Pod Identity</h2><p>StatefulSets有一个唯一的identity，由有序的（由0开始分配给pod），稳定的网络标识符和稳定的存储组成。pod更换node也不会改变这个id。</p>
<ul>
<li>序号从0开始</li>
<li>稳定的网络ID, StatefulSets中pod的主机名由<code>$(statefulset name)-$(ordinal)</code>规则组成，所以上述yml文件中，pods的名称分别web-0,web-1,web-2； 而StatefulSets的域名则为<code>$(service name).$(namespace).svc.cluster.local</code>；pod的域名则为<code>$(podname).$(governing service domain)</code>，<code>$(governing service domain)</code>是<code>serviceName</code>. 见下图：<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-07%20%E4%B8%8B%E5%8D%883.31.13.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-07%20%E4%B8%8B%E5%8D%883.31.13.png"></li>
</ul>
<h2 id="更新StatefulSet"><a href="#更新StatefulSet" class="headerlink" title="更新StatefulSet"></a>更新StatefulSet</h2><p>1.7版本以后，StatefulSet控制器支持自动更新。更新策略取决于StatefulSet对象的<code>spec.updateStrategy</code>字段，这个功能可以用于更新容器镜像，<br>资源用量，标签，pods的注释(如果改了其它设置，就需要删除statefulsets重新create), 1.9支持<code>RollingUpdate</code>和<code>OnDelete</code>两种更新策略。</p>
<ul>
<li><code>RollingUpdate</code>将会把statefulset的pods按倒叙更新。首先让updateStrategy使用rollingupdate<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch statefulset web -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;updateStrategy&quot;:&#123;&quot;type&quot;:&quot;RollingUpdate&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">statefulset <span class="string">&quot;web&quot;</span> patched</span><br></pre></td></tr></table></figure></div>
然后更换pod的image， 这个过程中，pod将倒序终止，再更新。如果某个pod更新失败，将会对整个statefulsets做回滚。<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch statefulset web --<span class="built_in">type</span>=<span class="string">&#x27;json&#x27;</span> -p=<span class="string">&#x27;[&#123;&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/image&quot;,    &quot;value&quot;:&quot;gcr.io/google_containers/nginx-slim:0.8&quot;&#125;]&#x27;</span></span><br><span class="line">statefulset <span class="string">&quot;web&quot;</span> patched</span><br></pre></td></tr></table></figure></div>
可以使用<code>kubectl rollout status sts/&lt;name&gt;</code>查看更新状态。这个策略有一个属性<code>partition</code>可以用于<strong>分段</strong>更新，就是制定更新一部分pods,<br>使用这个特性，就可以进行金丝雀测试（灰度）。<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch statefulset web -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;updateStrategy&quot;:&#123;&quot;type&quot;:&quot;RollingUpdate&quot;,&quot;rollingUpdate&quot;:&#123;&quot;partition&quot;:3&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">statefulset <span class="string">&quot;web&quot;</span> patched</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="删除StatefulSet"><a href="#删除StatefulSet" class="headerlink" title="删除StatefulSet"></a>删除StatefulSet</h2><p>简单删除命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete -f file.yml</span><br><span class="line">kubectl delete statefulsets &lt;statefuleset_name&gt;</span><br></pre></td></tr></table></figure></div>
<p>如果想要保留pods，可以使用参数<code>--cascade=false</code></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes的volume</title>
    <url>/2018/03/07/kubernetes-2018-03-08-k8s-volume/</url>
    <content><![CDATA[<h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><p>简单的说， 一个volume就是一个在磁盘或容器中的目录，volume里面有pod中容器可以访问的数据。K8S的volume主要解决容器中数据存储和容器间数据共享的问题。k8s的volume和pod有相同的生命周期。一个pod可以同时使用不同的volume类型。如果使用volume, 一个pod需要通过<code>spec.volumes</code>指定volume类型，<code>spec.containers.volumeMounts</code>指定挂载目录。volume不能再挂载到其他volume,</p>
<h2 id="k8s支持的Volumes类型"><a href="#k8s支持的Volumes类型" class="headerlink" title="k8s支持的Volumes类型"></a>k8s支持的Volumes类型</h2><ul>
<li>wsElasticBlockStore</li>
<li>azureDisk</li>
<li>azureFile</li>
<li>cephfs</li>
<li>configMap<br><code>configMap</code>提供了一种往pod里注入配置的方式。如果配置文件能够在Dockerfile中add进去，我建议还是用add，而不是</li>
<li>csi</li>
<li>downwardAPI</li>
<li>emptyDir<br><code>emptyDir</code>这个卷是pod在node创建时生成的空卷，生命周期和pod一致， 存储在pod所在的node，删除pod将删除<code>emptyDir</code>, 存储媒介和node一致，但是可以通过<code>emptyDir.medium: Memory</code>把它mount到内存（docker的tmpfs）。它使用场景可以作为原型或checkpointing点.<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">k8s.gcr.io/test-webserver</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>fc (fibre channel)</li>
<li>flocker</li>
<li>gcePersistentDisk</li>
<li>gitRepo</li>
<li>glusterfs</li>
<li>hostPath<br><code>hostPath</code>把node的目录挂进pod，可以用于：容器访问Docker内部<code>/var/lib/docker</code>; 跑cAdvisor要用到<code>/sys</code>; 或者允许pod运行前检查<code>hostPath</code>是否存在，然后再对pod做操作。<code>path</code>是<code>hostPath</code>必须的参数，还可以通过<code>type</code>来指定volume类型，type的类型如下：<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8A%E5%8D%8810.28.01.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8A%E5%8D%8810.28.01.png"><br>由于是主机的路径, 所以需要注意权限问题。<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">k8s.gcr.io/test-webserver</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/test-pd</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="comment"># directory location on host</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data</span></span><br><span class="line">      <span class="comment"># this field is optional</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure></div></li>
<li>iscsi</li>
<li>local. 1.7以后新特性，需要开启<code>PersistentLocalVolumes</code>, 如果是1.9还需要开启<code>VolumeScheduling</code>。<code>local volume</code>代表了本地挂载的存储设备，可以被用于创建静态PersistentVolume。相比于hostPath, local卷可以被系统通过节点自动地发现PV, 而不用手动把某个pod分配到node. 下面的例子就是使用local来创建PV:<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"> <span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"> <span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">example-pv</span></span><br><span class="line">   <span class="attr">annotations:</span></span><br><span class="line">     <span class="attr">&quot;volume.alpha.kubernetes.io/node-affinity&quot;:</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">        &quot;requiredDuringSchedulingIgnoredDuringExecution&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;nodeSelectorTerms&quot;: [</span></span><br><span class="line"><span class="string">                &#123; &quot;matchExpressions&quot;: [</span></span><br><span class="line"><span class="string">                    &#123; &quot;key&quot;: &quot;kubernetes.io/hostname&quot;,</span></span><br><span class="line"><span class="string">                      &quot;operator&quot;: &quot;In&quot;,</span></span><br><span class="line"><span class="string">                      &quot;values&quot;: [&quot;example-node&quot;]</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                ]&#125;</span></span><br><span class="line"><span class="string">             ]&#125;</span></span><br><span class="line"><span class="string">          &#125;&#x27;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">100Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/mnt/disks/ssd1</span></span><br></pre></td></tr></table></figure></div></li>
<li>nfs. 如果pod的删除， nfs不会删除数据。NFS可以同时被多节点读写。</li>
<li>persistentVolumeClaim<br><code>persistentVolumeClaim</code>把<code>persistentVolume</code>挂进pod，<code>persistentVolume</code>是一种k8s用户声明持久化存储的方式，好处是用户不需要底层存储环境细节。</li>
<li>projected， 可以映射多个volume到同一个目录。 可以用于<code>secret</code>, <code>downwardAPI</code>, <code>configMap</code>.<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volume-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">container-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">all-in-one</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/projected-volume&quot;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">all-in-one</span></span><br><span class="line">    <span class="attr">projected:</span></span><br><span class="line">      <span class="attr">sources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">my-group/my-username</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">downwardAPI:</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;labels&quot;</span></span><br><span class="line">              <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">metadata.labels</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;cpu_limit&quot;</span></span><br><span class="line">              <span class="attr">resourceFieldRef:</span></span><br><span class="line">                <span class="attr">containerName:</span> <span class="string">container-test</span></span><br><span class="line">                <span class="attr">resource:</span> <span class="string">limits.cpu</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">myconfigmap</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">config</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">my-group/my-config</span></span><br></pre></td></tr></table></figure></div></li>
<li>portworxVolume</li>
<li>quobyte</li>
<li>rbd</li>
<li>scaleIO</li>
<li>secret</li>
<li>storageos</li>
<li>vsphereVolume</li>
</ul>
<h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p><code>emptyDir</code>的存储介质取决于kubelet根目录的存储介质(&#x2F;var&#x2F;lib&#x2F;kubelet)， <code>emptyDir</code>和<code>hostPath</code>目前没有限制用量，也没有在容器间隔离数据。</p>
<h3 id="Mount-propagation-挂载传递"><a href="#Mount-propagation-挂载传递" class="headerlink" title="Mount propagation 挂载传递"></a>Mount propagation 挂载传递</h3><p>1.8新特性。挂载传递能让同一pod里的容器共享volume, 甚至可以在同一node的pods间共享。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>在云上使用k8s动态PV</title>
    <url>/2018/03/11/kubernetes-2018-03-12-k8s-dynamic-volume-provision/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://v1-8.docs.kubernetes.io/docs/concepts/storage/dynamic-provisioning/" >https://v1-8.docs.kubernetes.io/docs/concepts/storage/dynamic-provisioning/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>动态卷配置允许按需创建存储卷。如果没有动态配置，管理员必须手动配置创建新的存储， 然后创建PV对象。动态卷配置的功能能让管理员不必预先配置存储。<br>而是当用户需要的时候自动配置存储。它可以按用户需要的用量配置存储空间，不像静态那样可能出现超额分配用量。</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>动态配置数据卷的实现是基于<code>StorageClass</code>API对象。管理员可以配置很多<code>StorageClass</code>对象，每一个都可以指定一个存储供应商。管理员可以给一个<br>集群定义和暴露多个存储，每一个都有不同的参数配置。这样能减轻配置存储的复杂度，使用户简单选择存储服务。</p>
<h3 id="开启动态配置数据卷"><a href="#开启动态配置数据卷" class="headerlink" title="开启动态配置数据卷"></a>开启动态配置数据卷</h3><ul>
<li>首先需要创建StorageClass对象, 可以指定使用哪个供应商和那些参数，如下例：<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slow</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/gce-pd</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">pd-standard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fast</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/gce-pd</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">pd-ssd</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>如果使用aliyun的NAS作为provisioner, 需要先安装aliyun nas的插件</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">alicloud-nas</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">alicloud/nas</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">alicloud-nas-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-alicloud-nas-controller</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">alicloud-nas-controller</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">alicloud-disk-controller-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">alicloud-nas-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">alicloud-nas-controller</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">node.cloudprovider.kubernetes.io/uninitialized</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">         <span class="attr">node-role.kubernetes.io/master:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">alicloud-nas-controller</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alicloud-nas-controller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/acs/alicloud-nas-controller:v1.8.4</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">alicloud/nas</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">0cd8b4a576-mmi32.cn-hangzhou.nas.aliyuncs.com</span>  <span class="comment"># 指定创建的NAS挂载点</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="string">0cd8b4a576-mmi32.cn-hangzhou.nas.aliyuncs.com</span>   <span class="comment"># 指定创建的NAS挂载点</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用动态配置数据卷"><a href="#使用动态配置数据卷" class="headerlink" title="使用动态配置数据卷"></a>使用动态配置数据卷</h3><p>用户需要在PVC指定<code>StorageClassName</code>, 如下</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">claim1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">fast</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">30Gi</span></span><br></pre></td></tr></table></figure></div>

<h3 id="设置默认动态配置"><a href="#设置默认动态配置" class="headerlink" title="设置默认动态配置"></a>设置默认动态配置</h3><p>如果有个用户在<code>PersistentVolumeClaim</code>没有指定<code>storageClassName</code>， 那么可以配置默认的<code>storageClassName</code>使用。具体是在创建的<code>storageClassName</code>中annotation<br><code>storageclass.kubernetes.io/is-default-class</code></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用aliyun容器服务搭建mysql</title>
    <url>/2018/03/09/kubernetes-2018-03-10-k8s-mysql/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文简单介绍用aliyun的Kubernetes容器服务搭建mysql集群。首先确保k8s集群已经创建，并且已经开通了相关服务如NAS、容器镜像仓库等服务。</p>
<h3 id="第一步-创建数据卷"><a href="#第一步-创建数据卷" class="headerlink" title="第一步 创建数据卷"></a>第一步 创建数据卷</h3><ul>
<li>k8s有个nodeSelector的功能，如果mysql由于单点故障漂移了node，原来的存储会自动重新挂载到新的node(这一步骤是在转移node之前做的). 这样避免了漂移node导致有状态服务不可用的情况。</li>
<li>aliyun支持k8s三种存储：网盘, NAS, OSS. 基于性能考虑，我们选择NAS。首先需要在NAS控制台右上角选择<code>创建文件系统</code>, 注意所创建的文件系统所在区域必须和k8s集群所在的区域在同一地域:<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.36.40.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.36.40.png"><br>然后在新生成的文件系统选择<code>添加挂载点</code>，如图已经有两个挂载点，还不是很清楚为什么不能再添加新的挂载点了。添加的挂载点必须和k8s集群在同一个VPC! 记住<code>挂载地址</code>后续创建k8s数据卷时用到。<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.38.33.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.38.33.png"><br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.40.44.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.40.44.png"></li>
<li>然后在k8s控制台右上角选中<code>创建</code>, 填上新创建的挂载点域名，点击确定数据卷就创建了：<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.44.29.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.44.29.png"></li>
</ul>
<h3 id="第二步-使用aliyun的镜像创建mysql"><a href="#第二步-使用aliyun的镜像创建mysql" class="headerlink" title="第二步 使用aliyun的镜像创建mysql"></a>第二步 使用aliyun的镜像创建mysql</h3><ul>
<li>在容器服务控制台点击<code>使用镜像</code>，选择mysql部署应用, 第一步填应用名称和选择命名空间：<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.51.42.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%884.51.42.png"></li>
<li>然后设置应用配置，注意在这里的环境变量必须设置MYSQL_ROOT_PASSWORD或MYSQL_ALLOW_EMPTY_PASSWORD或MYSQL_RANDOM_ROOT_PASSWORD之一，否则会创建失败。这个页面暂时没有找到设置k8s secret的地方，所以可能如编排模块那样使用secret。其它的资源和网络按需设置, 注意填上上一步创建的pv<code>mysql-pv</code>, 点击创建，然后在控制台应该能看到绿色的部署成功，若有错误，请点进容器组查看相关log。(插一句，如果使用k8s secret创建私密信息，也不能把Secret模板commit到git, 因为base64不是真的加密啊！)<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%885.04.38.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-10%20%E4%B8%8B%E5%8D%885.04.38.png"></li>
</ul>
<h3 id="第三部，创建service"><a href="#第三部，创建service" class="headerlink" title="第三部，创建service"></a>第三部，创建service</h3><ul>
<li>现在创建的mysql还只能通过172docker的网段访问， 想要所有pods通过域名访问，则需要给mysql加一个k8s service.可以通过k8s控制台的<code>服务</code>创建，编排示例如下：</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">app-mysql</span>  <span class="comment"># 注意，这里是pod的label</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>这样，基本上容器集群mysql搭建完成了。登入master, 使用k8s端口映射可以验证一下:</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZuf626rqqtw2yxzeeeqtoZ ~]<span class="comment"># kubectl port-forward `kubectl get pods|grep -v NAME|cut -d &quot; &quot; -f 1` 3306:3306</span></span><br><span class="line">Forwarding from 127.0.0.1:3306 -&gt; 3306</span><br><span class="line"></span><br><span class="line">[root@iZuf626rqqtw2yxzeeeqtoZ ~]<span class="comment"># mysql -h 127.0.0.1 -u root -P 3306 -p </span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 4</span><br><span class="line">Server version: 5.7.18 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; </span><br></pre></td></tr></table></figure></div>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>可能对阿里云的容器服务还不是很熟悉，感觉控制台有些细节还能够改进。本文还未涉及mysql的HA方案（可选Galera+StatefulSet) 。当然上生产，我们还需要进一步检验有状态服务到底适不适合容器化。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S使用私有镜像</title>
    <url>/2018/03/11/kubernetes-2018-03-12-k8s-pull-private-image/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account" >https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果想要k8s能够拉取使用私有镜像需要创建secret, 然后有两种方法指定secret, 拉取image。 一是在pod的编排模板指定<code>imagePullSecret</code>, 二是修改<code>service account</code>的配置，本文讲述第二种方法。</p>
<h3 id="第一步-创建imagePullSecret"><a href="#第一步-创建imagePullSecret" class="headerlink" title="第一步 创建imagePullSecret"></a>第一步 创建imagePullSecret</h3><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">secret</span> <span class="string">docker-registry</span> <span class="string">myregistrykey</span> <span class="string">--docker-server=DOCKER_REGISTRY_SERVER</span> <span class="string">--docker-username=DOCKER_USER</span> <span class="string">--docker-password=DOCKER_PASSWORD</span> <span class="string">--docker-email=DOCKER_EMAIL</span></span><br><span class="line"><span class="string">secret</span> <span class="string">&quot;myregistrykey&quot;</span> <span class="string">created.</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">secrets</span> <span class="string">myregistrykey</span></span><br><span class="line"><span class="string">NAME</span>             <span class="string">TYPE</span>                              <span class="string">DATA</span>    <span class="string">AGE</span></span><br><span class="line"><span class="string">myregistrykey</span>    <span class="string">kubernetes.io/.dockerconfigjson</span>   <span class="number">1</span>       <span class="string">1d</span></span><br></pre></td></tr></table></figure></div>
<p>如果是使用aliyun的私有镜像，<code>docker-server</code>可是设置成vpc的server地址，这样省一点流量。</p>
<h3 id="第二步-修改serviceaccount"><a href="#第二步-修改serviceaccount" class="headerlink" title="第二步 修改serviceaccount"></a>第二步 修改serviceaccount</h3><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">patch</span> <span class="string">serviceaccount</span> <span class="string">default</span> <span class="string">-p</span> <span class="string">&#x27;&#123;&quot;imagePullSecrets&quot;: [&#123;&quot;name&quot;: &quot;myregistrykey&quot;&#125;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>完成！</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S管理容器的计算资源</title>
    <url>/2018/03/12/kubernetes-2018-03-13-k8s-manage-resource/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://v1-8.docs.kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/" >https://v1-8.docs.kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>k8s可以给pod设置计算资源用量， 当遇到违反某些不满足性能的条件时，k8s会有一套机制来处理。限制资源在编排模拟中使用<code>limits</code>或<code>requests</code>.<br><code>requests</code>指定资源的最小要求，<code>limits</code>指定最大用量。详细关系是 <code>0 &lt;= request &lt;=Node Allocatable</code>和<code>request &lt;= limit &lt;= Infinity</code>。<br>具体查看<a class="link"   href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/resource-qos.md" >resource-qos <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Deployment</title>
    <url>/2018/04/06/kubernetes-2018-04-08-k8s-deployments/</url>
    <content><![CDATA[<h3 id="k8s的部署Deployment"><a href="#k8s的部署Deployment" class="headerlink" title="k8s的部署Deployment"></a>k8s的部署Deployment</h3><p>k8s的<code>Deployment</code>提供了<code>pods</code>和<code>ReplicaSets</code>的更新.<br>只需在Deployment对象声明你想要的部署状态, <code>Deployment</code>控制器就会更新到需要的状态.所以这种方式是声明式的.<br>除非第一次部署,k8s采用的部署方式是rolling update(滚动更新). 大致意思是保证服务可用的情况下, 创建一定量的新pods,然后删除一定量的pods,循环这些步骤直到部署完成.</p>
<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1</span><br><span class="line">kind: Deployment   # apiVersion, kind, metadata, spec这四个字段必须要</span><br><span class="line">metadata:</span><br><span class="line">  name: appweb</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:  # 多个label做and处理. 部署时会自动加一个hash label, 用于区分部署版本</span><br><span class="line">      app: appweb</span><br><span class="line">      tier: backend</span><br><span class="line">      version: 1.0</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: appweb</span><br><span class="line">        tier: backend</span><br><span class="line">        version: 1.0</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: app</span><br><span class="line">        image:  registry-vpc.cn-shanghai.aliyuncs.com/web1.0</span><br><span class="line">        env:</span><br><span class="line">          - name: app_WEB_DATABASE_URL</span><br><span class="line">            valueFrom:</span><br><span class="line">              secretKeyRef:</span><br><span class="line">                name: appsecrets</span><br><span class="line">                key: app_WEB_DATABASE_URL</span><br><span class="line">          - name: WORKER_PROCESSES</span><br><span class="line">            value: &quot;2&quot;</span><br><span class="line">          - name: JOB_WORKER_URL</span><br><span class="line">            value: &quot;redis://redis-master:6379/0&quot;</span><br><span class="line">          - name: RAILS_ENV</span><br><span class="line">            value: &quot;production&quot;</span><br><span class="line">          - name: REDIS_CACHE_URL</span><br><span class="line">            value: &quot;redis://redis-master:6379/1&quot;</span><br><span class="line">        ports:</span><br><span class="line">          - containerPort: 7007</span><br><span class="line">        volumeMounts:</span><br><span class="line">          - name: app-pvc</span><br><span class="line">            mountPath: &quot;/app/public/&quot;</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 7007</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          timeoutSeconds: 3</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 7007</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          timeoutSeconds: 3</span><br><span class="line">      volumes:</span><br><span class="line">        - name: app-pvc</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: app-pvc</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="部署时需要注意的地方"><a href="#部署时需要注意的地方" class="headerlink" title="部署时需要注意的地方:"></a>部署时需要注意的地方:</h3><ul>
<li>Deployment的模板使用label来找到对应的容器, 所以不建议修改label.如果必须修改请看<a class="link"   href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#label-selector-updates" >label selector update <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>在一个deploy过程中如果再进行另一个deploy,那么之前那个deploy的pod会立刻删除.</li>
<li>每次部署都会创建一个部署版本, 如果部署完后又进行扩展(scale), 那么此时进行rollback将不会回滚扩展的部分.因为rollback只会根据(.spec.template)指定来回滚. 可用在每次更新部署的时候,指定<code>--record</code>把部署命令记录到部署更新版本记录里.</li>
<li>查看部署历史<code>kubectl rollout history deployment/appweb</code>, 可以指定具体版本号<code>kubectl rollout history deployment/appweb --revision=2</code></li>
<li>回滚到上一个版本命令<code>kubectl rollout undo deployment/appweb</code></li>
</ul>
<h3 id="使用金丝雀-灰度-部署"><a href="#使用金丝雀-灰度-部署" class="headerlink" title="使用金丝雀(灰度)部署"></a>使用金丝雀(灰度)部署</h3><p>k8s的金丝雀部署其实就是在现有的版本上再部署只有一个pod的新deployment,用另一个label来区别两个deployment.<br>并把这个新的pod加入原来的service.代码概要如下:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1  # old deployment</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: app-production</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      env: production</span><br><span class="line">      app: web</span><br><span class="line">      .....</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: app-Service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: web</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1 # new deployment</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: app-canary</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: web</span><br><span class="line">      env: canary</span><br><span class="line">      .....</span><br></pre></td></tr></table></figure></div>
<p>如果发布测试没有问题, 那么可以直接运行<code>kubectl set image deployment/app-production app=registry-vpc.cn-shanghai.aliyuncs.com/web2.0</code>滚动更新, 然后删除金丝雀部署.</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>AMQP-0-9-1模型总结</title>
    <url>/2019/02/28/middleware-2019-02-28-amqp-model/</url>
    <content><![CDATA[<h2 id="AMQP-0-9-1模型"><a href="#AMQP-0-9-1模型" class="headerlink" title="AMQP-0-9-1模型"></a>AMQP-0-9-1模型</h2><p><code>AMQP(Advanced Message Queue Protocol</code>模型很简单, 就是<code>publisher</code>将消息发给<code>exchanger</code>中间人, 然后<code>exchanger</code>中间人按规则将消息的副本塞入队列中(这个过程叫<code>binding</code>), 接着中间人消息推送给订阅队列的消费者<code>consumer</code>或者消费者主动去拉取消息.</p>
<p>当发布消息的时候, 发布者可以给消息设置一些消息的元信息, 然后中间人就会使用这些信息作为消息路由的规则.由于网络是不稳定的, <code>AMQP</code>有消息确认的概念: 消费者拿到消息后需要通知中间人确认拿到消息, 然后中间人会把队列中的消息删除, 否则中间人会重发消息给另一个消费者(如果存在). 如果消息没有被确认, 同时又不能重发消息(不存在另一个消费者), 那么消息是可以被返回给发送者或者丢弃的. 可以设置<code>dead letter queue</code>来处理消息消费失败的情况. </p>
<h2 id="AMQP是一个可编程协议"><a href="#AMQP是一个可编程协议" class="headerlink" title="AMQP是一个可编程协议"></a><code>AMQP</code>是一个可编程协议</h2><p><code>queue/exchange/binding</code>在<code>AMQP</code>中都是实体(entity), 所以<code>AMQP</code>的实体&#x2F;路由规则等是需要应用自己定义实现的. (就是再rabbitmq代码里定义)</p>
<h3 id="Exchange和exchange类型"><a href="#Exchange和exchange类型" class="headerlink" title="Exchange和exchange类型"></a>Exchange和exchange类型</h3><p><code>Exchange</code>接受生产者发送的消息, 然后根据路由规则将消息送给零个或多个队列. 路由规则取决于<code>exchange type</code>和<code>binding</code>. <code>AMQP</code>有4种交换类型:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-----------------+----------------|</span><br><span class="line">| name | default pre-declared names|</span><br><span class="line">|-----------------+----------------|</span><br><span class="line">| direct(default) | (empty string) and amq.direct|</span><br><span class="line">|-----------------+----------------|</span><br><span class="line">| fanout          |  amq.fanout    |</span><br><span class="line">|-----------------+----------------|</span><br><span class="line">| topic           | amq.topic      |</span><br><span class="line">|-----------------+----------------|</span><br><span class="line">| headers         | amq.match(amq.headers in rabbitmq)|</span><br><span class="line">|-----------------+----------------|</span><br></pre></td></tr></table></figure></div>
<p><code>headers exchange</code>用的比较少, 说一下.  这种类型的中间人不使用<code>routing key</code>作为路由规则, 而是使用生产者在消息中的头部<code>x-match</code>定义的k-v值. </p>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><code>queue</code>是存放消息的buffer, 与<code>exchange</code>分享一些共同的属性, 同时有一些自己属性可以定义:</p>
<ul>
<li>Name</li>
<li>Durable (survive during restart)</li>
<li>Exclusive (only use by one consumer)</li>
<li>Auto-delete (delete when last consumer unsubscribes)</li>
<li>Arguments (optional, )</li>
</ul>
]]></content>
      <categories>
        <category>middleware</category>
      </categories>
      <tags>
        <tag>rabbitmq,amqp</tag>
      </tags>
  </entry>
  <entry>
    <title>本地rails系统迁移到阿里云容器服务小结</title>
    <url>/2018/04/10/kubernetes-2018-04-11-migrate-k8s-summary/</url>
    <content><![CDATA[<blockquote>
<p>实验性迁移小结</p>
</blockquote>
<h2 id="迁移目标"><a href="#迁移目标" class="headerlink" title="迁移目标"></a>迁移目标</h2><p>本文主要记录了将本地rails迁移到云上容器服务的过程, 包括如何部分重构本地应用代码和一些思考. 迁移本地应用的目的主要是为了能够将应用变得高可用和更好的扩展性, 以及为了更好的容器管理.</p>
<h2 id="原来的系统状况"><a href="#原来的系统状况" class="headerlink" title="原来的系统状况"></a>原来的系统状况</h2><p>本地的rails系统是一个典型的数据库-网页应用, 原来采用docker compose构建部署, 用到的技术栈主要有, 结构图如下:</p>
<ul>
<li>rails5.0</li>
<li>mysql5.7</li>
<li>sidekiq</li>
<li>redis</li>
<li>nginx</li>
</ul>
<p><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-11%20%E4%B8%8B%E5%8D%883.52.27.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-11%20%E4%B8%8B%E5%8D%883.52.27.png"></p>
<h2 id="迁移后的系统"><a href="#迁移后的系统" class="headerlink" title="迁移后的系统"></a>迁移后的系统</h2><p>迁移k8s后系统, 系统变得更加模块化(当然没有微服务化). 结构如下图:<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-11%20%E4%B8%8B%E5%8D%883.45.43.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-11%20%E4%B8%8B%E5%8D%883.45.43.png"></p>
<h2 id="一些细节和原来本地的问题"><a href="#一些细节和原来本地的问题" class="headerlink" title="一些细节和原来本地的问题"></a>一些细节和原来本地的问题</h2><p>新的部署主要把原来多个进程从一个容器分离了出来, 用docker提倡的一个进程一个container; 把<code>rake db:migrate</code>等操作做成k8s的job; 把定时任务作为单独的cronJob, 避免重复运行(幂等性);并且把底层的存储用了云上的OSS和NAS. 由于是实验性的部署, 并没有使用managed service, 如rds和redis, 这部分还是自己搭建的, 以后会切换为云上的服务. 大致细节图:<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-16%20%E4%B8%8B%E5%8D%882.28.53.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-16%20%E4%B8%8B%E5%8D%882.28.53.png"></p>
<ul>
<li>如上图, sidekiq和rails在同一个pod(还在考虑要不要分出来), 连接的redis使用的是helm部署(没有使用pv), mysql采用的<a class="link"   href="https://kubernetes.io/docs/tasks/run-application/run-replicated-stateful-application/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>StatefulSet例子 , 并且在集群前面搭建一个mycat,做读写分离, mysql底层的存储使用k8s的动态pv. mysql集群的问题是mycat不是HA, 动态scale slave需要配置mycat, 所以需要继续改进, 还可以是考虑<code>vitess</code>或<code>galera</code>做更好的mysql HA方案.</li>
<li><strong>本地问题</strong> assets需要用nginx来处理. 务必做到开发,测试, 生产各个环境一致.必须是用k8s <code>Secret</code>来处理敏感信息,但是不要commit进代码库,可以直接使用的k8s控制台创建. dockerfile里面有些包只要构建的时候需要使用(minor issue).</li>
<li><strong>其它思考</strong>.<ul>
<li>google墙的问题</li>
<li>需要各种正向反向代理, 以便内网用户能够访问应用; 需要反向代理以便使用集团的各种服务,比如邮箱服务.</li>
<li>由于本地gitlab网络不能出去, 所以需要搭一个自动构建&#x2F;推送镜像上云的流程.(走外网费流量)</li>
<li>后续集成managed service(non-native k8s service)需要集成进k8s, 这里还没有经验.</li>
<li>如何给每个开发设置kubectl权限. 现在是采用RBAC+Namespace来控制, 有一些笨拙,网上有推荐使用OpenID.</li>
<li>部署自动化, 由于有了service, 进行金丝雀,蓝绿部署变得比较方便.不过还是需要手动干预,后续要考虑自动化.</li>
<li>CI&#x2F;CD. 也是上一条思考相关. k8s集成jenkins看起来比较方便(推荐jenkinsfile), 不过考虑是不是看看其他集成方案.</li>
<li>日志管理还没有深入研究.</li>
<li>阿里云的Docker registry和helm仓库有点弱, 我想在控制台删个镜像都要用api.</li>
<li>有了k8s, pods多了之后, 服务之间的依赖关系难以清晰的看出来. 如果将应用微服务化, 服务的治理会是个问题.</li>
<li>开发需要使用新的工具, 如telepresence, helm,  Kubeval等. 用<code>helm</code>打包成<code>chart</code>可以方便的部署一整个应用.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Openshift Commandline CheatSheet</title>
    <url>/2019/02/27/openshift-2018-01-03-openshift-commandline-shortcut/</url>
    <content><![CDATA[<h4 id="创建新的project"><a href="#创建新的project" class="headerlink" title="创建新的project"></a>创建新的project</h4><p><code>oc new-project postgres --display-name=&#39;postgres&#39; --description=&#39;postgres&#39;</code></p>
<h4 id="切换project"><a href="#切换project" class="headerlink" title="切换project"></a>切换project</h4><p><code>oc project myproject</code></p>
<h4 id="删除project"><a href="#删除project" class="headerlink" title="删除project"></a>删除project</h4><p><code>oc delete project myproject</code></p>
<h4 id="创建资源-从json-yml-生成一个OpenStack可以用模板。"><a href="#创建资源-从json-yml-生成一个OpenStack可以用模板。" class="headerlink" title="创建资源. 从json(yml)生成一个OpenStack可以用模板。"></a>创建资源. 从json(yml)生成一个OpenStack可以用模板。</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc create -f Filename.json(.yml)</span><br><span class="line">oc process -f file.json|oc create -f -  <span class="comment">##处理模板生产构建配置，然后创建资源</span></span><br></pre></td></tr></table></figure></div>

<h4 id="创建app，-就是部署"><a href="#创建app，-就是部署" class="headerlink" title="创建app， 就是部署"></a>创建app， 就是部署</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc new-app (IMAGE | IMAGESTREAM | TEMPLATE | PATH | URL ...) [options]</span><br><span class="line">oc new-app --name=dbinit --strategy=docker https://github.com/devops-with-openshift/liquibase-example.git  <span class="comment">##将会从这个仓库拉代码，build on Dockerfile</span></span><br></pre></td></tr></table></figure></div>
<h4 id="取消一个正在构建的app"><a href="#取消一个正在构建的app" class="headerlink" title="取消一个正在构建的app"></a>取消一个正在构建的app</h4><p><code>oc cancel-build buildname</code></p>
<h4 id="修改一个资源的配置"><a href="#修改一个资源的配置" class="headerlink" title="修改一个资源的配置"></a>修改一个资源的配置</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc patch dc postgresql -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;strategy&quot;:&#123;&quot;type&quot;:&quot;Recreate&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="设置应用配置"><a href="#设置应用配置" class="headerlink" title="设置应用配置"></a>设置应用配置</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc <span class="built_in">set</span> <span class="built_in">env</span> dc postgresql POSTGRESQL_ADMIN_PASSWORD=password</span><br></pre></td></tr></table></figure></div>

<h4 id="从docker镜像仓库导入最新的镜像信息"><a href="#从docker镜像仓库导入最新的镜像信息" class="headerlink" title="从docker镜像仓库导入最新的镜像信息"></a>从docker镜像仓库导入最新的镜像信息</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc import-image docker.io/busybox:latest --confirm <span class="comment">##把上游的镜像仓库镜像加入本地命名空间</span></span><br></pre></td></tr></table></figure></div>

<h4 id="展示资源的信息"><a href="#展示资源的信息" class="headerlink" title="展示资源的信息"></a>展示资源的信息</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc get pods <span class="comment">#展示pod资源的信息</span></span><br><span class="line">oc get rc redis  <span class="comment">#展示replication controller</span></span><br><span class="line">oc get -o wide pods  <span class="comment">#展示详情</span></span><br><span class="line">oc get -o template pod myapp --template=&#123;&#123; .currentState.status &#125;&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="设置trigger配置"><a href="#设置trigger配置" class="headerlink" title="设置trigger配置"></a>设置trigger配置</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc <span class="built_in">set</span> triggers dc/registry --auto</span><br><span class="line">oc <span class="built_in">set</span> triggers bc/webapp --from-webhook</span><br><span class="line">oc <span class="built_in">set</span> triggers bc/webapp --from-imagej=namespace/image:latest</span><br></pre></td></tr></table></figure></div>
<h4 id="将模板转化为资源"><a href="#将模板转化为资源" class="headerlink" title="将模板转化为资源"></a>将模板转化为资源</h4><p><code>oc process -f template.json| oc create -f -</code></p>
<h4 id="导出资源，用于其它地方使用"><a href="#导出资源，用于其它地方使用" class="headerlink" title="导出资源，用于其它地方使用"></a>导出资源，用于其它地方使用</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc <span class="built_in">export</span> service -o json  <span class="comment"># 导出资源为json</span></span><br><span class="line">oc <span class="built_in">export</span> svc --as-template=<span class="built_in">test</span> <span class="comment"># 导出所有服务，作为模板</span></span><br><span class="line">oc <span class="built_in">export</span> Resource -l name=<span class="built_in">test</span> <span class="comment"># 导出资源，打上标签</span></span><br></pre></td></tr></table></figure></div>

<h4 id="pod同步容器内外文件"><a href="#pod同步容器内外文件" class="headerlink" title="pod同步容器内外文件"></a>pod同步容器内外文件</h4><p><code>oc rsync dir POD:dir</code></p>
<h4 id="查看pod日志"><a href="#查看pod日志" class="headerlink" title="查看pod日志"></a>查看pod日志</h4><p><code>oc logs $(oc get pods -l name=cats -o name)</code></p>
<h4 id="开启一个容器的shell"><a href="#开启一个容器的shell" class="headerlink" title="开启一个容器的shell"></a>开启一个容器的shell</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc get pods</span><br><span class="line">oc rsh mypod</span><br></pre></td></tr></table></figure></div>

<h4 id="简写对应"><a href="#简写对应" class="headerlink" title="简写对应"></a>简写对应</h4><p><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-03%20%E4%B8%8B%E5%8D%883.07.32.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-03%20%E4%B8%8B%E5%8D%883.07.32.png"></p>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>Openshift Template</title>
    <url>/2018/01/03/openshift-2018-01-04-Openshift-template/</url>
    <content><![CDATA[<h3 id="Openshift的模板"><a href="#Openshift的模板" class="headerlink" title="Openshift的模板"></a>Openshift的模板</h3><p>定义：模板是一组可以被参数化的对象，这组对象被处理后可以被用于创建服务，构建配置，部署配置。</p>
<h3 id="模板代码例子"><a href="#模板代码例子" class="headerlink" title="模板代码例子"></a>模板代码例子</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Template</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-template</span> <span class="comment">#1</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;Description&quot;</span>  <span class="comment">#2</span></span><br><span class="line">    <span class="attr">iconClass:</span> <span class="string">&quot;icon-redis&quot;</span>  <span class="comment">#3</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">&quot;database,nosql&quot;</span>  <span class="comment">#4</span></span><br><span class="line"><span class="attr">objects:</span>   <span class="comment">#5</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-master</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span>   <span class="comment">#6</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">dockerfile/redis</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">parameters:</span>  <span class="comment">#7</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">description:</span> <span class="string">Password</span> <span class="string">used</span> <span class="string">for</span> <span class="string">Redis</span> <span class="string">authentication</span></span><br><span class="line">  <span class="attr">from:</span> <span class="string">&#x27;[A-Z0-9]&#123;8&#125;&#x27;</span>   </span><br><span class="line">  <span class="attr">generate:</span> <span class="string">expression</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line"><span class="attr">labels:</span>      </span><br><span class="line">  <span class="attr">redis:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div>
<ol>
<li>模板名</li>
<li>可选描述</li>
<li>展示的icon（搜索”openshift-logos-icon”）</li>
<li>这个模板的tag</li>
<li>模板将会创建的对象</li>
<li>模板处理的时候输入参数</li>
<li>模板参数</li>
<li>任意产生表达式</li>
<li>所以对象将被打上标签</li>
</ol>
<h3 id="复杂一点的json模板"><a href="#复杂一点的json模板" class="headerlink" title="复杂一点的json模板"></a>复杂一点的json模板</h3><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Template&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgresql-persistent&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;creationTimestamp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;annotations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;openshift.io/display-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PostgreSQL (Persistent)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PostgreSQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/blob/master/9.5.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconClass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon-postgresql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;database,postgresql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;template.openshift.io/long-description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This template provides a standalone PostgreSQL server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;template.openshift.io/provider-display-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Red Hat, Inc.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;template.openshift.io/documentation-url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://docs.openshift.org/latest/using_images/db_images/postgresql.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;template.openshift.io/support-url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://access.redhat.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The following service(s) have been created in your project: $&#123;DATABASE_SERVICE_NAME&#125;.\n\n       Username: $&#123;POSTGRESQL_USER&#125;\n       Password: $&#123;POSTGRESQL_PASSWORD&#125;\n  Database Name: $&#123;POSTGRESQL_DATABASE&#125;\n Connection URL: postgresql://$&#123;DATABASE_SERVICE_NAME&#125;:5432/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/blob/master/9.5.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgresql-persistent-template&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;objects&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Secret&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;annotations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;template.openshift.io/expose-username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;.data[&#x27;database-user&#x27;]&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template.openshift.io/expose-password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;.data[&#x27;database-password&#x27;]&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stringData&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;database-user&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;$&#123;POSTGRESQL_USER&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;database-password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;$&#123;POSTGRESQL_PASSWORD&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Service&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;creationTimestamp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;annotations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;template.openshift.io/expose-uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgres://&#123;.spec.clusterIP&#125;:&#123;.spec.ports[?(.name==\&quot;postgresql\&quot;)].port&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ports&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgresql&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TCP&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">5432</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetPort&quot;</span><span class="punctuation">:</span> <span class="number">5432</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nodePort&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ClusterIP&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sessionAffinity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;loadBalancer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PersistentVolumeClaim&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;accessModes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;ReadWriteOnce&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;requests&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;storage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;VOLUME_CAPACITY&#125;&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DeploymentConfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;creationTimestamp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Recreate&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;triggers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ImageChange&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;imageChangeParams&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;automatic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;containerNames&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">              <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ImageStreamTag&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgresql:$&#123;POSTGRESQL_VERSION&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;NAMESPACE&#125;&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lastTriggeredImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ConfigChange&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;replicas&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;creationTimestamp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;containers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgresql&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ports&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;containerPort&quot;</span><span class="punctuation">:</span> <span class="number">5432</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;readinessProbe&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;timeoutSeconds&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;initialDelaySeconds&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;exec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;/bin/sh&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-i&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-c&quot;</span><span class="punctuation">,</span> <span class="string">&quot;psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c &#x27;SELECT 1&#x27;&quot;</span><span class="punctuation">]</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;livenessProbe&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;timeoutSeconds&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;initialDelaySeconds&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;tcpSocket&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">5432</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POSTGRESQL_USER&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;valueFrom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                      <span class="attr">&quot;secretKeyRef&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;database-user&quot;</span></span><br><span class="line">                      <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POSTGRESQL_PASSWORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;valueFrom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                      <span class="attr">&quot;secretKeyRef&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;database-password&quot;</span></span><br><span class="line">                      <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POSTGRESQL_DATABASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;POSTGRESQL_DATABASE&#125;&quot;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;memory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;MEMORY_LIMIT&#125;&quot;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;volumeMounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;-data&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;mountPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/pgsql/data&quot;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;terminationMessagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/dev/termination-log&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;imagePullPolicy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IfNotPresent&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;securityContext&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;privileged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;volumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;-data&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;persistentVolumeClaim&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;claimName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;DATABASE_SERVICE_NAME&#125;&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;restartPolicy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Always&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dnsPolicy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ClusterFirst&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MEMORY_LIMIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Memory Limit&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Maximum amount of memory the container can use.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;512Mi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NAMESPACE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Namespace&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The OpenShift Namespace where the ImageStream resides.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openshift&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DATABASE_SERVICE_NAME&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Database Service Name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The name of the OpenShift Service exposed for the database.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgresql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POSTGRESQL_USER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PostgreSQL Connection Username&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Username for PostgreSQL user that will be used for accessing the database.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expression&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user[A-Z0-9]&#123;3&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POSTGRESQL_PASSWORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PostgreSQL Connection Password&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Password for the PostgreSQL connection user.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expression&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[a-zA-Z0-9]&#123;16&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POSTGRESQL_DATABASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PostgreSQL Database Name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Name of the PostgreSQL database accessed.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sampledb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VOLUME_CAPACITY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Volume Capacity&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Volume space available for data, e.g. 512Mi, 2Gi.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1Gi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POSTGRESQL_VERSION&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Version of PostgreSQL Image&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>Openshift Deployment</title>
    <url>/2018/01/02/openshift-2018-01-04-openshift-deployment/</url>
    <content><![CDATA[<blockquote>
<p>For <em>version v3.7</em>; <em>OS Mac</em>; not recommend for production</p>
</blockquote>
<h3 id="安装Openshift-AllinOne"><a href="#安装Openshift-AllinOne" class="headerlink" title="安装Openshift AllinOne."></a>安装Openshift AllinOne.</h3><ul>
<li>安装oc cli. 地址：<a class="link"   href="https://github.com/openshift/origin/releases" >https://github.com/openshift/origin/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c https://github.com//openshift/origin/releases/download/v3.7.0/openshift-origin-client-tools-v3.7.0-7ed6862-mac.zip</span><br><span class="line">tar -xvf openshift-origin-client-tools-v3.7.0-7ed6862-mac.zip</span><br><span class="line"><span class="built_in">mv</span> openshift-origin-client-tools-v3.7.0-7ed6862-mac/oc /usr/local/bin</span><br></pre></td></tr></table></figure></div></li>
<li>启动Openshift, 使用预置配置, 挂出数据<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc cluster up --host-data-dir=<span class="string">&#x27;$REPLACE/oc/profiles/Devops/data&#x27;</span> --host-config-dir=<span class="string">&#x27;$REPLACE/oc/profiles/Devops/config&#x27;</span> --use-existing-config</span><br></pre></td></tr></table></figure></div></li>
<li>访问<code>https://127.0.0.1:8443/login</code></li>
<li>生产环境需要在linux下安装，并且需要考虑HA, openshift的安装脚本不支持single master升级到multiple master.</li>
</ul>
<h3 id="Openshift的部署叫replication-controller"><a href="#Openshift的部署叫replication-controller" class="headerlink" title="Openshift的部署叫replication controller."></a>Openshift的部署叫replication controller.</h3><p>Openshift基于用户定义的模板，通过手动或者事件触发的方式开始部署。</p>
<ul>
<li>多种部署策略，支持模板配置部署方式<ul>
<li><em>Rolling</em> 是openshift默认部署策略，流程：<ol>
<li>执行pre lifecycle hook</li>
<li>通过surge配置开始部署 </li>
<li>通过最大不可用配置缩减旧的部署 </li>
<li>重复扩展操作，直到新的部署达到想要的复制数，旧的部署慢慢将为0 </li>
<li>执行post lifecycle hook </li>
<li>OpenShift官网认证rolling策略不应该用于数据库部署，防止两个数据库同时运行，导致数据不一致</li>
</ol>
</li>
<li>触发部署方式Trigger，支持配置改变，镜像改变(image stream tag更新)，github, webhook等方式触发部署 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc describe dc myapp <span class="comment">##查看myapp配置 </span></span><br><span class="line">oc <span class="built_in">set</span> triggers dc myapp  <span class="comment">## 查看myapp部署配置 </span></span><br><span class="line">oc <span class="built_in">set</span> triggers dc myapp --remove-all  <span class="comment">##去除所有triggers, 但是config trigger auto=false</span></span><br><span class="line">oc <span class="built_in">set</span> triggers dc myapp --from-config  <span class="comment">##更新config自动部署</span></span><br><span class="line">oc <span class="built_in">set</span> triggers dc myapp --from-config --remove <span class="comment">## 删除config</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc import-image docker.io/busybox:latest --confirm <span class="comment">##把上游的镜像仓库镜像加入本地命名空间</span></span><br><span class="line">oc <span class="built_in">set</span> triggers dc myapp --from-image=welcome/busybox:latest --containers=myapp <span class="comment">##image 更新部署, 应用于myapp这个容器</span></span><br></pre></td></tr></table></figure></div></li>
<li><em>Recreate</em> 策略, 和rolling在部署流程上不同。先删除旧的pod, 然后部署新的pod。<ol>
<li>执行pre lifecycle hook</li>
<li>慢慢关闭上一个部署</li>
<li>执行中间lifecycle hook</li>
<li>部署新的应用</li>
<li>执行post lifecycle hook<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc delete project welcome</span><br><span class="line">oc new-project welcome --display-name=<span class="string">&#x27;Welcom&#x27;</span> --description=<span class="string">&#x27;Welcome&#x27;</span></span><br><span class="line">oc new-app devopswithopenshift/welcome:latest --name=myapp</span><br><span class="line">oc patch dc myapp -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;strategy&quot;:&#123;&quot;type&quot;:&quot;Recreate&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">oc <span class="built_in">set</span> probe dc myapp --readiness --open-tcp=8080 --initial-delay-seconds=5 --timeout-seconds=5</span><br><span class="line">oc <span class="built_in">set</span> probe dc myapp --liveness -- <span class="built_in">echo</span> ok</span><br><span class="line">oc expose svc myapp --name welcome</span><br><span class="line">oc deploy myapp --latest</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li>Custom 订制</li>
<li>lifecycle hooks. Openshift会另外起一个容器用于运行pre, mid, post hook.<ul>
<li>当前支持pod-based类型hook, execNewPod字段定义</li>
<li>pre hook在新镜像部署前运行</li>
<li>mid hook只有recreate停止旧的pod后执行</li>
<li>post hook在新镜像部署后执行</li>
</ul>
</li>
</ul>
</li>
<li>支持事件触发部署</li>
<li>自定义策略切换部署方式</li>
<li>回滚</li>
<li>自动可扩展AutoScaling</li>
</ul>
<h3 id="针对openshift的特性，需要考虑应用的架构"><a href="#针对openshift的特性，需要考虑应用的架构" class="headerlink" title="针对openshift的特性，需要考虑应用的架构"></a>针对openshift的特性，需要考虑应用的架构</h3><ul>
<li>比如： session调整。是服务器session还是无状态，客户端缓存。</li>
</ul>
<h3 id="部署的资源利用"><a href="#部署的资源利用" class="headerlink" title="部署的资源利用"></a>部署的资源利用</h3><p>默认情况下，pod可以无限使用节点资源。当然也可以通过项目级别或者通过部署策略限制资源的使用。Openshift强制使用Cgroup控制CPU和内存使用。<br><code>oc patch -n welcome --type=strategic dc myapp -p &#39;&#123;&quot;spec&quot;: &#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;name&quot;:&quot;myapp&quot;, &quot;resources&quot;:&#123;&quot;limits&quot;:&#123;&quot;cpu&quot;:&quot;100m&quot;,&quot;memory&quot;:&quot;256Mi&quot;&#125;&#125;&#125;]&#125;&#125;&#125;&#125;&#39;</code></p>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>What is OpenShift Resource</title>
    <url>/2018/01/07/openshift-2018-01-08-openshift-resource/</url>
    <content><![CDATA[<blockquote>
<p>Openshift的资源定义类似Rest的资源</p>
</blockquote>
<h3 id="OpenShift中的资源"><a href="#OpenShift中的资源" class="headerlink" title="OpenShift中的资源"></a>OpenShift中的资源</h3><p><code>oc get -h</code> 有一行说明<code>Possible resources include builds, buildConfigs, services, pods, etc. To see a list of common resources, use &#39;oc get&#39;.</code>. 所以任何构建，构建配置，服务，pod都是OpenShift的资源。由于Kubernetes采用Restful的架构，所以用rest的角度看待OpenShift资源应该更加合适，一个资源就是一个对象，有对应的类型、数据、和其它资源的关系，一组标准HTTP方法. 资源和OOP的对象类似，但是只有特定GET, PUT,POST等这几个标准HTTP方法。</p>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack ImageStream</title>
    <url>/2018/01/07/openshift-2018-01-08-openstack-imagestream/</url>
    <content><![CDATA[<h3 id="OpenShift的Image-Stream"><a href="#OpenShift的Image-Stream" class="headerlink" title="OpenShift的Image Stream"></a>OpenShift的Image Stream</h3><p>按照官方的解释<a class="link"   href="https://docs.openshift.com/enterprise/3.1/architecture/core_concepts/builds_and_image_streams.html#image-streams" >mage stream <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>一个镜像流是一组tag的镜像. 这些镜像可以是来自：</p>
<ul>
<li>openshift的私有镜像</li>
<li>其它镜像流</li>
<li>外部镜像仓库<br>OpenShift的build,deployment组件可以监控image stream. 用于触发新的build或者deploy</li>
</ul>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenShift A/B Deployment</title>
    <url>/2018/01/08/openshift-2018-01-09-openshift-AB-deploy/</url>
    <content><![CDATA[<h3 id="OpenShift的AB部署"><a href="#OpenShift的AB部署" class="headerlink" title="OpenShift的AB部署"></a>OpenShift的AB部署</h3><p>AB test原理就不讲了。直接上代码</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc new-project cotd --display-name=<span class="string">&#x27;A/B Deployment Example&#x27;</span>  --description=<span class="string">&#x27;A/B Deployment Example&#x27;</span></span><br><span class="line">oc new-app --name=<span class="string">&#x27;cats&#x27;</span> -l name=<span class="string">&#x27;cats&#x27;</span>  php:5.6~https://github.com/devops-with-openshift/cotd.git  -e SELECTOR=cats</span><br><span class="line">oc expose service cats --name=cats -l name=<span class="string">&#x27;cats&#x27;</span></span><br><span class="line">oc new-app --name=<span class="string">&#x27;city&#x27;</span> -l name=<span class="string">&#x27;city&#x27;</span>  php:5.6~https://github.com/devops-with-openshift/cotd.git -e SELECTOR=cities </span><br><span class="line">oc expose srv/city --name=city -l name=<span class="string">&#x27;city&#x27;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenShift Annotation</title>
    <url>/2018/01/08/openshift-2018-01-09-openshift-annotation/</url>
    <content><![CDATA[<h3 id="OpenShift的Annotation"><a href="#OpenShift的Annotation" class="headerlink" title="OpenShift的Annotation"></a>OpenShift的Annotation</h3><p>Openshift的Annotation是一个键值对，用于机器识别等其它用途。它不像label适用于人类识别，所以可以存较大的值。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc annotate route/ab haproxy.router.openshift.io/balance=roundrobin</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenShift Blue-Green Deployment</title>
    <url>/2018/01/08/openshift-2018-01-09-openshift-bg-deployment/</url>
    <content><![CDATA[<h3 id="OpenShift的蓝绿部署"><a href="#OpenShift的蓝绿部署" class="headerlink" title="OpenShift的蓝绿部署"></a>OpenShift的蓝绿部署</h3><p>使用<code>oc patch route</code>切换路由</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">oc new-project bluegreen --display-name=<span class="string">&quot;Blue Green Deployments&quot;</span>  --description=<span class="string">&quot;Blue Green Deployments&quot;</span></span><br><span class="line">oc new-app https://github.com/devops-with-openshift/bluegreen<span class="comment">#master  --name=blue</span></span><br><span class="line">oc expose service blue --name=bluegreen <span class="comment">#注意route的名称</span></span><br><span class="line">oc new-app https://github.com/devops-with-openshift/bluegreen<span class="comment">#green  --name=green</span></span><br><span class="line"><span class="comment">##切换</span></span><br><span class="line">oc patch route/bluegreen -p <span class="string">&#x27;&#123;&quot;spec&quot;: &#123;&quot;to&quot;:&#123;&quot;name&quot;:&quot;green&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="蓝绿最佳适用场景"><a href="#蓝绿最佳适用场景" class="headerlink" title="蓝绿最佳适用场景"></a>蓝绿最佳适用场景</h3><p>无状态的服务实现蓝绿部署较为轻松， 因为不需要考虑旧实例的长事务和数据的迁移和回滚。</p>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>Openshift Origin cluster部署配置要求和主机准备</title>
    <url>/2018/02/04/openshift-2018-02-05-prerequirement-deploy-a-cluster/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://github.com/openshift/openshift-ansible" >https://github.com/openshift/openshift-ansible <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="杂言"><a href="#杂言" class="headerlink" title="杂言"></a>杂言</h3><p>官方提供的github ansible部署代码还是有一些坑的，首先不能用master分支的代码，master分支是他们的开发分支。所以需要选择某个release， 以下选择release-3.8作为说明。origin使用的kubernetes是1.7和docker1.12. 先说说配置要求和操作系统、网络等环境等要求, 这些要求覆盖所有节点。</p>
<h3 id="系统配置需求"><a href="#系统配置需求" class="headerlink" title="系统配置需求"></a>系统配置需求</h3><ul>
<li>master，nodes, 外部etcd都有最小推荐配置. 大致上，master每1000pods需要额外1CPU和1.5GB内存。node的配置根据业务负载配置。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-05%20%E4%B8%8B%E5%8D%882.07.52.png"
                      alt="prerequirement"
                ></li>
</ul>
<h3 id="CPU核数配置"><a href="#CPU核数配置" class="headerlink" title="CPU核数配置"></a>CPU核数配置</h3><p>master和node默认使用系统所有的CPU, 可以设置环境变量<code>GOMAXPROCS</code>限制核数。</p>
<h3 id="开启SELinux"><a href="#开启SELinux" class="headerlink" title="开启SELinux"></a>开启SELinux</h3><p>SELinux必须开启，配置文件<code>/etc/selinux/config</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">SELINUX=enforcing</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure></div>

<h3 id="使用OverlayFS文件系统"><a href="#使用OverlayFS文件系统" class="headerlink" title="使用OverlayFS文件系统"></a>使用OverlayFS文件系统</h3><h3 id="节点和master必须同步时间"><a href="#节点和master必须同步时间" class="headerlink" title="节点和master必须同步时间"></a>节点和master必须同步时间</h3><p>ansible的环境变量设置为<code>openshift_clock_enabled=true</code></p>
<h3 id="有些容器是previlige-可以访问docker守护进程。"><a href="#有些容器是previlige-可以访问docker守护进程。" class="headerlink" title="有些容器是previlige, 可以访问docker守护进程。"></a>有些容器是previlige, 可以访问docker守护进程。</h3><p>这就等于这个容器对所有容器和镜像有root权限，openshift使用<a class="link"   href="https://docs.openshift.org/latest/architecture/additional_concepts/authorization.html#security-context-constraints" >security context constraints <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 来控制容器的权限。</p>
<h3 id="容器的DNS"><a href="#容器的DNS" class="headerlink" title="容器的DNS"></a>容器的DNS</h3><p>由于docker容器不会认宿主机的&#x2F;etc&#x2F;hosts, 所以所有节点都要安装dnsmasq, 容器访问宿主机的dns，宿主机再查询dns nameserver. ansible剧本需要</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">NM_CONTROLLED=<span class="built_in">yes</span>  <span class="comment">##使用network manager</span></span><br><span class="line">openshift_use_dnsmasq=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>默认容器内的域名解析按如下顺序进行：<ul>
<li>使用宿主机的&#x2F;etc&#x2F;resolv.conf解析</li>
<li>容器内<code>/etc/origin/node/node-config.yaml</code>有一条宿主机的IP作为dnsIP</li>
<li>如果没有设置dnsIP， 默认值是kubernetes service IP。也就是pod中<code>/etc/resolv.conf</code>的第一个nameserver.</li>
</ul>
</li>
<li>宿主机使用DNS<br>宿主机的域名解析配置取决于是否开启DHCP动态主机地址分配。如果没有开启使用静态ip地址，需要把DNS nameserver加入到NetworkManager;如果启用DHCP, NetworkManager会根据DHCP的配置自动分配DNS;或者在<code>node-config.yaml</code>手动加入dnsIP. 使用dig测试是否正确配置dns<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ dig &lt;node_hostname&gt; @&lt;IP_address&gt; +short</span><br><span class="line">$ dig master.example.com @10.64.33.1 +short</span><br><span class="line">10.64.33.100</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="联通的网络"><a href="#联通的网络" class="headerlink" title="联通的网络"></a>联通的网络</h3><ul>
<li>NetworkManager必须启用<code>NM_CONTROLLED=yes</code>，否则DNS配置会有问题。</li>
<li>m-m, m-n节点需要开通一些端口，单节点master和多节点master的开放端口也不同。 OpenShift会自动配置一些iptables规则。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-05%20%E4%B8%8B%E5%8D%882.07.52.png"
                      alt="port"
                >)</li>
</ul>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>Openshift使用Kubernetes的持久卷<a class="link"   href="https://docs.openshift.org/latest/architecture/additional_concepts/storage.html#architecture-additional-concepts-storage" >Persistent Volume <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>提供持久化存储。在安装Openshift完成后，可以根据具体需求，要求更多的存储资源。安装脚本里有提供相应的代码，支持的存储方式包括：<code>NFS, GlusterFS, Ceph RBD, OpenStack Cinder, AWS Elastic Block Store (EBS), GCE Persistent Disks, and iSCSI</code>.</p>
<h3 id="在云上安装openshift-origin需要考虑："><a href="#在云上安装openshift-origin需要考虑：" class="headerlink" title="在云上安装openshift origin需要考虑："></a>在云上安装openshift origin需要考虑：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 配置安全组，开通部分端口</span><br><span class="line">2. 需要覆盖一些参数。通过下面指令得到正确的值。</span><br><span class="line">ansible-playbook  [-i /path/to/inventory] \</span><br><span class="line">    ~/openshift-ansible/roles/openshift_facts/library/openshift_facts.py</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%20%E4%B8%8A%E5%8D%8810.54.45.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%20%E4%B8%8A%E5%8D%8810.54.45.png"></p>
<h3 id="如果安装容器化的GlusterFS-需要考虑额外的一些配置"><a href="#如果安装容器化的GlusterFS-需要考虑额外的一些配置" class="headerlink" title="如果安装容器化的GlusterFS,需要考虑额外的一些配置"></a>如果安装容器化的GlusterFS,需要考虑额外的一些配置</h3><p><a class="link"   href="https://docs.openshift.org/latest/install_config/install/prerequisites.html#prereq-containerized-glusterfs-considerations" >https://docs.openshift.org/latest/install_config&#x2F;install&#x2F;prerequisites.html#prereq-containerized-glusterfs-considerations <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="主机需要安装的包"><a href="#主机需要安装的包" class="headerlink" title="主机需要安装的包"></a>主机需要安装的包</h3><p>可能需要epel仓库， 自行解决</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct ansible pyOpenSSL docker-1.12.6</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure></div>

<h3 id="配置docker的容器和镜像存储"><a href="#配置docker的容器和镜像存储" class="headerlink" title="配置docker的容器和镜像存储"></a>配置docker的容器和镜像存储</h3><p>镜像和容器在openshift被认为是ephemeral, 他们和持久层分开存储。对于RHEL7, 默认的docker存储后端是在loopback的thin pool，这个配置不适合生产环境，在生产环境下，必须使用thin pool逻辑卷。配置存储必须在创建镜像和容器前，否则数据将丢失。<br>使用<strong>docker-storage-setup</strong>脚本可以配置thin pool和docker的存储驱动。这个脚本会读取&#x2F;etc&#x2F;sysconfig&#x2F;docker-storage-setup文件， 支持三种方式创建逻辑卷：</p>
<ul>
<li><p>使用另一存储块，推荐方式。需要新增一块存储块到主机。在&#x2F;etc&#x2F;sysconfig&#x2F;docker-storage-setup设置DEVS到新增的块，设置VG为新建的卷组名。运行脚本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/sysconfig/docker-storage-setup</span><br><span class="line">DEVS=/dev/vdc</span><br><span class="line">VG=docker-vg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用已有的逻辑卷组, 修改上述脚本指定VG&#x3D;<used vg>.</p>
</li>
<li><p>使用根文件系统剩余的卷空间, 直接运行脚本。<br>查看存储配置, 重启docker.</p>
</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/sysconfig/docker-storage</span><br><span class="line">DOCKER_STORAGE_OPTIONS=--storage-opt dm.fs=xfs --storage-opt</span><br><span class="line">dm.thinpooldev=/dev/mapper/docker--vg-docker--pool</span><br><span class="line"></span><br><span class="line">lvs</span><br><span class="line">LV          VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">docker-pool rhel twi-a-t---  9.29g             0.00   0.12</span><br></pre></td></tr></table></figure></div>

<h3 id="管理容器日志"><a href="#管理容器日志" class="headerlink" title="管理容器日志"></a>管理容器日志</h3><p>容器的日志（&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;<hash>&#x2F;<hash>-json.log）大小增大可能会有问题，可以通过配置docker json-file 日志驱动来限制大小和日志数量。修改&#x2F;etc&#x2F;sysconfig&#x2F;docker, 然后重启。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPTIONS=&#x27;--insecure-registry=172.30.0.0/16 --selinux-enabled --log-opt max-size=1M --log-opt max-file=3&#x27;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>Openshift的网路</title>
    <url>/2018/02/21/openshift-2018-02-22-openshift-network/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://docs.openshift.org/latest/architecture/networking/networking.html" >https://docs.openshift.org/latest/architecture/networking/networking.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>openshift的网路架构是建立在kubernetes的service上的。K8S的<a class="link"   href="https://kubernetes.io/docs/concepts/services-networking/service/" >Service <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是一组pods和访问这些pods的逻辑抽象，service解耦了下游pods的网路变化。但是由于Service也会变化，所以openshift在master运行<a class="link"   href="https://github.com/skynetservices/skydns" >skyDNS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来解决service网路的变化。</p>
<h3 id="SDN"><a href="#SDN" class="headerlink" title="SDN"></a>SDN</h3><p>Software Define Networking软件定义集群网络使openshift的pods相互能够通信，SDN使用Open vSwitch(OVS)来管理配置网路。有三种SDN插件可以配置pods网路：</p>
<ul>
<li>ovs-subnet, 提供所有的pods直接相互通信</li>
<li>ovs-multitenant, 能够提供项目级别的pods和service隔离。每一个项目都有一个VNID, 这个网路内项目之间的pods不能相互通信。VNID 0是一个例外，可以和所有pods通信，可以提供负载均衡等服务。Openshift正是使用br0的tag VNID功能，做到网络的隔离。</li>
<li>ovs-networkpolicy, 这里用户可以自己定义网路规则。</li>
</ul>
<p>在master上，Openshift SDN分配网络给运行节点并且注册到etcd, SDN会给新的节点分配新的子网，可以定义的网段有10.128.0.0&#x2F;14, node节点定义在10.128.0.0&#x2F;23。SDN是不会给master配置集群网络访问，所以master节点是不能访问集群网络的，除非它也作为运行节点。</p>
<p>在运行节点，SDN先在etcd注册，然后会创建三个网络装置: br0,tun0,vxlan_sys_4789</p>
<ul>
<li>br0, ovs的网桥，pods会和它连在一起。SDN也会在这个网桥上配置非子网的流量进出规则。</li>
<li>tun0, ovs的内部端口，在br0的port 2, 是子网的网关，负责pods访问外部网络。SDN会通过配置netfilter和路由规则使集群子网NAT访问外部网络。<br><code>eth0 (in A’s netns) → vethA → br0 → tun0 → (NAT) → eth0 (physical device) → Internet</code></li>
<li>vxlan_sys_4798, OVS的VXLAN，在br0的port 1, 提供容器访问远程节点。<br><code>eth0 (in A’s netns) → vethA → br0 → vxlan0 → network → vxlan0 → br0 → vethB → eth0 (in B’s netns)</code></li>
</ul>
<p>SDN会对每个新的pod作4件事：</p>
<ul>
<li>分配子网内的一个新的ip给pod。</li>
<li>连接宿主机边pod的veth网络接口到OVS的br0。</li>
<li>在OVS数据库增加一条OpenFlow规则，让到新pod的流量导入正确的OVS端口。</li>
<li>如果是多租户情况， 给流量打上标记VNID, 并且使其正确流向对应VNID. 没有匹配的VNID将会采用默认规则。</li>
</ul>
<p>SDN运行节点也会跟踪master节点对子网的更新, 当新的子网加入，br0会在新增一条Openflow规则，使vxlan0能够访问远程子网。</p>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>Openshift中Kubernetes的基础设施</title>
    <url>/2018/03/04/openshift-2018-03-05-kubernetes-infrastrcture/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要是从Openshift Origin的<a class="link"   href="https://docs.openshift.org/latest/architecture/infrastructure_components/kubernetes_infrastructure.html#master-components" >Doc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>看到的, 对应k8s 1.7. 加上官网的Doc. </p>
<h2 id="Masters"><a href="#Masters" class="headerlink" title="Masters"></a>Masters</h2><p>masters上的组件含有API server, controller manager server和etcd(可以单独host)。 master管理k8s集群中的nodes，调度节点上的pods.</p>
<ul>
<li>API server. 可以是一个独立的进程运行。API server验证和配置pods、services和replication controller; 分配pods到节点，根据service的配置同步pod的信息。</li>
<li>ETCD. 存储主机的状态， 其他组件查看etcd的动态，使自身做相应状态变化。ETCD使用RAFT算法，所以最后以2n+1来部署。</li>
<li>Controller Manager Server. 这个服务可以是单个进程，如果是多个进程那么就只有一个leader.<ul>
<li>监控etcd的复制状态变化，然后调用API做到相应的复制改变; </li>
<li>node控制器， 监控节点是否健康。</li>
<li>endpoints控制器，控制endpoint对象植入。</li>
<li>账号和token控制器</li>
</ul>
</li>
<li>scheduler（openshift 没有提到），k8s官网写了。scheduler用于还未在node创建的pod监控，然后调度一个node让pod运行。scheduler会考虑资源的各种要求，包括：软硬件，策略限制，affinity and anti-affinity specifications，数据地区，内部负载影响和期限。</li>
<li>HAProxy. 如果master是HA, 默认采用HAProxy作为master api server负载均衡器. 当然也可以选择自定义的。</li>
<li>cloud-controller-manager。 用于和云供应商服务交互，云供应商有如下服务：<ul>
<li>节点控制器</li>
<li>路由控制器</li>
<li>服务控制器（k8s service)</li>
<li>卷控制器</li>
</ul>
</li>
</ul>
<h2 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h2><p>节点提供容器的运行环境。每个节点都运行着master管理需要的服务和pods运行需要的服务（具体有Docker, kubelet, service proxy)<br>Node对象定义</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Node</span> </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">kubernetes.io/hostname:</span> <span class="string">node1.example.com</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node1.example.com</span> </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalID:</span> <span class="string">node1.example.com</span> </span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">nodeInfo:</span></span><br><span class="line">    <span class="attr">bootID:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">containerRuntimeVersion:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">kernelVersion:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">kubeProxyVersion:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">kubeletVersion:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">machineID:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">osImage:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">systemUUID:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Nodes中的Kubelet"><a href="#Nodes中的Kubelet" class="headerlink" title="Nodes中的Kubelet"></a>Nodes中的Kubelet</h3><p>其实是一个agent. kubelet用来通过manifest控制node的container健康运行， kubelet不会管理不是k8s创建的容器。 container manifest是一个描述pod的yaml文件。manifest可以通过4种方式提供给kubelet:</p>
<ul>
<li>命令行指定的文件地址</li>
<li>Http endpoint</li>
<li>监控etcd服务</li>
<li>kubelet作为http服务，监听http请求，提交新的manifest</li>
</ul>
<h3 id="Nodes中的service-proxy"><a href="#Nodes中的service-proxy" class="headerlink" title="Nodes中的service proxy"></a>Nodes中的service proxy</h3><p>每一个节点有一个简单的网络proxy, 能够让TCP或UDP把流量导向后端pods</p>
<h3 id="Nodes中的Addons附加插件"><a href="#Nodes中的Addons附加插件" class="headerlink" title="Nodes中的Addons附加插件"></a>Nodes中的Addons附加插件</h3><p>Addons(小怪？)是实现集群功能的pods和service， 还有一些其他附加功能. addon对象在kube-system创建，它们是有命名空间的。</p>
<ul>
<li>DNS. Kubernetes的服务需要DNS服务器， 被k8s启动的容器会自动包含dns服务器</li>
<li>UI界面</li>
<li>Container Resource Monitoring</li>
<li>Cluster-level Logging</li>
</ul>
]]></content>
      <categories>
        <category>openshift</category>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes, openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>Luigi基础概念</title>
    <url>/2018/07/19/python-2018-07-20-luiqi-base/</url>
    <content><![CDATA[<h2 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h2><p>想要构建一个基本的Luigi工作流, 需要创建<code>Task</code>和<code>Target</code>类, 还有<code>Parameter</code>类.<br>使用这些类来定义任务的好处是在代码里定义依赖, 而不是使用DSL.</p>
<h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><p><code>Target</code>是Task output返回的结果. <code>Target</code>类对应磁盘上的一个文件, HDFS上的一个文件或者某种<code>checkpoint</code>(比如数据库的条目). 理论上只需要实现<code>exists</code>方法,用于返回文件是否存在就可以实现这个类. <code>Target</code>有多个子类:<br><code>LocalTarget</code>, <code>HdfsTarget</code>, <code>S3Target</code>, <code>ssh.RemoteTarget</code>, <code>ftp.RemoteTarget</code>, <code>mysqldb.MysqlTarget</code>, <code>redshift.RedshiftTarget</code>, 所以基本上不需要自己subclass.<br><code>Target</code>类是对文件的映射, 如果只有一个target支持原子性操作, 也支持open()和Gzip. 多个targets需要用户保持文件的原子性操作.</p>
<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Task是实际做任务的地方. 通过<code>run()</code>, <code>output()</code>, <code>requires()</code>设置任务的行为. <code>Task</code>通过其它<code>Task</code>产生的<code>Targets</code>作为输入, 结果产生也是<code>Target</code>.<br>任务之间可以通过<code>requires()</code>指定依赖.<br>每个任务通过<code>output()</code>指定输出, <code>input()</code>指定输入.</p>
<ul>
<li><p>requires()<br>返回本task需要的其它tasks, 可以是task对象或封装的dicts, lists, tuples. </p>
</li>
<li><p>如果需要依赖外部task, 那么可以封装<code>ExternalTask</code>, 然后把这个task作为当前task的requires</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LogFiles</span>(luigi.ExternalTask):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> luigi.contrib.hdfs.HdfsTarget(<span class="string">&#x27;/log&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>run()</p>
</li>
</ul>
<p>run()函数是实际的任务运行地方, 如果有requires那么就会先解决依赖, 然后跑run的逻辑. input()会把requires的输出封装成targets, 用作run()的输入.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskWithManyInputs</span>(luigi.Task):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">requires</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;a&#x27;</span>: TaskA(), <span class="string">&#x27;b&#x27;</span>: [TaskB(i) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">100</span>)]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        f = self.<span class="built_in">input</span>()[<span class="string">&#x27;a&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        g = [y.<span class="built_in">open</span>(<span class="string">&#x27;r&#x27;</span>) <span class="keyword">for</span> y <span class="keyword">in</span> self.<span class="built_in">input</span>()[<span class="string">&#x27;b&#x27;</span>]]</span><br></pre></td></tr></table></figure></div>

<ul>
<li>task的事件和回调</li>
</ul>
<p>luigi有事件系统能够注册事件回调, 然后使用自定义的task触发任务.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@luigi.Task.event_handler(<span class="params">luigi.Event.SUCCESS</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">celebrate_success</span>(<span class="params">task</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Will be called directly after a successful execution</span></span><br><span class="line"><span class="string">       of `run` on any Task subclass (i.e. all luigi Tasks)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@luigi.contrib.hadoop.JobTask.event_handler(<span class="params">luigi.Event.FAILURE</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mourn_failure</span>(<span class="params">task, exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Will be called directly after a failed execution</span></span><br><span class="line"><span class="string">       of `run` on any JobTask subclass</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">luigi.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><p><code>Parameter</code>可以给每个task增加参数, 用于定制化一些额外信息.</p>
<ul>
<li>使用@inherits, @requires来传递多个task直接的参数, 考虑如下问题:</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskA</span>(luigi.ExternalTask):</span><br><span class="line">    param_a = luigi.Parameter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> luigi.LocalTarget(<span class="string">&#x27;/tmp/log-&#123;t.param_a&#125;&#x27;</span>.<span class="built_in">format</span>(t=self))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskB</span>(luigi.Task):</span><br><span class="line">    param_b = luigi.Parameter()</span><br><span class="line">    param_a = luigi.Parameter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">requires</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> TaskA(param_a=self.param_a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskC</span>(luigi.Task):</span><br><span class="line">    param_c = luigi.Parameter()</span><br><span class="line">    param_b = luigi.Parameter()</span><br><span class="line">    param_a = luigi.Parameter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">requires</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> TaskB(param_b=self.param_b, param_a=self.param_a)</span><br></pre></td></tr></table></figure></div>
<p>对上述代码,下游的task将会需要写上所有上游需要的参数, 这样就会产生参数爆炸, 如果想要简化参数, 可以是使用<code>@inherits</code>和<code>requires</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> luigi</span><br><span class="line"><span class="keyword">from</span> luigi.util <span class="keyword">import</span> inherits</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskA</span>(luigi.ExternalTask):</span><br><span class="line">    param_a = luigi.Parameter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> luigi.LocalTarget(<span class="string">&#x27;/tmp/log-&#123;t.param_a&#125;&#x27;</span>.<span class="built_in">format</span>(t=self))</span><br><span class="line"></span><br><span class="line"><span class="meta">@inherits(<span class="params">TaskA</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskB</span>(luigi.Task):</span><br><span class="line">    param_b = luigi.Parameter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">requires</span>(<span class="params">self</span>):</span><br><span class="line">        t = self.clone(TaskA)  <span class="comment"># or t = self.clone_parent()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="meta">@inherits(<span class="params">TaskB</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskC</span>(luigi.Task):</span><br><span class="line">    param_c = luigi.Parameter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">requires</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.clone(TaskB)</span><br></pre></td></tr></table></figure></div>

<h2 id="Luigi的模式"><a href="#Luigi的模式" class="headerlink" title="Luigi的模式"></a>Luigi的模式</h2><p>Luigi没有中间文件的概念, 所以如果两个依赖的任务运行一半失败, 中间结果将会被保留.</p>
<h3 id="如何触发多个任务"><a href="#如何触发多个任务" class="headerlink" title="如何触发多个任务"></a>如何触发多个任务</h3><p>在每个不相关的任务链的结尾加一个相同的<code>dummy task</code>, 这样只需要触发这个任务就会触发多个任务, 类似<code>make</code>.<br>实际使用时, 在Luigi中使用<code>WrapperTask</code>来封装和唤起其它tasks就行了, 它不会有输出output.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AllReports</span>(luigi.WrapperTask):</span><br><span class="line">    date = luigi.DateParameter(default=datetime.date.today())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">requires</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">yield</span> SomeReport(self.date)</span><br><span class="line">        <span class="keyword">yield</span> SomeOtherReport(self.date)</span><br><span class="line">        <span class="keyword">yield</span> CropReport(self.date)</span><br><span class="line">        <span class="keyword">yield</span> TPSReport(self.date)</span><br><span class="line">        <span class="keyword">yield</span> FooBarBazReport(self.date)</span><br></pre></td></tr></table></figure></div>

<h3 id="Luigi的执行模型"><a href="#Luigi的执行模型" class="headerlink" title="Luigi的执行模型"></a>Luigi的执行模型</h3><p>luigi的执行模型很简单, 一个worker的进程执行所有tasks, 所以如果有成千上万个tasks, 扩展性将成为问题.</p>
<h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>luigi的调度由单独的<code>luigid</code>中心化管理, 多个worker执行run()时, 每次都会从依赖树从头向下遍历, 找到需要执行的task运行, 跳过已完成的task. 见<br><a class="link"   href="https://www.arashrouhani.com/luigid-basics-jun-2015/#/" >gif <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas的Groupby</title>
    <url>/2018/08/30/python-2018-08-31-pandas/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般需要对数据做分割&#x2F;处理&#x2F;合并的时候会使用<code>groupby</code>, <code>groupby</code>的意思类似sql语句的分组. 对一个<code>DataFrame</code>做分割、处理、合并的过程一般如下图所示， 通过这样的流程能做到聚合数据的能力。<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/groupby-example.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/groupby-example.png"></p>
<h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p>官方叫<code>split</code>, 是把数据依照某种条件分组. 对一个DataFrame使用groupby就达到了<code>split</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>], <span class="string">&#x27;B&#x27;</span>:[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;three&#x27;</span>],<span class="string">&#x27;C&#x27;</span>:[<span class="number">332</span>,<span class="number">42</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">21</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: df</span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">     A      B    C</span><br><span class="line"><span class="number">0</span>  foo    one  <span class="number">332</span></span><br><span class="line"><span class="number">1</span>  bar    one   <span class="number">42</span></span><br><span class="line"><span class="number">2</span>  foo    two   <span class="number">12</span></span><br><span class="line"><span class="number">3</span>  bar  three   <span class="number">31</span></span><br><span class="line"><span class="number">4</span>  foo    two   <span class="number">21</span></span><br><span class="line"><span class="number">5</span>  bar    two    <span class="number">1</span></span><br><span class="line"><span class="number">6</span>  foo    one    <span class="number">3</span></span><br><span class="line"><span class="number">7</span>  foo  three   <span class="number">14</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: group_a=df.groupby(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: group_a</span><br><span class="line">Out[<span class="number">5</span>]: &lt;pandas.core.groupby.DataFrameGroupBy <span class="built_in">object</span> at <span class="number">0x7f78fb9cfc50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: grouped.get_group(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Out[<span class="number">52</span>]: </span><br><span class="line">     A      B         C         D</span><br><span class="line"><span class="number">1</span>  bar    one  <span class="number">0.254161</span>  <span class="number">1.511763</span></span><br><span class="line"><span class="number">3</span>  bar  three  <span class="number">0.215897</span> -<span class="number">0.990582</span></span><br><span class="line"><span class="number">5</span>  bar    two -<span class="number">0.077118</span>  <span class="number">1.211526</span></span><br></pre></td></tr></table></figure></div>

<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p><code>apply</code>对每个分割好的group运行某个(多个)函数. 在这一步我们可能会使用到如下方法:</p>
<ul>
<li><code>aggregation</code><br>的作用是统计组里的数据: 如平均值, 求和, 计数. 从下面的例子可以看出来, <code>aggregation</code>后得到一个以<code>groupby</code>参数作为<code>groupname</code>,<br>并且以它为<code>index</code>的<code>DataFrame</code>; 如果是通过多个值<code>groupby</code>的那么结果是以<code>MultiIndex</code>为索引, 当然index是可以通过<code>as_index</code>来设置的(<code>.reset_index()</code><br>也可以得到相同效果). <code>aggregation</code>函数会排除<code>NA</code>值.</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: group_a.agg(<span class="built_in">sum</span>)   <span class="comment">## 注意, 这里如果传递[sum]将会对所有column做sum</span></span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">       C</span><br><span class="line">A       </span><br><span class="line">bar   <span class="number">74</span></span><br><span class="line">foo  <span class="number">382</span></span><br><span class="line">In [<span class="number">8</span>]: group_a[<span class="string">&#x27;C&#x27;</span>].agg(<span class="built_in">sum</span>)  <span class="comment">## 注意, 这里传给agg, 如果是[sum], 返回的是Dataframe, 否则是Series</span></span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">A</span><br><span class="line">bar     <span class="number">74</span></span><br><span class="line">foo    <span class="number">382</span></span><br><span class="line">Name: C, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: group_a_b=df.groupby([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: group_a_b.agg(<span class="built_in">sum</span>)</span><br><span class="line">Out[<span class="number">10</span>]: </span><br><span class="line">             C</span><br><span class="line">A   B         </span><br><span class="line">bar one     <span class="number">42</span></span><br><span class="line">    three   <span class="number">31</span></span><br><span class="line">    two      <span class="number">1</span></span><br><span class="line">foo one    <span class="number">335</span></span><br><span class="line">    three   <span class="number">14</span></span><br><span class="line">    two     <span class="number">33</span></span><br><span class="line">In [<span class="number">15</span>]: group_a_b=df.groupby([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>], as_index=<span class="literal">False</span>).agg(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: group_a_b</span><br><span class="line">Out[<span class="number">16</span>]: </span><br><span class="line">     A      B    C</span><br><span class="line"><span class="number">0</span>  bar    one   <span class="number">42</span></span><br><span class="line"><span class="number">1</span>  bar  three   <span class="number">31</span></span><br><span class="line"><span class="number">2</span>  bar    two    <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  foo    one  <span class="number">335</span></span><br><span class="line"><span class="number">4</span>  foo  three   <span class="number">14</span></span><br><span class="line"><span class="number">5</span>  foo    two   <span class="number">33</span></span><br></pre></td></tr></table></figure></div>
<p>所有的<code>Aggregation</code>函数如下表, 它们返回的对象一般会减少维度:<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-31%20%E4%B8%8B%E5%8D%882.59.31.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-31%20%E4%B8%8B%E5%8D%882.59.31.png"></p>
<p><code>agg()</code>是可以一次运作多个函数的, 注意下面这个函数是对于<code>grouped Series</code>, 即切出了一个<code>series</code>操作的, 返回的是<code>dataframe</code>. </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">30</span>]: group_a[<span class="string">&#x27;C&#x27;</span>].agg([<span class="built_in">sum</span>, <span class="built_in">min</span>])</span><br><span class="line">Out[<span class="number">30</span>]: </span><br><span class="line">     <span class="built_in">sum</span>  <span class="built_in">min</span></span><br><span class="line">A            </span><br><span class="line">bar   <span class="number">74</span>    <span class="number">1</span></span><br><span class="line">foo  <span class="number">382</span>    <span class="number">3</span></span><br></pre></td></tr></table></figure></div>
<p>如果对一个<code>groupby</code> <code>Dataframe</code>应用多个函数, 那么每个column都会有各自的聚合函数列:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">63</span>]: df.groupby(<span class="string">&#x27;A&#x27;</span>).agg([<span class="built_in">sum</span>, <span class="built_in">min</span>,<span class="built_in">max</span>])</span><br><span class="line">Out[<span class="number">63</span>]: </span><br><span class="line">                     B              C         </span><br><span class="line">                   <span class="built_in">sum</span>  <span class="built_in">min</span>  <span class="built_in">max</span>  <span class="built_in">sum</span> <span class="built_in">min</span>  <span class="built_in">max</span></span><br><span class="line">A                                             </span><br><span class="line">bar        onethreetwo  one  two   <span class="number">74</span>   <span class="number">1</span>   <span class="number">42</span></span><br><span class="line">foo  onetwotwoonethree  one  two  <span class="number">382</span>   <span class="number">3</span>  <span class="number">332</span></span><br><span class="line"><span class="comment">###重命名列名</span></span><br><span class="line">In [<span class="number">65</span>]: df.groupby(<span class="string">&#x27;A&#x27;</span>).agg([<span class="built_in">sum</span>, <span class="built_in">min</span>,<span class="built_in">max</span>]).rename(columns=&#123;<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;reName&#x27;</span>&#125;)</span><br><span class="line">Out[<span class="number">65</span>]: </span><br><span class="line">                   reName              C         </span><br><span class="line">                   <span class="built_in">sum</span>  <span class="built_in">min</span>  <span class="built_in">max</span>  <span class="built_in">sum</span> <span class="built_in">min</span>  <span class="built_in">max</span></span><br><span class="line">A                                             </span><br><span class="line">bar        onethreetwo  one  two   <span class="number">74</span>   <span class="number">1</span>   <span class="number">42</span></span><br><span class="line">foo  onetwotwoonethree  one  two  <span class="number">382</span>   <span class="number">3</span>  <span class="number">332</span></span><br></pre></td></tr></table></figure></div>
<p>agg的函数也可以通过<code>lambda</code>把所有列改成标量值:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">17</span>]: df.groudby(<span class="string">&#x27;A&#x27;</span>).agg(<span class="keyword">lambda</span> x:<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">17</span>]: </span><br><span class="line">     B  C</span><br><span class="line">A        </span><br><span class="line">bar  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line">foo  <span class="number">1</span>  <span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<p>通过给<code>agg()</code>传递<code>dict</code>可以对Dataframe的不同column应用不同的聚合. 这样得出的column没有顺序的, 想要有顺序需要使用<code>OrderedDict</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">51</span>]: df.groupby(<span class="string">&#x27;A&#x27;</span>).agg(&#123;<span class="string">&#x27;B&#x27;</span>: <span class="built_in">sum</span>, <span class="string">&#x27;C&#x27;</span>: <span class="built_in">min</span>&#125;)</span><br><span class="line">Out[<span class="number">51</span>]: </span><br><span class="line">     C                  B</span><br><span class="line">A                        </span><br><span class="line">bar  <span class="number">1</span>        onethreetwo</span><br><span class="line">foo  <span class="number">3</span>  onetwotwoonethree</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>transformation</code><br><code>transform</code>方法把一个groupby对象做转变, 返回一个和grouped对象一样<code>index</code>的对象（这点和<code>agg</code>不同， <code>agg</code>通常返回维度减少的数据）. 这个<code>transform</code>实际传入的函数必须满足:<ul>
<li>返回和group chunk一样大小的对象, 或者返回的对象大小可以<code>broadcastable</code>到group chunk size(<code>broadcasting</code>是numpy的术语, 描述了numpy对待不同形状阵列时如何计算.)</li>
<li>在group chunk上做一列一列操作. 实际使用的是chunk.apply</li>
<li>不能直接(inplace)在group chunk上修改, group chunk需要认为是不可改变的, <code>grouped.transform(lambda x: x.fillna(inplace=True))</code><br>这样的直接修改可能带来意外结果.</li>
<li>也可以直接对整个chunk做操作</li>
</ul>
</li>
</ul>
<p>这里有个例子，讲述了如何使用<code>transform</code>减少处理的逻辑<a class="link"   href="http://pbpython.com/pandas_transform.html" >http://pbpython.com/pandas_transform.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><code>filteration</code><br>使用<code>filter</code>函数可以返回原来对象的一个子集. <code>filter</code>的参数是个应用到整个组的函数， 其返回为True&#x2F;False.</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">115</span>]: sf = pd.Series([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">116</span>]: sf.groupby(sf).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.<span class="built_in">sum</span>() &gt; <span class="number">2</span>)</span><br><span class="line">Out[<span class="number">116</span>]: </span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line"><span class="number">5</span>    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: dff = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: np.arange(<span class="number">8</span>), <span class="string">&#x27;B&#x27;</span>: <span class="built_in">list</span>(<span class="string">&#x27;aabbbbcc&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: dff.groupby(<span class="string">&#x27;B&#x27;</span>).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x) &gt; <span class="number">2</span>)</span><br><span class="line">Out[<span class="number">118</span>]: </span><br><span class="line">   A  B</span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  b</span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  b</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  b</span><br><span class="line"><span class="number">5</span>  <span class="number">5</span>  b</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: dff.groupby(<span class="string">&#x27;B&#x27;</span>).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x) &gt; <span class="number">2</span>, dropna=<span class="literal">False</span>)</span><br><span class="line">Out[<span class="number">119</span>]: </span><br><span class="line">     A    B</span><br><span class="line"><span class="number">0</span>  NaN  NaN</span><br><span class="line"><span class="number">1</span>  NaN  NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">2.0</span>    b</span><br><span class="line"><span class="number">3</span>  <span class="number">3.0</span>    b</span><br><span class="line"><span class="number">4</span>  <span class="number">4.0</span>    b</span><br><span class="line"><span class="number">5</span>  <span class="number">5.0</span>    b</span><br><span class="line"><span class="number">6</span>  NaN  NaN</span><br><span class="line"><span class="number">7</span>  NaN  NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">120</span>]: dff[<span class="string">&#x27;C&#x27;</span>] = np.arange(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: dff.groupby(<span class="string">&#x27;B&#x27;</span>).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x[<span class="string">&#x27;C&#x27;</span>]) &gt; <span class="number">2</span>)</span><br><span class="line">Out[<span class="number">121</span>]: </span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  b  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  b  <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  b  <span class="number">4</span></span><br><span class="line"><span class="number">5</span>  <span class="number">5</span>  b  <span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p><code>combining</code>是再把处理好的数据组合一起.</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas的数据结构</title>
    <url>/2018/09/15/python-2018-09-16-pandas%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基本上, <code>Pandas</code>的<code>Series</code>沿袭了<code>Numpy</code>的设计, 是一维数组和数组的索引, 和<code>Numpy</code>不同的一点是这个一维数组可以是异构的,比如数字int和字符串混在一起, 这个时候数组的类型是<code>object</code>. 而<code>DataFrame</code>是为了处理表格和异构多维的数据.</p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>可以用python的<code>list</code>初始化一个<code>Series</code>, 也可以用python的<code>Dict</code>初始化一个<code>Series</code>. 如果使用<code>Dict</code>那么序列的索引就是<code>Dict</code>的<code>Key</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(d)</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">d    <span class="number">1</span></span><br><span class="line">e    <span class="number">2</span></span><br></pre></td></tr></table></figure></div>
<p>想要得到自己想要的顺序可以使用参数<code>index</code>排序<code>Series</code>, 下图的例子可以看到索引<code>b</code>, 但是它没有值会用<code>NaN</code>表示(可以使用<code>isnull</code>, <code>notnull</code>检测是否为空), 没有索引的值会被省略.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(d, index=[<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">e    <span class="number">2.0</span></span><br><span class="line">b    NaN</span><br><span class="line">d    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></div>
<p><code>Pandas</code>筛选比较强大的一点是直接可以在[]输入条件, 这点可能和python本身的语法有一点不同.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2= pd.Series(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">d    <span class="number">1</span></span><br><span class="line">e    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 [ obj2 &gt; <span class="number">1</span>]</span><br><span class="line">e    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></div>
<p>两个<code>Series</code>是可以直接通过索引直接做计算的, 类似数据库的<code>join</code>. 计算子必须都需要有相同的索引才会有计算结果, 否则会出现<code>NaN</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">35</span>]: obj3</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">Ohio      <span class="number">35000</span></span><br><span class="line">Oregon    <span class="number">16000</span></span><br><span class="line">Texas     <span class="number">71000</span></span><br><span class="line">Utah       <span class="number">5000</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: obj4</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">California   NaN</span><br><span class="line">Ohio         <span class="number">35000</span></span><br><span class="line">Oregon       <span class="number">16000</span></span><br><span class="line">Texas        <span class="number">71000</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: obj3 + obj4</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">California    NaN</span><br><span class="line">Ohio          <span class="number">70000.0</span></span><br><span class="line">Oregon        <span class="number">32000.0</span></span><br><span class="line">Texas         <span class="number">142000.0</span></span><br><span class="line">Utah          NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></div>
<p>可以给<code>Series</code>起一个名字, 使用<code>Series.name</code>属性, 取个名字的好处是如果把<code>Series</code>放入<code>Dataframe</code>, 那么这个<code>name</code>就是<code>Dataframe</code>的列名.(<code>DataFrame</code>也会有<code>index</code>名称和<code>column</code>名称)</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s = pd.Series([<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>], name=<span class="string">&quot;foo&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s</span><br><span class="line">Out[<span class="number">2</span>]: </span><br><span class="line"><span class="number">0</span>    A</span><br><span class="line"><span class="number">1</span>    B</span><br><span class="line"><span class="number">2</span>    C</span><br><span class="line">Name: foo, dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: pd.DataFrame(s)</span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line">  foo</span><br><span class="line"><span class="number">0</span>   A</span><br><span class="line"><span class="number">1</span>   B</span><br><span class="line"><span class="number">2</span>   C</span><br></pre></td></tr></table></figure></div>


<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p><code>Pandas</code>的<code>DataFrame</code>代表了一组表格(一般是二维, 可以使用<code>hierarchical indexing</code>来表示更高的维度数组), 数据的底层存储如下图所示, 数据会按类型分成不同的块存储实际的数据. 可以看到数据被没有指向具体的列, 而是通过<code>BlockManager</code>这个类是来管理实际数据到列名的映射.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-16%20%E4%B8%8B%E5%8D%883.29.53.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-16%20%E4%B8%8B%E5%8D%883.29.53.png"><br>有很多种方式构建<code>DataFrame</code>, 常见的一种是通过<code>Dict</code>; 如果想在创建的时候指定索引, 可以使用嵌入式<code>dict</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">44</span>]: data = &#123;<span class="string">&#x27;state&#x27;</span>: [<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Nevada&#x27;</span>, <span class="string">&#x27;Nevada&#x27;</span>, <span class="string">&#x27;Nevada&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;year&#x27;</span>: [<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>],</span><br><span class="line">            <span class="string">&#x27;pop&#x27;</span>: [<span class="number">1.5</span>, <span class="number">1.7</span>, <span class="number">3.6</span>, <span class="number">2.4</span>, <span class="number">2.9</span>, <span class="number">3.2</span>]&#125;</span><br><span class="line">In [<span class="number">45</span>]: frame = pd.DataFrame(data)</span><br><span class="line">In [<span class="number">46</span>]: frame</span><br><span class="line">Out[<span class="number">46</span>]:</span><br><span class="line">   pop   state  year</span><br><span class="line"><span class="number">0</span>  <span class="number">1.5</span>    Ohio  <span class="number">2000</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.7</span>    Ohio  <span class="number">2001</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3.6</span>    Ohio  <span class="number">2002</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2.4</span>  Nevada  <span class="number">2001</span></span><br><span class="line"><span class="number">4</span>  <span class="number">2.9</span>  Nevada  <span class="number">2002</span></span><br><span class="line"><span class="number">5</span>  <span class="number">3.2</span>  Nevada  <span class="number">2003</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pop = &#123;<span class="string">&#x27;Nevada&#x27;</span>: &#123;<span class="number">2001</span>: <span class="number">2.4</span>, <span class="number">2002</span>: <span class="number">2.9</span>&#125;,<span class="string">&#x27;Ohio&#x27;</span>: &#123;<span class="number">2000</span>: <span class="number">1.5</span>, <span class="number">2001</span>: <span class="number">1.7</span>, <span class="number">2002</span>: <span class="number">3.6</span>&#125;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame3 = pd.DataFrame(pop)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame3</span><br><span class="line">      Nevada  Ohio</span><br><span class="line"><span class="number">2000</span>     NaN   <span class="number">1.5</span></span><br><span class="line"><span class="number">2001</span>     <span class="number">2.4</span>   <span class="number">1.7</span></span><br><span class="line"><span class="number">2002</span>     <span class="number">2.9</span>   <span class="number">3.6</span></span><br></pre></td></tr></table></figure></div>
<p>下图是所有的输入数据类型可以构建<code>DataFrame</code>:<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-17%20%E4%B8%8B%E5%8D%882.19.37.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-17%20%E4%B8%8B%E5%8D%882.19.37.png"></p>
<p><code>DataFrame</code>可以指定<code>column</code>参数选择只要某几列, 也可以在<code>column</code>任意添加列名, 如何<code>column</code>这个字段赋予了不存在的列, 那么新加的这个列会显示<code>NaN</code>. 两者的区别在于使用属性访问时, 这个python的<code>attribute</code>必须符合python的规则.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.DataFrame(data, columns=[<span class="string">&#x27;pop&#x27;</span>,<span class="string">&#x27;jik&#x27;</span>])</span><br><span class="line">   pop  jik</span><br><span class="line"><span class="number">0</span>  <span class="number">1.5</span>  NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">1.7</span>  NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">3.6</span>  NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">2.4</span>  NaN</span><br><span class="line"><span class="number">4</span>  <span class="number">2.9</span>  NaN</span><br><span class="line"><span class="number">5</span>  <span class="number">3.2</span>  NaN</span><br></pre></td></tr></table></figure></div>
<p>想要取得<code>DataFrame</code>的某个列, 可以采用<code>.columnName</code>或切片的方式:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">51</span>]: frame2[<span class="string">&#x27;state&#x27;</span>]</span><br><span class="line">Out[<span class="number">51</span>]:</span><br><span class="line">one        Ohio</span><br><span class="line">two        Ohio</span><br><span class="line">three      Ohio</span><br><span class="line">four     Nevada</span><br><span class="line">five     Nevada</span><br><span class="line">six      Nevada</span><br><span class="line">Name: state, dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: frame2.year</span><br><span class="line">Out[<span class="number">52</span>]:</span><br><span class="line">one      <span class="number">2000</span></span><br><span class="line">two      <span class="number">2001</span></span><br><span class="line">three    <span class="number">2002</span></span><br><span class="line">four     <span class="number">2001</span></span><br><span class="line">five     <span class="number">2002</span></span><br><span class="line">six      <span class="number">2003</span></span><br><span class="line">Name: year, dtype: int64</span><br></pre></td></tr></table></figure></div>
<p>通过<code>DataFrame.loc[]</code>可以选取某几行, 这个<code>loc</code>用的是[] ,而不是(), 和python的语法又有些区别. 一般使用<code>loc[]</code>定位字符串(label)索引, <code>iloc[]</code>定位数字(number)索引.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame.iloc[<span class="number">3</span>]</span><br><span class="line">pop         <span class="number">2.4</span></span><br><span class="line">state    Nevada</span><br><span class="line">year       <span class="number">2001</span></span><br><span class="line">Name: <span class="number">3</span>, dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure></div>
<p>可以使用<code>Series</code>给<code>DataFrame</code>赋值, <code>Series</code>将成为<code>DataFrame</code>的一个列, 列值必须和<code>DataFrame</code>的长度一致, 缺失的值将会<code>NaN</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>val = pd.Series([-<span class="number">1.2</span>, -<span class="number">1.5</span>, -<span class="number">1.9</span>], index=[<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;four&#x27;</span>,<span class="string">&#x27;five&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2[<span class="string">&#x27;debt&#x27;</span>] = val</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2</span><br><span class="line">       year   state  pop  debt</span><br><span class="line">one    <span class="number">2000</span>    Ohio  <span class="number">1.5</span>   NaN</span><br><span class="line">two    <span class="number">2001</span>    Ohio  <span class="number">1.7</span>  -<span class="number">1.2</span></span><br><span class="line">three  <span class="number">2002</span>    Ohio  <span class="number">3.6</span>   NaN</span><br><span class="line">four   <span class="number">2001</span>  Nevada  <span class="number">2.4</span>  -<span class="number">1.5</span></span><br><span class="line">five   <span class="number">2002</span>  Nevada  <span class="number">2.9</span>  -<span class="number">1.9</span></span><br><span class="line">six    <span class="number">2003</span>  Nevada  <span class="number">3.2</span>   NaN</span><br></pre></td></tr></table></figure></div>
<p><code>DateFrame</code>列赋值还有一个快捷判断的语法, 可以一行代码先判断再赋值</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2[<span class="string">&#x27;new_col&#x27;</span>] = frame2.state == <span class="string">&#x27;Ohio&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2</span><br><span class="line">       year   state  pop  debt  new_col</span><br><span class="line">one    <span class="number">2000</span>    Ohio  <span class="number">1.5</span>   NaN     <span class="literal">True</span></span><br><span class="line">two    <span class="number">2001</span>    Ohio  <span class="number">1.7</span>  -<span class="number">1.2</span>     <span class="literal">True</span></span><br><span class="line">three  <span class="number">2002</span>    Ohio  <span class="number">3.6</span>   NaN     <span class="literal">True</span></span><br><span class="line">four   <span class="number">2001</span>  Nevada  <span class="number">2.4</span>  -<span class="number">1.5</span>    <span class="literal">False</span></span><br><span class="line">five   <span class="number">2002</span>  Nevada  <span class="number">2.9</span>  -<span class="number">1.9</span>    <span class="literal">False</span></span><br><span class="line">six    <span class="number">2003</span>  Nevada  <span class="number">3.2</span>   NaN    <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>
<p>列的删除: 使用<code>del df[clo]</code><br><code>DataFrame</code>的<code>values</code>属性会返回一个二维<code>ndarray</code>的数组. </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame3.values</span><br><span class="line">array([[nan, <span class="number">1.5</span>],</span><br><span class="line">       [<span class="number">2.4</span>, <span class="number">1.7</span>],</span><br><span class="line">       [<span class="number">2.9</span>, <span class="number">3.6</span>]])</span><br></pre></td></tr></table></figure></div>

<h3 id="Index对象"><a href="#Index对象" class="headerlink" title="Index对象"></a>Index对象</h3><p><code>Index</code>对象负责存储轴标签<code>axis label</code>和其它元信息如索引名称, 任何数组或其它序列的标签在转化成<code>Series</code>或<code>DataFrame</code>的时候会被转成<code>Index</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lables = pd.Index(np.arange(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lables</span><br><span class="line">Int64Index([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], dtype=<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj4 = pd.Series([<span class="number">1.4</span>,<span class="number">3</span>,<span class="number">1</span>], index=lables)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj4</span><br><span class="line"><span class="number">0</span>    <span class="number">1.4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj4.index <span class="keyword">is</span> lables</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></div>
<p><code>pandas</code>的索引对象是不可变的, 既可以把<code>index</code>当成数组, 可以当成集合, <strong>注意</strong>这个集合不同于python的<code>set</code>, 集合是可以重复的.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dup_index = pd.Index([<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dup_index</span><br><span class="line">Index([<span class="string">u&#x27;foo&#x27;</span>, <span class="string">u&#x27;foo&#x27;</span>, <span class="string">u&#x27;bar&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p><code>Index</code>对象的一些常用方法:<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-17%20%E4%B8%8B%E5%8D%882.40.46.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-17%20%E4%B8%8B%E5%8D%882.40.46.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python, pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas的常用函数</title>
    <url>/2018/09/16/python-2018-09-17-pandas-common-methods/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Pandas</code>有一些常用方法, 可以作为回调函数用于其它函数.</p>
<h3 id="pandas-DataFrame-reindex"><a href="#pandas-DataFrame-reindex" class="headerlink" title="pandas.DataFrame.reindex"></a>pandas.DataFrame.reindex</h3><p><code>reindex</code>方法用于把<code>DataFrame</code>按新的索引转化, 同时可选填充空值或者其他方法(如<code>ffill</code>, 按前项填充). 默认情况下, 重新索引过的<code>DataFrame</code>会复制原来<code>DataFrame</code>, 除非索引没有变或者设置<code>copy=False</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5 = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>)), index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>], columns=[<span class="string">&#x27;Ohio&#x27;</span>,<span class="string">&#x27;Texas&#x27;</span>,<span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a     <span class="number">0</span>      <span class="number">1</span>           <span class="number">2</span></span><br><span class="line">b     <span class="number">3</span>      <span class="number">4</span>           <span class="number">5</span></span><br><span class="line">c     <span class="number">6</span>      <span class="number">7</span>           <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5 = frame5.reindex([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    <span class="number">1.0</span>         <span class="number">2.0</span></span><br><span class="line">b   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">c   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">d   NaN    NaN         NaN</span><br></pre></td></tr></table></figure></div>

<h3 id="丢弃某些行或列"><a href="#丢弃某些行或列" class="headerlink" title="丢弃某些行或列"></a>丢弃某些行或列</h3><p>对于<code>DataFrame</code>, 想要删除某行或列是很方便的, 直接通过<code>drop([])</code>方法可以实现, 默认删除行, 如果需要删除列, 可以设置参数<code>axis=1</code>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    <span class="number">1.0</span>         <span class="number">2.0</span></span><br><span class="line">b   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">c   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">d   NaN    NaN         NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5.drop([<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">b   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">c   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">d   NaN    NaN         NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5.drop([<span class="string">&#x27;Ohio&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line">   Texas  California</span><br><span class="line">a    <span class="number">1.0</span>         <span class="number">2.0</span></span><br><span class="line">b    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">c    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">d    NaN         NaN</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python, pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server的主数据服务MDS简介</title>
    <url>/2021/01/28/database-SQL-Server-2021-01-29-SQL-Server%E7%9A%84MDS/</url>
    <content><![CDATA[<h2 id="关于主数据管理系统"><a href="#关于主数据管理系统" class="headerlink" title="关于主数据管理系统"></a>关于主数据管理系统</h2><p>MDM(Master Data Management)是从企业各个数据源采集数据，使用统一的标准和业务流程构建单一数据视图，并且将主数据分发, 作为企业内部其他系统依赖的数据金标准。</p>
<p>主数据系统一般需要收集如下信息：</p>
<ul>
<li>人(客户，供应商，雇员，患者等)</li>
<li>物(产品，业务单元，部件，装备等)</li>
<li>地点(地址，仓储，地理区域等)</li>
<li>抽象(账户，合同，时间等)</li>
</ul>
<p>MDM 一般的做法流程是：</p>
<ol>
<li>从不同的数据源导入到 staging 数据库</li>
<li>把 staged 的数据和领域属性映射，再做标准化和归一化，清洗，应用业务规则，富集数据，最后打上版本</li>
<li>通过 API 把数据发布给相关用户</li>
</ol>
<p>另外，主数据的修改需要记录， 方便审计。</p>
<h3 id="主数据管理系统一般具有的功能"><a href="#主数据管理系统一般具有的功能" class="headerlink" title="主数据管理系统一般具有的功能"></a>主数据管理系统一般具有的功能</h3><ul>
<li><code>Domain</code>. 能够把主数据和领域分开和关联。</li>
<li><code>Repository/Entity</code>. 一个仓库或实体定义主数据的结构。</li>
<li><code>Attributes</code>. 仓库的属性</li>
<li><code>Attribute Groups</code>. 基于业务领域，有方法可以把相似类型的属性分组在一起。</li>
<li><code>Business Processes</code>. 一个好的业务流程可以方便治理数据</li>
<li><code>Business Rules</code>. 业务规则是限制某个属性取值的范围</li>
<li><code>Permissions</code>. 鉴权授权，典型 MDM 的角色有：Data stewards(数据管家)，approvers(审批人)，requesters(发起人)</li>
<li><code>UI</code>.</li>
<li><code>Web Services</code>.</li>
<li><code>Data Publish</code>. 推送的机制把数据送到订阅的用户。</li>
<li><code>Data Quality</code>.</li>
</ul>
<p>基于上述特点，典型的 MDM 架构应该是：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-02/MDM_architecture.png"
                     
                ></p>
<h2 id="Master-Data-Services-简介"><a href="#Master-Data-Services-简介" class="headerlink" title="Master Data Services 简介"></a>Master Data Services 简介</h2><p>基于 SQLServer 的 MDS 可以用来管理组织的主数据，使用<code>WCF(Windows Communication Foundation)</code>提供 SOA 接口，并且可以通过 Excel 分享这些信息。</p>
<p>在 MDS 中，Model 是主数据结构的最高级别容器。你可以创建 model 来管理相似数据组，比如管理所有线上产品。一个 Model 可以是<strong>一个 Entity 或者多个 Entities</strong>. 比如一个产品 model 包含产品，颜色和风格， 颜色 entity 包含所有的颜色。Entity 可以有两种属性：<em>free-form</em>和<em>domain-based</em>属性，<em>free-form</em>可以直接用于描述 entity，<em>domain-based</em>需要通过一个 domain 的 entity 来表现(就是 entity 的一个属性是另一个 entity)。</p>
<p>MDS 是一个典型的三级架构：数据库层、服务层、WEB&#x2F;Add-in 层。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-02/mds-architecture.png"
                     
                ><br>MDS 一般要和 DQS 和 SSIS 结合使用，用于数据的集成和ETL。</p>
<h3 id="MDS-的组件"><a href="#MDS-的组件" class="headerlink" title="MDS 的组件"></a>MDS 的组件</h3><ul>
<li><code>Configuration Manager</code>, 配置管理工具用于配置数据库和 web 应用。</li>
<li><code>Master Data Manager</code>, Web 应用用于管理任务，配置接口和视图。</li>
<li><code>MDSModelDeploy.exe</code>, 部署工具。</li>
<li><code>MDS Web Service</code>, SOA.可以在这使用代码来配置<code>Master Data Manager</code>.</li>
<li><code>Add-in for Excel</code>, excel 插件。</li>
</ul>
<h2 id="MDS-使用流程"><a href="#MDS-使用流程" class="headerlink" title="MDS 使用流程"></a>MDS 使用流程</h2><p>创建一个 model –&gt; 创建多个 entities –&gt; 创建<em>domain-based</em> entities –&gt; 创建<em>free-form</em> entities –&gt; 创建属性组 –&gt; 导入 entities 数据 –&gt; 使用业务逻辑确保数据质量 –&gt; 创建层级结构 –&gt; 创建显式层级如需 –&gt; 把组聚为集合如需 –&gt; 创建自定义元数据 –&gt; 给 model 打个版本号 –&gt; 创建订阅视图 –&gt; 配置权限</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database, Master data</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server的触发器</title>
    <url>/2021/01/31/database-SQL-Server-2021-02-01-SQL-Server-Trigger/</url>
    <content><![CDATA[<h2 id="SQL-Server的Trigger简介"><a href="#SQL-Server的Trigger简介" class="headerlink" title="SQL Server的Trigger简介"></a>SQL Server的Trigger简介</h2><p>SQL Server主要有三种trigger: <code>DDL Trigger</code>, <code>DML Trigger</code>, <code>Logon Trigger</code>.下面将分别介绍。<br><code>SQL Server</code>的<code>Logon Trigger</code>是触发器在用户建立会话后将触发对应的存储过程。更加具体一点是在用户真正建立会话之前，认证成功之后的阶段。认证失败的时候触发器是不会触发的。<br>我们可以使用<code>logon trigger</code>来审计和控制服务端会话，比如追溯登入活动，限制特定账号的登入会话数。<br>实际上<code>logon trigger</code>对应于<code>AUDIT_LOGIN</code>事件，<code>AUDIT_LOGIN</code>可以用于<a class="link"   href="https://docs.microsoft.com/en-us/sql/relational-databases/service-broker/event-notifications?view=sql-server-2017" >Event Notifications <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。<br><code>Event Notifications</code>和<code>Trigger</code>的主要区别是，触发器是同步的，<code>Event Notification</code>是异步的。</p>
<p><code>DDL Trigger</code>是在各种DDL(Data Definition Language)事件时触发的存储过程。这些事件主要包括事务语句：<code>CREATE, ALTER, DROP, GRANT, DENY, REVOKE, UPDATE STATISTICS</code>. 某些系统存储过程运行DDL类似的操作也可以触发DDL触发器。 一般我们使用<code>DDL Trigger</code>来：</p>
<ul>
<li>防止数据库结构改变</li>
<li>结构变化需要对应一些改变</li>
<li>记录结构改变</li>
</ul>
<p><code>DML Trigger</code>是当DML(Data Manipulation Language)事件发生时触发的存储过程。DML事件包含: <code>INSERT, UPDATE, DELETE</code>语句。<code>DML trigger</code>可以被用来保证业务规则和数据完整性, 尤其在底层一些contraints不能很好满足需要的时候。</p>
<h2 id="Logon-Trigger"><a href="#Logon-Trigger" class="headerlink" title="Logon Trigger"></a>Logon Trigger</h2><h3 id="触发器的执行顺序"><a href="#触发器的执行顺序" class="headerlink" title="触发器的执行顺序"></a>触发器的执行顺序</h3><p>如果在<code>LOGON</code>事件定义了多个触发器， 触发器执行的先后顺序是可以在<code>sp_settriggerorder</code>中定义的。SQL Server不能保证其它触发器的执行顺序。</p>
<h3 id="管理事务"><a href="#管理事务" class="headerlink" title="管理事务"></a>管理事务</h3><p>在SQL Server真正触发trigger前，SQL Server会创建一个隐式的事务，此时事务计数为1.在所有<code>logon trigger</code>完成执行，事务才会<code>commit</code>. 当<code>logon trigger</code>执行完，事务计数为0时，SQL Server会报错。什么时候<code>logon trigger</code>会将事务计数置0呢？一般有两种情况，<code>ROLLBACK TRANSACTION</code>和不正确的<code>COMMIT TRANSACTION</code>数(每次commit会减一计数).<br>在<code>logon trigger</code>使用<code>ROLLBACK</code>时需要注意：</p>
<ul>
<li>任何rollback前的数据修改将被回滚，包括在同一个事件之前已执行的触发。后续的trigger不会再触发。</li>
<li><strong>注意</strong>，当前trigger<code>ROLLBACK</code>后面的语句将会继续执行，数据修改将不会被回滚。</li>
</ul>
<h2 id="DDL-Trigger"><a href="#DDL-Trigger" class="headerlink" title="DDL Trigger"></a>DDL Trigger</h2><h3 id="DDL-Trigger的类型"><a href="#DDL-Trigger的类型" class="headerlink" title="DDL Trigger的类型"></a>DDL Trigger的类型</h3><p><code>DDL Trigger</code>有两种类型： 事务型(Transact-SQL)和通用语言型(Common Language Runtime). 事务型的<code>DDL Trigger</code>应对服务级别或者数据库级别的事件，如修改服务配置(ALERT SERVER CONFIGUATION)或删除表(DROP TABLE);<code>CLR Trigger</code>是在.net写的<code>assembly</code>代码。</p>
<h3 id="DDL-Trigger的范围"><a href="#DDL-Trigger的范围" class="headerlink" title="DDL Trigger的范围"></a>DDL Trigger的范围</h3><p>DDL Trigger触发对应的事件可以是当前数据库或者当前服务器，取决于具体事件。数据库范围的DDL Trigger存储在数据库上, 运行<code>select * sys.triggers</code>视图可以看到数据库层面的<code>DDL Trigger</code>;服务器层面的<code>DDL Trigger</code>存储在<code>master</code>数据库，运行<code>select * from sys.server_triggers</code>可以查看服务器层面的<code>DDL Trigger</code>。</p>
<h2 id="DML-Trigger"><a href="#DML-Trigger" class="headerlink" title="DML Trigger"></a>DML Trigger</h2><h3 id="DML-Trigger的类型"><a href="#DML-Trigger的类型" class="headerlink" title="DML Trigger的类型"></a>DML Trigger的类型</h3><p><code>DML Trigger</code>有三种trigger：<code>AFTER Trigger</code>,<code>INSTEAD OF Trigger</code>和<code>CLR Trigger</code>.</p>
<ul>
<li><code>After Trigger</code>是在<code>INSERT, UPDATE, MERGE, DELETE</code>语句运行后触发的触发器。如果发生<code>constraint</code>, 这个trigger是不会触发的。</li>
<li><code>INSTEAD OF trigger</code>覆盖标准的触发器语句，所以可以用来处理错误或者在<code>insert, update, delete</code>之前做数值检查。这个触发器主要的两个优势是能让不能修改的视图支持更新，另一个优势是可以让你的批处理部分处理成功，部分处理失败。</li>
<li><code>CLR Trigger</code></li>
</ul>
<p>AFTER触发器和INSTEAD OF触发器的区别:<br>![](&#x2F;images&#x2F;2021-02&#x2F;comparison of after&amp;instead of trigger.png)</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database, trigger</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server2019智能查询和性能优化简介</title>
    <url>/2021/02/04/database-SQL-Server-2021-02-05-SQL-SERVER-2019/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SQL Server2019 主要的新特性可以用官方的一张图说明：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-02/2019_solve_data_challenges.png"
                     
                ></p>
<h3 id="SQL-Server-Intelligent-Performance"><a href="#SQL-Server-Intelligent-Performance" class="headerlink" title="SQL Server Intelligent Performance"></a>SQL Server Intelligent Performance</h3><p>2019 版本主要在几方面提供查询性能优化：</p>
<ul>
<li><code>Intelligent Query Processing</code>智能查询处理</li>
<li><code>Lightweight Query Profiling</code>轻量级查询分析</li>
<li><code>Sequential Key Insert Performance</code>顺序键插入性能优化</li>
<li><code>In-Memory Database</code><ul>
<li><code>Hybrid Buffer Pool</code>混合缓冲池</li>
<li><code>Memory Optimized Tempdb Metadata</code>内存优化的 Tempdb 元数据</li>
<li><code>Persistent Memory Support</code>持久化内存支持</li>
</ul>
</li>
</ul>
<h3 id="Intelligent-Query-Processing"><a href="#Intelligent-Query-Processing" class="headerlink" title="Intelligent Query Processing"></a>Intelligent Query Processing</h3><p>使用智能查询处理，用户可以不改动应用层代码，只需将 T-SQL 跑在兼容等级 150 的 MSSQL 数据库上(这意味着想要充分使用这个特性，只能使用 2019 版本和云上 Azure, 2017 有部分功能)。MSSQL 的兼容等级见下表:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-02/mssql_compatibility_level.png"
                     
                ></p>
<p><code>Intelligent Query Processing</code>主要包含如下特性：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-02/IQP_features.png"
                     
                ><br>几个优化技术简介：</p>
<ul>
<li><code>Adaptive QP</code> 自适应查询处理， 150 会使用这个技术自适应地选择 join,交错执行<code>Interleaved execution</code>,内存授予反馈<code>Memory Grant Feedback</code>.</li>
<li><code>Table Variable Deferred Compilation</code>表变量延迟编译， 这个技术会传输表的实际行数估计到后续的执行计划，用于优化执行计划和整体性能。</li>
<li><code>Batch Mode on RowStore</code>批量模式</li>
<li><code>Scalar UDF Inlining</code></li>
<li><code>Approximate QP</code></li>
</ul>
<p>修改数据库的兼容等级：<code>alter database tobereplaceddb set compatibility_level=150</code></p>
<h3 id="Query-Store-性能分析"><a href="#Query-Store-性能分析" class="headerlink" title="Query Store 性能分析"></a>Query Store 性能分析</h3><p>首先开启查询存储<code>SET QUERY_STORE = ON (OPERATION_MODE = READ_WRITE)</code>, 使用 SSMS 从左边栏目可以看到资源消耗最大的几个查询：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2021-02/query_store_index.jpg"
                     
                ></p>
<p>运行如下 SQL, 从右边的查询存储分析一下不同兼容等级的查询性能和执行计划。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE WideWorldImporters</span><br><span class="line">GO</span><br><span class="line">CREATE or ALTER PROCEDURE [Sales].[CustomerProfits]</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line">-- Declare the table variable</span><br><span class="line">DECLARE @ilines TABLE</span><br><span class="line">(       [InvoiceLineID] [int] NOT NULL primary key,</span><br><span class="line">        [InvoiceID] [int] NOT NULL,</span><br><span class="line">        [StockItemID] [int] NOT NULL,</span><br><span class="line">        [Description] [nvarchar](100) NOT NULL,</span><br><span class="line">        [PackageTypeID] [int] NOT NULL,</span><br><span class="line">        [Quantity] [int] NOT NULL,</span><br><span class="line">        [UnitPrice] [decimal](18, 2) NULL,</span><br><span class="line">        [TaxRate] [decimal](18, 3) NOT NULL,</span><br><span class="line">        [TaxAmount] [decimal](18, 2) NOT NULL,</span><br><span class="line">        [LineProfit] [decimal](18, 2) NOT NULL,</span><br><span class="line">        [ExtendedPrice] [decimal](18, 2) NOT NULL,</span><br><span class="line">        [LastEditedBy] [int] NOT NULL,</span><br><span class="line">        [LastEditedWhen] [datetime2](7) NOT NULL</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- Insert all the rows from InvoiceLines into the table variable</span><br><span class="line">INSERT INTO @ilines SELECT * FROM Sales.InvoiceLines</span><br><span class="line"></span><br><span class="line">-- Find my total profile by customer</span><br><span class="line">SELECT TOP 1 COUNT(i.CustomerID) as customer_count, SUM(il.LineProfit) as total_profit</span><br><span class="line">FROM Sales.Invoices i</span><br><span class="line">INNER JOIN @ilines il</span><br><span class="line">ON i.InvoiceID = il.InvoiceID</span><br><span class="line">GROUP By i.CustomerID</span><br><span class="line">END</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">-- Pull these pages into cache to make the comparison fair based on a warm buffer pool cache</span><br><span class="line">SELECT COUNT(*) FROM Sales.Invoices</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">-- Step 2: Run the stored procedure under dbcompat = 130</span><br><span class="line">USE master</span><br><span class="line">GO</span><br><span class="line">ALTER DATABASE wideworldimporters SET compatibility_level = 130</span><br><span class="line">GO</span><br><span class="line">USE WideWorldImporters</span><br><span class="line">GO</span><br><span class="line">SET NOCOUNT ON</span><br><span class="line">GO</span><br><span class="line">EXEC [Sales].[CustomerProfits]</span><br><span class="line">GO 25</span><br><span class="line">SET NOCOUNT OFF</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">-- Step 3: Run the same code under dbcompat = 150</span><br><span class="line">USE master</span><br><span class="line">GO</span><br><span class="line">ALTER DATABASE wideworldimporters SET compatibility_level = 150</span><br><span class="line">GO</span><br><span class="line">USE WideWorldImporters</span><br><span class="line">GO</span><br><span class="line">SET NOCOUNT ON</span><br><span class="line">GO</span><br><span class="line">EXEC [Sales].[CustomerProfits]</span><br><span class="line">GO 25</span><br><span class="line">SET NOCOUNT OFF</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">-- Step 4: Restore dbcompat for WideWorldImporters</span><br><span class="line">USE master</span><br><span class="line">GO</span><br><span class="line">ALTER DATABASE wideworldimporters SET compatibility_level = 130</span><br><span class="line">GO</span><br></pre></td></tr></table></figure></div>

<div>
![](/images/2021-02/query_store_130.png)
![](/images/2021-02/store_query_150.png)
</div>

<p>我们可以看到上面第一张图是 130 兼容性使用<code>nested loop join</code>, 虽然只用了一行 join, 但是性能不如 150 兼容性的<code>Adaptive join</code>自适应选择 join 方式（此例用了 hash join+clustered index scan); 同时用了<code>Table Variable Deferred Compilation</code>和<code>Batch mode for rowstore</code>技术。</p>
<h3 id="Tempdb"><a href="#Tempdb" class="headerlink" title="Tempdb"></a>Tempdb</h3><p><code>Tempdb</code>系统数据库可以作为共享资源用于临时表和临时表变量。 由于是共享的就存在竞争的问题，访问和修改 GAM(Global Allocation Map), SGAM(Shared Global Allocation Map)和 PFS(Page Free Space)可能存在竞争问题。<br>存在系统表的临时表元信息也存在相同问题。MSSQL 采用<code>page latch</code>页锁的方式来物理上保护并发临时表的 page 访问, 但是有锁就意味着可能有等待。<br>MSSQL2019 采用 tempdb 有如下优化：</p>
<ul>
<li>多文件 partition 先在物理上减轻 page 访问压力， 每个文件会以相同的增量同步增大</li>
<li>临时表和临时变量会变缓存</li>
<li><code>allocation page</code>锁协议改善</li>
<li>减少 tempdb 的日志文件 IO 开销</li>
<li>tempdb 中所有的 allocation 使用同一的 extents</li>
<li>对于主要<code>fileground</code>, <code>AUTOGROW_ALL_FILES</code>属性不能被修改，默认打开</li>
</ul>
<p>开启内存优化的tempdb</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SERVERPROPERTY(&#x27;IsTempdbMetadataMemoryOptimized&#x27;)</span><br><span class="line">ALTER SERVER CONFIGURATION SET MEMORY_OPTIMIZED TEMPDB_METADATA = ON;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server的存储过程</title>
    <url>/2021/01/31/database-SQL-Server-2021-2-1-SQL-Server%E7%9A%84%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SQL Server 的存储过程是微软基于 ANSI SQL 的扩展，和其他数据库的过程类似是一组或多组事务性 SQL 语句。它的特点是：</p>
<ul>
<li>接受多个输入参数，可以返回多个值。</li>
<li>包含编程语句用于操作数据库，包括调用其他存储过程。</li>
<li>返回调用成功与否的状态。</li>
</ul>
<h3 id="使用存储过程的好处"><a href="#使用存储过程的好处" class="headerlink" title="使用存储过程的好处"></a>使用存储过程的好处</h3><ul>
<li><strong>减少服务端、客户端的网络流量</strong>， 存储过程的代码是一次性批量传输给服务端，不像普通语句是一行一次传输给客户端，这样减少了网络流量。</li>
<li><strong>更安全</strong>， 不同的用户和客户端可以运行存储过程操作底层的数据库对象，即便这个用户没有底层对象的权限。（减少了单独对用户的授权的便捷性，但是更安全了？）<code>EXECUTE AS</code>语句用来作为执行过程用户。存储过程是可以被加密的。</li>
<li><strong>复用代码</strong></li>
<li><strong>更容易维护</strong></li>
<li><strong>更好的性能</strong>，因为第一次运行后执行计划会被保留。</li>
</ul>
<h3 id="存储过程的类型"><a href="#存储过程的类型" class="headerlink" title="存储过程的类型"></a>存储过程的类型</h3><ul>
<li><strong>自定义</strong> 用户自定义的存储过程可以用于所有数据库(除了 Resource 数据库).</li>
<li><strong>临时</strong> 临时存储过程也是一种用户自定义过程，存储在<code>tempdb</code>库中，它的生命周期就是连接的时间。临时存储过程又分为<code>local</code>和<code>global</code>, 它们的区别在于名字、可见性和可用性。<code>local</code>存储过程以<code>#</code>开头命名，只对当前连接用户可见，连接关闭将删除过程。<code>global</code>存储过程以<code>##</code>命名开头，这个过程创建后对所有用户可见，当最后一个会话关闭后将删除过程。</li>
<li><strong>系统</strong> 系统存储过程存储在<code>Resource</code>数据库，逻辑上以<code>sys</code>表出现。另外<code>msdb</code>数据库也有系统存储过程存在<code>dbo</code>表中，用于调度警告和任务。一般系统存储过程以<code>sp_</code>命名开头。用户可以扩展系统存储过程，一般以<code>xp_</code>命名开头，见官网资料 [<a class="link"   href="https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/general-extended-stored-procedures-transact-sql?view=sql-server-2017%5D" >https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/general-extended-stored-procedures-transact-sql?view=sql-server-2017] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>(General Extended Stored Procedures)</li>
<li><strong>扩展自定义</strong> 用户可以使用 C 语言来创建外部 DLL,不过为了将来的兼容性不建议使用。</li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database, stored procedures</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB的架构</title>
    <url>/2018/09/23/database-mongodb-2018-09-24-mongo-%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近尝试用MongoDB替换Mysql， 由于Mysql的写能力限制， 32C128G的实例同时写入1M的数据CPU飙升， 更不用说如果是并发的情况。MongoDB通过<code>sharding</code>能够很好地解决写能力扩展的问题, 故作一篇网上大神博客的小结. MongoDB的架构大致如下图所示(v3.2):<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8A%E5%8D%8811.19.05.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8A%E5%8D%8811.19.05.png"></p>
<h3 id="与RBDMS的主要区别"><a href="#与RBDMS的主要区别" class="headerlink" title="与RBDMS的主要区别"></a>与RBDMS的主要区别</h3><p>MongoDB和RDBMS的主要区别在于：</p>
<ul>
<li>RBDMS的数据记录是<code>平</code>的， 而MongoDB的数据单元<code>Document</code>是可以嵌入的，比如一个CSV文件，一个字段一个值; 但是mongo可以一个字段可以存储多个值如:<code>&#123;&#39;key&#39;: [v1,v2]&#125;</code>, 通过不同组合还可以生成更复杂的数据结构。</li>
<li>RBDMS所有的数据结构<code>schema</code>必须预定义， MongoDB不需要预定义, <code>Document</code>可以存储任何结构的数据。</li>
<li>MongoDB是没有<code>join</code>查询操作的。 RBDMS数据库设计的核心讲究<code>Normalization</code>, 数据越结构化，冗余越少越好。 而MongoDB鼓励<code>denormalized</code>, 通过数据冗余做到<code>join</code>查询。</li>
<li>MongoDB的数据一致性需要客户端来维护， mongo没有<code>ACID</code>的<code>Isolation</code>概念， 一个并发客户端可能读到另一个并发用户修改的数据。</li>
<li>同样地, <code>transaction</code>事务也是不存在，（<strong>注意， 4.0这个版本支持ACID的事务</strong>）。MongoDB原子性操作只能做到document级别。<br>而正是移除关系型数据库部分特性， mongo才能做到更好的扩展性和轻量级， 这两条正适合用于处理大数据。</li>
</ul>
<h3 id="查询处理"><a href="#查询处理" class="headerlink" title="查询处理"></a>查询处理</h3><p>Mongo的<code>Collection</code>可以认为是关系型数据库的<code>table</code>， <code>Document</code>可以认为是关系型数据库的<code>records</code>. 并且不需要预创建数据库和<code>collection</code>, 如下是一些基本操作, </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: p = &#123;<span class="string">&#x27;first&#x27;</span>:<span class="string">&quot;Dave&quot;</span>, <span class="string">&#x27;lastname&#x27;</span>: <span class="string">&quot;He&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: client = pymongo.MongoClient()</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: db = client.test_database</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: db.person.insert_one(&#123;<span class="string">&#x27;first&#x27;</span>:<span class="string">&#x27;NN&#x27;</span>, <span class="string">&#x27;lastname&#x27;</span>:<span class="string">&#x27;HE&#x27;</span>&#125;)</span><br><span class="line">Out[<span class="number">6</span>]: &lt;pymongo.results.InsertOneResult at <span class="number">0x21f9710</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: db.person.find_one()</span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">&#123;<span class="string">u&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;5ba858bc91046605e83667dd&#x27;</span>),</span><br><span class="line"> <span class="string">u&#x27;first&#x27;</span>: <span class="string">u&#x27;Dave&#x27;</span>,</span><br><span class="line"> <span class="string">u&#x27;lastname&#x27;</span>: <span class="string">u&#x27;He&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以创建索引加速查询, MongoDB的索引以<code>Btree</code>的数据结构存储, 所以支持范围查询. 由于<code>document</code>本身就是一棵树, 索引可以嵌套到<code>document</code>下层里的某个值. 也可以创建符合索引, 如<code>db.person.ensureIndex(&#123;lastname:1, firstname:1&#125;)</code>. 索引也可以是单键多值array.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: db.person.index_information()</span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">u&#x27;_id_&#x27;</span>: &#123;<span class="string">u&#x27;key&#x27;</span>: [(<span class="string">u&#x27;_id&#x27;</span>, <span class="number">1</span>)], <span class="string">u&#x27;ns&#x27;</span>: <span class="string">u&#x27;test_database.person&#x27;</span>, <span class="string">u&#x27;v&#x27;</span>: <span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure></div>
<p>mongo默认给<code>_id</code>创建索引, 也可以给一个字段建新的索引, 创建索引可以是前台线下模式或者后台在线模式, 如果是线下模式, 如果是多副本集,需要考虑这些副本索引做到滚动更新.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: r = db.person.create_index([(<span class="string">&#x27;lastname&#x27;</span>, pymongo.ASCENDING)], unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: db.person.index_information()</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">&#123;<span class="string">u&#x27;_id_&#x27;</span>: &#123;<span class="string">u&#x27;key&#x27;</span>: [(<span class="string">u&#x27;_id&#x27;</span>, <span class="number">1</span>)], <span class="string">u&#x27;ns&#x27;</span>: <span class="string">u&#x27;test_database.person&#x27;</span>, <span class="string">u&#x27;v&#x27;</span>: <span class="number">2</span>&#125;,</span><br><span class="line"> <span class="string">u&#x27;lastname_1&#x27;</span>: &#123;<span class="string">u&#x27;key&#x27;</span>: [(<span class="string">u&#x27;lastname&#x27;</span>, <span class="number">1</span>)],</span><br><span class="line">  <span class="string">u&#x27;ns&#x27;</span>: <span class="string">u&#x27;test_database.person&#x27;</span>,</span><br><span class="line">  <span class="string">u&#x27;unique&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">  <span class="string">u&#x27;v&#x27;</span>: <span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure></div>
<p>但开始查询时如果有多个查询条件, <code>mongo</code>总是先尝试使用单个最佳索引找到符合的数据集, 然后根据后续的其它条件迭代查询.<br>那么如果一个<code>collection</code>的多索引是如何配合来加速查询的呢?<br>当一个查询执行时, mongo会给每个索引创建一个执行计划, 每个索引轮流执行查询, 直到所有索引执行完查询, mongo记录下最快执行查询的索引,后续就会使用这个索引查询, 直到后续一定量的数据更新, 才会重新执行上述流程.<br>针对执行计划每次查询只用一个索引的特点, 查询时注意查询条件, 并且创建主键以外的复合索引来加速查询至关重要! 同时也要注意索引的开小, 删除不必要的索引.</p>
<h3 id="存储模型"><a href="#存储模型" class="headerlink" title="存储模型"></a>存储模型</h3><p>MongoDB通过内存mapping文件把存储在磁盘上数据文件直接映射到内存<code>byte array</code>, 数据的访问逻辑是通过<code>指针算法</code>实现的. 每个<code>collection</code>存在单独的一个<code>namespace</code>文件(记录元信息)和多个可扩展(<code>extent</code>)数据文件.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%883.58.50.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%883.58.50.png"><br>每个<code>collection</code>的数据被组织在<code>extent</code>文件中, 每个<code>extent</code>是一段连续的磁盘空间,使用双向链表连接<code>extent</code>. <code>extent</code>包含了多个<code>document</code>, 每一个<code>document</code>也会和其相邻的<code>document</code>相连, 实际数据就以Bson的格式存储在上图中的<code>DocRecord</code>. 一个<code>extent</code>会指向所包含的<code>document</code>链表的头和尾(当然extent和extent之间也是连起来的). </p>
<p>任何修改数据会直接在原地进行. 为了预防数据修改后大小超过了原来记录的分配的空间, 整条记录会被移动到一个更大的区域(附带一些填充占位的字节, 这些填充的字节当作缓存空间用于将来可以用于放置更大的空间, 那么具体填充多少字节, 这就需要每个collection有一个统计值, 专门记录修改的统计数据), 原来空出来的空间将会被释放, 有一张表会记录<code>free list</code>的大小.<br>基于上述移动空间的设计, 我们可以预见数据会变得片段化, 所以mongo需要周期性地运行<code>compact</code>命令, 会把数据移动到连续的空间内, 以提高IO性能.这个操作通常需要在线下进行, 副本集则需要滚动更新.</p>
<p>索引是通过Btree实现的, 每个Btree的节点含有一个key数字和指向左边子节点的指针.</p>
<h3 id="数据的更新和事务"><a href="#数据的更新和事务" class="headerlink" title="数据的更新和事务"></a>数据的更新和事务</h3><p>更新一条记录是在原数据上直接做修改:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: db.person.update_one(&#123;<span class="string">&#x27;first&#x27;</span>:<span class="string">&#x27;Dave&#x27;</span>&#125;, &#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;first&quot;</span>:<span class="string">&#x27;David&#x27;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: db.person.find_one()</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">&#123;<span class="string">u&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;5ba858bc91046605e83667dd&#x27;</span>),</span><br><span class="line"> <span class="string">u&#x27;first&#x27;</span>: <span class="string">u&#x27;David&#x27;</span>,</span><br><span class="line"> <span class="string">u&#x27;lastname&#x27;</span>: <span class="string">u&#x27;He&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></div>
<p>mongo写的时候可以指定多种方式(policy), 以表示写是否成功了, 如数据已经在磁盘持久化了; 或者数据已经在多个副本集传递(可以通过<code>getLastError</code>拿到执行返回值). 另外, mongo是可以给副本集打<code>tag</code>, 所以可以基于<code>tag</code>制定写策略.</p>
<p>由于所有从mongo读到的数据都是过去的快照, 读到的数据可能已经被其它客户修改, 所以如果有一致性要求, 每次修改数据前可以先读一次验证数据, 然后再做修改.<br>mongo可以在修改前验证条件, 使用<code>findAndModify</code>api更新数据. 如果是<code>pymongo</code>那么<code>update</code>会帮做验证条件, 不需要额外做这一步.</p>
<p>mongo没有事务的概念(4.0以前), 对每个<code>document</code>的操作都是原子性的, 但是如果多个<code>document</code>被修改, 原子性是不能保证的.所以客户端需要自行实现多文件更新原子性.一个常见的技术是: 首先创建一个独立的文档(叫做transaction), 把所有需要更新的文档连接起来; 然后把所有需要更新的文档反链到transaction; 接着如下图做二段式提交完成事务.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%885.31.48.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%885.31.48.png"></p>
<h3 id="复制模型"><a href="#复制模型" class="headerlink" title="复制模型"></a>复制模型</h3><p>Mongdb通过副本集(replica set)做到高可用和读查询的负载均衡(没有做到写负载均衡), 通过把数据复制到多个服务器做到冗余. 具体包括一个主要DB和多个二级DB. 为了数据一致性, 所有修改都会在主DB操作然后异步复制到副本. 副本集之间的节点通过心跳同步状态, 如果有一个节点失去心跳(挂了), 那么就会失去<code>membership</code>. 如果后面恢复了那么这个节点会重新加入集群, 通过和主DB通信,获取<code>changelog</code>恢复到最新的数据. 如果主DB的<code>changelog</code>没有覆盖这个节点挂掉到恢复的全部日志, 那么需要重新导入主DB的所有数据.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%885.39.34.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%885.39.34.png"><br>如果主DB挂掉了, 那么集群将进行选举, 通过节点优先级,运行时间等条件从二级DB中选出新的主DB, 由于二级DB采用异步复制的形式, 这个新选出来的主DB可能不是最新的数据版本.</p>
<p>客户端驱动库需要实现找到主DB的功能, 在开始连接数据库后, 客户端需要发出<code>isMaster</code>的指令从当前集群中找到主DB和所有副本, 然后客户端会把大部分请求发给主DB, 部分读请求发给二级DB; 这个<code>isMaster</code>的指令会周期性的发送, 以便同步当前集群信息. 所有挂掉的节点, 客户端会强制中断连接.</p>
<p>MongoDB有一个特殊的二级DB叫<code>Delayed Slave</code>, 它是延迟一段时间同步主数据库. 主要用来恢复短期误删的的数据.<br>在读取查询时, 可以指定从二级DB读取数据, 这样读到的数据可能不是最新的, 但是可以使用这个特性做到查询的负载均衡. 客户端可以ping二级DB, 挑选最快的节点查询数据.</p>
<h3 id="分片模型"><a href="#分片模型" class="headerlink" title="分片模型"></a>分片模型</h3><p>想要做到写负载均衡, 需要使用MongoDB的<code>sharding</code>. 在<code>sharding</code>配置中, 一个<code>collection</code>可以通过<code>partition key</code>被分割到多个<code>chunks</code>内(一组key的范围), 多个<code>chunks</code>被分配到不同的<code>shards</code>, 每个<code>shards</code>都是副本集(<code>replica set</code>). 通过<code>sharding</code>, mongo可以存储无限量的数据, 这点在大数据应用场景十分重要.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%888.03.33.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-24%20%E4%B8%8B%E5%8D%888.03.33.png"><br>在<code>sharding</code>模式下, 客户端需要连接到<code>MongoS</code>, 它是一个路由服务器把客户端的请求发送到合适的分片. 对于<code>insert/delete/update</code>修改操作请求, 如果包含<code>partition key</code>, 那么基于<code>chunk/shard</code>映射表信息(从<code>config server</code>得到,并且本地缓存), 路由服务器可以找到对应chunk的节点服务器. 如果是读查询, 路由服务器会检测<code>partition key</code>是否包含在查询的部分条件中, 如果是那么就可以找到对应的主或二级<code>shard</code>; 但是也有可能查询条件不含有<code>partition key</code>, 那么路由会把请求发给每个<code>shard</code>.如果查询需要排序, 同时<code>partition key</code>在排序的条件中, 那么路由会一次按<code>partition key</code>排序<code>shards</code>; 如果不包含<code>partition key</code>, 路由服务器会把请发给每个<code>shard</code>, 然后做<code>merge-sort</code>.<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-01-10%20at%2014.32.27.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-01-10%20at%2014.32.27.png"><br>另一方面, 路由服务器需要保障每个<code>shards</code>中的数据<code>chunks</code>大致一样多. 当不平衡的条件被检测到, 路由器会通知chunk较多的<code>shard</code>触发迁移工作. 这个迁移工作是线上进行的, 数据迁移时进行多次delta检查, 直到最后数据迁移完毕, 目标服务器会通知<code>config server</code>新的<code>shard</code>信息, 通知源服务发送<code>StaleConfigException</code>给路由服务器, 让路由器重新读取配置信息. 后面的某个时间点, 源服务器旧的<code>shard</code>数据将会被删除. 如果在迁移的过程中发生高频率的更新操作, 那么迁移会停止,路由服务器会选择新的<code>chunk</code>去迁移数据.</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Aliyun RDS for Mysql</title>
    <url>/2017/11/12/database-mysql-2017-11-13-Aliyun-Mysql/</url>
    <content><![CDATA[<h2 id="RDS文档小结"><a href="#RDS文档小结" class="headerlink" title="RDS文档小结"></a>RDS文档小结</h2><p>默认部署主备架构且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案</p>
<h3 id="账号模式"><a href="#账号模式" class="headerlink" title="账号模式"></a>账号模式</h3><ul>
<li><p>rds账户分为经典模式和高权限模式，5.7只有高权限模式。</p>
</li>
<li><p>它们之间的区别是能不能直接通过sql创建账户，见下图.</p>
<p>&lt;img src&#x3D;”<a class="link"   href="http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/26186/cn_zh/1510133360436/%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%B4%A6%E5%8F%B7%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8%E5%AF%B9%E6%AF%94.png" >http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/26186/cn_zh/1510133360436/%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%B4%A6%E5%8F%B7%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8%E5%AF%B9%E6%AF%94.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“ alt&#x3D;”Drawing” width&#x3D;”400)</p>
</li>
<li><p><strong>注意！！</strong> 升级了高权限就不能回滚经典模式了！</p>
</li>
</ul>
<h3 id="Rds的一些使用限制"><a href="#Rds的一些使用限制" class="headerlink" title="Rds的一些使用限制"></a>Rds的一些使用限制</h3><ul>
<li>不提供root或sa账户</li>
<li>修改部分参数限制</li>
<li>通过命令行和图形界面进行逻辑备份，控制台和api进行物理备份。还原亦然。</li>
<li>使用命令行和图形界面进行逻辑导入，mysql命令行和数据迁移服务进行数据迁移。</li>
<li>存储引擎：只支持InnoDb和TokuDB。</li>
<li>默认主备复制双节点，无需手动搭建，用户不能访问slave。5.7只有基础版本，没有主备，支持原生Json。</li>
<li>只能通过api和控制台进行重启。</li>
<li>普通账户不可以自定义授权，5.7不支持创建普通账户权限。</li>
</ul>
<h3 id="高可用服务"><a href="#高可用服务" class="headerlink" title="高可用服务"></a>高可用服务</h3><ul>
<li>阿里云的rds高可用采用Detection, Repair, Notice等模块组成， 主要保障数据链路服务的可用性。</li>
<li>Detection: 通过HA判断主备节点是否正常，能够排除网络抖动，30秒完成异常切换操作。</li>
<li>Repair: 维护主备节点的复制关系和修复。</li>
<li>Notice: 负责通知HA主备节点的状态变化。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/rda%20ha.png"
                      alt="rds HA"
                ></li>
<li>多可用区可以承受机房级别的故障，多可用采用半同步复制方案，响应时间可能比单可用长。</li>
<li>高可用策略：<ul>
<li>rds有两个高可用策略，RTO(recovery time objective）和RPO(recovery point objective)</li>
<li>三种复制方式：</li>
</ul>
<ol>
<li>异步复制, 主库提交，响应应用，再向slave异步复制。</li>
<li>强同步， 主备复制完成后返回响应。</li>
<li>半同步， 正常主备强同步，当主向备复制发生问题时，主退化为异步复制。</li>
</ol>
</li>
</ul>
<h3 id="备份服务"><a href="#备份服务" class="headerlink" title="备份服务"></a>备份服务</h3><ul>
<li>通过Backup, Recovery, Storage模块提供数据的离线备份，转储和恢复</li>
<li>通过Backup备节点压缩数据到oss</li>
<li>通过Recovery可以恢复备份文件到目标节点：<br>  - 回滚主节点<br>  - 修复备节点<br>  - 创建只读实例</li>
<li>通过Storage 复制备份文件的上传、转储，下载。</li>
</ul>
<h3 id="从本地迁移数据到云上"><a href="#从本地迁移数据到云上" class="headerlink" title="从本地迁移数据到云上"></a>从本地迁移数据到云上</h3><ul>
<li>云上的数据库账号需要和本地一致</li>
<li>支持DTC, FTP, mysqldump</li>
<li>使用DTS迁移可以实现不停应用，平滑迁移。</li>
<li>DTS支持结构迁移、全量迁移、增量迁移。迁移过程中有数据变更可以开启增量迁移。<a class="link"   href="https://help.aliyun.com/document_detail/26132.html" >DTS迁移文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><ul>
<li>迁移过程中不支持DDL</li>
<li>结构迁移不支持event迁移</li>
<li>增量迁移本地需要开启binlog，binlog_format为row。如果本地 MySQL 为5.6版本时，它的 binlog_row_image还须设置为full。</li>
</ul>
</li>
<li><a class="link"   href="https://help.aliyun.com/document_detail/26133.html" >mysqldump doc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="容灾"><a href="#容灾" class="headerlink" title="容灾"></a>容灾</h3><ul>
<li>RDS 通过数据传输服务（DTS）实现主实例和异地灾备实例之间的实时同步。<br>主实例和灾备实例均搭建主备高可用架构，当主实例所在区域发生突发性自然灾害等状况，<br>主节点（Master）和备节点（Slave）均无法连接时，可将异地灾备实例切换为主实例，<br>在应用端修改数据库链接地址后，即可快速恢复应用的业务访问。</li>
<li>多收DTS的费用</li>
<li>灾备实例不支持备份设置、备份恢复、数据迁移、数据库管理、申请外网访问地址、修改连接地址功能。</li>
</ul>
<h3 id="mysql和oss搭配使用"><a href="#mysql和oss搭配使用" class="headerlink" title="mysql和oss搭配使用"></a>mysql和oss搭配使用</h3><ul>
<li>多类数据存储解决方案</li>
</ul>
<h3 id="数据库性能测试"><a href="#数据库性能测试" class="headerlink" title="数据库性能测试"></a>数据库性能测试</h3><ul>
<li>使用测压<a class="link"   href="https://github.com/akopytov/sysbench" >SysBench0.5 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>准备数据<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysbench --num-threads=32 --max-time=3600 --max-requests=999999999 --test= oltp.lua --oltp-table-size=10000000</span><br><span class="line">--oltp-tables-count=64 --db-driver=mysql --mysql-table-engine=innodb</span><br><span class="line">--mysql-host= XXXX --mysql-port=3306 --mysql-user= XXXX --mysql-password= XXXX prepare</span><br></pre></td></tr></table></figure></div></li>
<li>压测性能<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysbench --num-threads=32 --max-time=3600 --max-requests=999999999 --test= oltp.lua --oltp-table-size=10000000</span><br><span class="line">--oltp-tables-count=64 --db-driver=mysql --mysql-table-engine=innodb --mysql-host= XXXX --mysql-port=3306</span><br><span class="line">--mysql-user= XXXX --mysql-password= XXXX run</span><br></pre></td></tr></table></figure></div></li>
<li>清理环境<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysbench --num-threads=32 --max-time=3600 --max-requests=999999999 --test= oltp.lua --oltp-table-size=10000000</span><br><span class="line">--oltp-tables-count=64 --db-driver=mysql --mysql-table-engine=innodb --mysql-host= XXXX --mysql-port=3306</span><br><span class="line">--mysql-user= XXXX --mysql-password= XXXX cleanup</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="DMS在线数据库管理工具"><a href="#DMS在线数据库管理工具" class="headerlink" title="DMS在线数据库管理工具"></a>DMS在线数据库管理工具</h3><h3 id="重启的坑！"><a href="#重启的坑！" class="headerlink" title="重启的坑！"></a>重启的坑！</h3><ul>
<li>由于数据库重启时，rds会自动更新小版本，如果出现不兼容后果自负！所以重启前必须先购买一个新的实例进行兼容测试。</li>
</ul>
<h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><ul>
<li>5.6使用TokuDB支持存储压缩数据</li>
</ul>
<h3 id="主备切换"><a href="#主备切换" class="headerlink" title="主备切换"></a>主备切换</h3><ul>
<li>主备切换会有闪断，应用需要重连。实际体验小于1分钟完成切换， 5.7没有备。</li>
</ul>
<h3 id="数据复制方式"><a href="#数据复制方式" class="headerlink" title="数据复制方式"></a>数据复制方式</h3><ul>
<li>复制方式包括： 强同步，半同步，异步</li>
<li>强同步需要3台以上节点，一个事务包含同步完成大部分节点</li>
<li>半同步在同步出现异常时，退化为异步同步。</li>
<li>异步可能会引起数据不一致。</li>
</ul>
<h3 id="CloudDBA监控服务"><a href="#CloudDBA监控服务" class="headerlink" title="CloudDBA监控服务"></a>CloudDBA监控服务</h3><ul>
<li>实时性能监控</li>
<li>会话诊断和终止</li>
<li>分析慢sql</li>
<li>CloudDBA仅适用于公共云华北1、华北2、华东1、华东2、华南1地域的MySQL 5.5和MySQL 5.6版本的实例<br>监控的metrics:</li>
<li>IOPS</li>
<li>latency</li>
<li>throughput</li>
<li>queue depth</li>
</ul>
<h3 id="mysql5-6的读写分离"><a href="#mysql5-6的读写分离" class="headerlink" title="mysql5.6的读写分离"></a>mysql5.6的读写分离</h3><ul>
<li><p>读写分离和主实例、读实例的区别，后者单独有连接地址，业务逻辑选择进行连接。读写分离是一个统一的地址，程序自动进行读写分流。</p>
</li>
<li><p>用户只需要购买读实例，可以免费试用读写分离</p>
<p>&lt;img src&#x3D;”<a class="link"   href="http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/51073/cn_zh/1505467133787/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%9C%B0%E5%9D%80.png" >http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/51073/cn_zh/1505467133787/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%9C%B0%E5%9D%80.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“ alt&#x3D;”Drawing” width&#x3D;”400)</p>
</li>
</ul>
<h3 id="数据备份和恢复"><a href="#数据备份和恢复" class="headerlink" title="数据备份和恢复"></a>数据备份和恢复</h3><ul>
<li>数据备份oss+日志oss总量&gt;实例空间50%时，将收费。</li>
<li><strong>误删数据该如何恢复？</strong> 使用克隆实例按 <em>按备份集</em> 或 <em>按时间点</em> 两种方式复制出一个新的实例，进入克隆实例导出sql,再进入主实例导入sql。若数据较多可以使用DTS.</li>
<li>不建议使用覆盖性恢复</li>
</ul>
<h3 id="虚机自建mysql和RDS性能对比"><a href="#虚机自建mysql和RDS性能对比" class="headerlink" title="虚机自建mysql和RDS性能对比"></a>虚机自建mysql和RDS性能对比</h3><ul>
<li>云数据库是可能比自建数据库慢的。见<a class="link"   href="https://help.aliyun.com/document_detail/55823.html" >对比ECS自建数据库与RDS性能时的注意事项 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h3><ul>
<li>SSL</li>
<li>TDE 指定参与加密的数据库或者表。这些数据库或者表中的数据在写入到任何设备（磁盘、SSD、PCIE 卡）或者服务（OSS、OAS）前都会进行加密.</li>
</ul>
<h3 id="其它技术运维问题"><a href="#其它技术运维问题" class="headerlink" title="其它技术运维问题"></a>其它技术运维问题</h3><ul>
<li><a class="link"   href="https://help.aliyun.com/knowledge_list_page/41698/1.html" >其他问题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="影响数据库存储性能的方面"><a href="#影响数据库存储性能的方面" class="headerlink" title="影响数据库存储性能的方面"></a>影响数据库存储性能的方面</h3><ul>
<li>计算实例的配置</li>
<li>IO的性能</li>
<li>负载需求</li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>高性能mysql笔记</title>
    <url>/2017/11/14/database-mysql-2017-11-15-high-performance-mysql/</url>
    <content><![CDATA[<h3 id="sql执行大致流程"><a href="#sql执行大致流程" class="headerlink" title="sql执行大致流程"></a>sql执行大致流程</h3><ul>
<li>客户端发送一条查询给服务器。</li>
<li>服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。</li>
<li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。</li>
<li>MySQL根据优化器生成的执行计划，再调用存储引擎的API来执行查询。</li>
<li>将结果返回给客户端。</li>
</ul>
<h3 id="mysql的架构"><a href="#mysql的架构" class="headerlink" title="mysql的架构"></a>mysql的架构</h3><ul>
<li>mysql采用存储和计算分离的架构, 是一个典型的单进程多线程模型数据库.</li>
<li>mysql可以开启线程池，处理客户端的请求。</li>
<li>select语句会在缓存中先查找，没有hit才会到解释器。</li>
<li>解释器创建内部数据结构并做优化，最后才到存储器API。优化决策时用户可以使用hint关键字来影响mysql的决策过程，也可能使用explain来看看mysql是怎么决策的。</li>
<li>优化器会查询存储引擎提供一些信息来帮助优化。<br><img src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-01-08%20at%2021.26.22.png" alt="https://s3.ap-southeast-1.amazonaws.com/kopei-public/screen_shot%202019-01-08%20at%2021.26.22.png"></li>
</ul>
<h3 id="启动一个mysql实例"><a href="#启动一个mysql实例" class="headerlink" title="启动一个mysql实例"></a>启动一个mysql实例</h3><p>一般命令行启动mysql需要指定<code>basedir</code>, <code>datadir</code>, <code>user</code>, <code>log-error</code>, <code>pid-file</code>, <code>socket</code>等参数, <code>basedir</code>下面放置项目二进制可执行文件和库文件,pid文件和socket等文件. <code>datadir</code>目录下放置server log文件, innodb相关文件, 数据文件如<code>.ibd</code>数据和索引文件, <code>.frm</code>对象结构文件等.</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/libexec/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/var --user=mysql --log-error=error.log \</span><br><span class="line">--pid-file=/usr/local/mysql/var/mysql.pid --socket=/tmp/mysql.sock --port=3306</span><br></pre></td></tr></table></figure></div>

<h3 id="mysql的并发控制"><a href="#mysql的并发控制" class="headerlink" title="mysql的并发控制"></a>mysql的并发控制</h3><ul>
<li>mysql在服务层和存储层都做了并发控制， 一般使用锁来控制并发。</li>
<li>存储引擎有自己的锁策略和颗粒度，但是服务层的策略高于存储层。比如alter table 使用应用层的表锁，忽略存储层锁机制。</li>
<li>行锁只有在存储层实现, 一般通过多版本并发控制MVCC, 提升并发性能。简单原理是一个事务看到的是某一时刻数据的备份。</li>
<li>可以显式地加锁：<ul>
<li><code>select ... lock in share mode;</code></li>
<li><code>select ... for update;</code></li>
</ul>
</li>
</ul>
<h3 id="MVCC-Multi-Version-concurrent-control"><a href="#MVCC-Multi-Version-concurrent-control" class="headerlink" title="MVCC(Multi-Version concurrent control)"></a>MVCC(Multi-Version concurrent control)</h3><ul>
<li>实现机制： 基于某个时间点的快照。非阻塞度，行锁写</li>
<li>InnoDB在每个行记录后面保存两个隐藏的列(时间上根据mysql版本不同，有更多的隐藏列, 5.7是3个字段）， 一个行的创建时间，一个是过期时间。时间都是系统版本号。</li>
<li>在repeartable read隔离等级下， mvcc的操作:<ul>
<li>select:<br>    只会查到当前事务版本号前面或等于当前版本号（事务修改过）的行。<br>    删除的行也会作比较。</li>
<li>insert:<br>    插入一条数据，加2个隐藏的列</li>
<li>delete:<br>    删除一行，在删除列加入当前系统版本</li>
<li>update:<br>    插入一条新的记录，把老的记录删除行更新系统版本。</li>
</ul>
</li>
</ul>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul>
<li>它是被设计为处理大量短时事务。</li>
<li>使用next-key locking实现防止幻读。</li>
</ul>
<h3 id="事务只有在存储引擎实现"><a href="#事务只有在存储引擎实现" class="headerlink" title="事务只有在存储引擎实现"></a>事务只有在存储引擎实现</h3><ul>
<li>需要格外小心事务中混合了事务型和非事务型表</li>
</ul>
<h3 id="ACID是一个事务的标准特征"><a href="#ACID是一个事务的标准特征" class="headerlink" title="ACID是一个事务的标准特征"></a>ACID是一个事务的标准特征</h3><ul>
<li>mysql主要关心两个隔离等级，<code>Read committed</code>和<code>repeatable read</code>。 <code>read committed</code>也是<code>nonrepeatable read</code>.<br>repeatable read是mysql默认隔离等级，保证同一个事务多次读取同样记录结果一致。</li>
<li>InnoDB使用不同<code>locking strategy</code>来实现不同隔离等级.</li>
<li>在多个事务里可能出现死锁现象, innoDB处理的方式是将最少行级排它锁进行回滚。</li>
</ul>
<h3 id="隔离等级下的幻读和脏读"><a href="#隔离等级下的幻读和脏读" class="headerlink" title="隔离等级下的幻读和脏读"></a>隔离等级下的幻读和脏读</h3><p>假设有一张表: t_1(id primary key, name) 有三条数据.<br>幻读现象会在这种情况出现, A事务先执行:<br><code>select * from t_1 where id=4</code><br>然后B事务执行<br><code>insert into t_1 values (4, &#39;Hanny&#39;)</code><br><strong>如果此时隔离等级是<code>read committed</code></strong>,那么事务A再执行<code>select * from t_1 where id=4</code>就会读到这条数据, 出现所谓的<strong>幻读</strong>. 如果此时的隔离等级是<code>repeatable read</code>那么A事务再执行select将不会读到<code>id=4</code>的数据.<br>脏读现象出现在A事务读取了B事务未提交的更新, 如A事务<code>start transaction; insert into t_1 values (4, &#39;hanny&#39;)</code>, B事务<code>select * from t_1 where id=4</code>读到了数据, 就是脏读. 这种情况一般出现在隔离等级在<code>read uncommitted</code>的时候.</p>
<h3 id="和隔离等级密切相关的各种锁-V5-7"><a href="#和隔离等级密切相关的各种锁-V5-7" class="headerlink" title="和隔离等级密切相关的各种锁(V5.7)"></a>和隔离等级密切相关的各种锁(V5.7)</h3><ul>
<li><code>record lock</code>记录锁, <code>select ... lock in share mode/select ... for update</code>会加记录锁, 锁定的这行不能被另一个事务做<code>insert, update, delete</code>. 记录锁会锁定有索引的记录, 如果表没有定义索引, innodb会隐含创建<code>hidden clustered index</code>. 在<code>RR</code>隔离等级下, <code>select ... lock in share mode/select ... for update</code>加上where唯一索引作为唯一查询条件, 可以实现<code>RR</code>.</li>
<li></li>
</ul>
<h3 id="使用事务日志可以提高存储引擎修改表数据效率"><a href="#使用事务日志可以提高存储引擎修改表数据效率" class="headerlink" title="使用事务日志可以提高存储引擎修改表数据效率"></a>使用事务日志可以提高存储引擎修改表数据效率</h3><ul>
<li>做法类似redis, 仅仅持久化事务日志，在内存中更新数据，然后后台再慢慢写入磁盘。</li>
</ul>
<h3 id="Mysql提供两种事务性存储引擎InnoDB-NBD-cluster"><a href="#Mysql提供两种事务性存储引擎InnoDB-NBD-cluster" class="headerlink" title="Mysql提供两种事务性存储引擎InnoDB, NBD cluster"></a>Mysql提供两种事务性存储引擎InnoDB, NBD cluster</h3><ul>
<li>自动提交auto-commit： 默认开启，即便不是显式开启，每个查询还是会默认进行事务。</li>
</ul>
<h3 id="Mysql的复制方式"><a href="#Mysql的复制方式" class="headerlink" title="Mysql的复制方式"></a>Mysql的复制方式</h3><ul>
<li>主库记录二进制日志，备库将主库日志复制到中继日志（relay log)后，重放二进制日志。同一时间点主备数据可能不一致。</li>
</ul>
<h3 id="设计mysql备份方案"><a href="#设计mysql备份方案" class="headerlink" title="设计mysql备份方案"></a>设计mysql备份方案</h3><ul>
<li><p>逻辑备份恢复太慢，采用ExtraBackup快照备份是物理备份较好的选择。</p>
</li>
<li><p>保留多个备份集</p>
</li>
<li><p>定期恢复</p>
</li>
<li><p><strong>expire_logs_bin</strong> 设置足够长，保留二进制日志文件用于基于时间点的恢复。</p>
</li>
<li><p>监控和检查备份是否正常？监控恢复需要耗费多少资源和时间？</p>
</li>
<li><p>选择在线备份，可能是导致mysql服务中断</p>
</li>
<li><p>逻辑备份导出的文件要么是sql要么是类似csv的文本；物理备份就是直接复制原始文件。</p>
<ul>
<li>逻辑备份的优点：</li>
</ul>
<ol>
<li>逻辑备份可以消除底层存储引擎的影响<br>  2. 如果内存保存着正确数据但是磁盘坏了，不能复制一个正确的物理备份， 仍可能导出一个正常的逻辑备份。</li>
</ol>
<ul>
<li>逻辑备份的缺点：</li>
</ul>
<ol>
<li>需要消耗cpu，恢复时间较长，需要建index等。</li>
<li>ASCII形式的数据可能比原始数据大</li>
<li>恢复时可能由于bug或者浮点表示问题，无法保证还原一模一样的数据。</li>
</ol>
<ul>
<li>物理备份的优点：</li>
</ul>
<ol>
<li>恢复快速， 不需要执行任何sql或构建索引。</li>
</ol>
<ul>
<li>物理备份的缺点：</li>
</ul>
<ol>
<li>原始文件比逻辑备份大</li>
<li>可能不总是夸平台</li>
</ol>
</li>
<li><p>使用check tables或mysqlcheck 检查恢复操作。</p>
</li>
</ul>
<h3 id="推荐的备份方案"><a href="#推荐的备份方案" class="headerlink" title="推荐的备份方案"></a>推荐的备份方案</h3><ul>
<li>先一周使用一次使用物理备份，启动mysql实例，运行mysqlcheck, 然后在服务器负载低时周期性地mysqldump执行逻辑备份，30分钟备份一次bin-log,热备份完flush logs。</li>
</ul>
<h3 id="需要备份什么？"><a href="#需要备份什么？" class="headerlink" title="需要备份什么？"></a>需要备份什么？</h3><ul>
<li>二进制文件, InnoDB事务日志</li>
<li>代码，如存储过程</li>
<li>配置</li>
<li>服务器配置</li>
<li>操作系统配置</li>
</ul>
<h3 id="增量备份存在中间增量出错，导致整个备份不可用的风险"><a href="#增量备份存在中间增量出错，导致整个备份不可用的风险" class="headerlink" title="增量备份存在中间增量出错，导致整个备份不可用的风险"></a>增量备份存在中间增量出错，导致整个备份不可用的风险</h3><h3 id="备份中如果要保持数据一致性"><a href="#备份中如果要保持数据一致性" class="headerlink" title="备份中如果要保持数据一致性"></a>备份中如果要保持数据一致性</h3><ul>
<li>使用InnoDB，能够保证一个事务内数据一致备份到另处。但是如果应用逻辑写的不对，导致本应该是一个事务到了两个事务，备份在两个事务之中可能数据不一致。</li>
<li>mysqldump –single-transaction 在InnoBD开始dump开启事务，隔离等级必须是repeatable read. 但是dump时不能执行ALTER TABLE, CREATE TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE。<strong>To dump large tables, combine the –single-transaction option with the –quick option.</strong></li>
</ul>
<h3 id="使用LVM镜像做mysql备份的基本思路"><a href="#使用LVM镜像做mysql备份的基本思路" class="headerlink" title="使用LVM镜像做mysql备份的基本思路"></a>使用LVM镜像做mysql备份的基本思路</h3><ul>
<li>获取读锁</li>
<li>将缓存中的数据写到磁盘</li>
<li>建立快照</li>
<li>释放读锁</li>
</ul>
<h3 id="LVM-CoW原理"><a href="#LVM-CoW原理" class="headerlink" title="LVM CoW原理"></a>LVM CoW原理</h3><ul>
<li>给一个卷打一个快照，只记录元信息，当源卷发生写，把需要改变的那部分数据在未改变前复制到快照。这样，读取快照时，既能保证拍照时的数据一致，又能省时间性能。</li>
<li>LVM快照的一些限制：<ul>
<li>所有文件必须在同一个逻辑卷（分区）</li>
<li>需要有足够空间</li>
</ul>
</li>
</ul>
<h3 id="Mysql的索引"><a href="#Mysql的索引" class="headerlink" title="Mysql的索引"></a>Mysql的索引</h3><ul>
<li>索引在mysql也叫key， mysql有单列索引和多列索引。多列索引根据左序排列。</li>
<li>索引的类型：<ul>
<li>B-Tree索引， MyISAM使用压缩的索引指向数据的物理位置；innodb使用索引指向数据的主键。</li>
</ul>
</li>
<li>一个典型的B+树索引<br>![](.&#x2F;images&#x2F;B+tree.png” width&#x3D;”450” height&#x3D;”450”&gt;</li>
<li>对于下面这个多列索引：索引根据建表时指定key的值，按大小排序<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> people (</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="keyword">not</span> <span class="keyword">NULL</span>,</span><br><span class="line">first_name <span class="type">VARCHAR</span> (<span class="number">50</span>), <span class="keyword">not</span> <span class="keyword">NULL</span> ,</span><br><span class="line">dob <span class="type">DATE</span> , <span class="keyword">not</span> <span class="keyword">NULL</span> ,</span><br><span class="line">gender enum(<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>) <span class="keyword">not</span> <span class="keyword">NULL</span> ,</span><br><span class="line">key(last_name, first_name, dob)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
![](.&#x2F;images&#x2F;multi-col-index.png” width&#x3D;”450” height&#x3D;”450”&gt;</li>
<li>对于多列索引，B+tree适合的查询方式有：<ul>
<li>完全匹配</li>
<li>最左列完全匹配，仅适用于第一个column,即last_name</li>
<li>键值范围, 仅适用于第一个column，即last_name值的范围</li>
<li>键值前缀, 仅适用于第一个column，即last_name begin with</li>
<li>完全匹配一个列，范围匹配另一个列</li>
<li>仅仅查询索引</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB for Mysql 5.6</title>
    <url>/2017/12/05/database-mysql-2017-12-06-InnoDB/</url>
    <content><![CDATA[<h3 id="Mysql-architecture"><a href="#Mysql-architecture" class="headerlink" title="Mysql architecture"></a>Mysql architecture</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/Custom-engine-overview.png"
                      alt="architecture"
                ></p>
<h3 id="InnoDB-High-Level-Overview"><a href="#InnoDB-High-Level-Overview" class="headerlink" title="InnoDB High Level Overview"></a>InnoDB High Level Overview</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/innodbHigh-level%20Overview.png"
                      alt="high-level-overview"
                ></p>
<ul>
<li><p><strong>what is in the buffer pool</strong></p>
<ul>
<li>index page </li>
<li>data page</li>
<li>redo page</li>
<li>insert buffer</li>
<li>adaptive hash index</li>
<li>lock info</li>
<li>data dictionary<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/innodb%20buffer%20pool%202017-12-08%201.46.27.png"
                      alt="innodb_buffer_pool"
                ></li>
</ul>
</li>
<li><p>the default page size is 16KB</p>
</li>
<li><p>innodb_buffer_pool_size and innodb_buffer_pool_instances</p>
<ul>
<li><code>select pool_id, pool_size, free_buffers, database_pages from information_schema.innodb_buffer_pool_stats;</code> #show buffer pool stats.</li>
<li><strong>innodb_buffer_pool_instances</strong> divides the buffer pool into specified number of separate regions. each with its own LRU list and data structures. <strong>The advantage</strong> is to reduce contention during concurrent memeory.</li>
<li>buffer instance param will only take effect when <strong>innodb_buffer_pool_size</strong> is larger than 1GB, and recommend use multiple Gigebytes</li>
</ul>
</li>
<li><p>from memory point of view, innodb has three types of page: clean page, dirty page and free page.</p>
<ul>
<li>clean page, data in memory and in disk is identical</li>
<li>dirty page, not identical</li>
<li>free page, not used page</li>
</ul>
</li>
<li><p>innodb logically has data page type: </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> page_type <span class="keyword">from</span> information_schema.innodb_buffer_page_lru <span class="keyword">where</span>;</span><br><span class="line"><span class="comment">-------page_type-------------</span></span><br><span class="line"><span class="keyword">SYSTEM</span></span><br><span class="line">INODE</span><br><span class="line">IBUF_INDEX</span><br><span class="line">INDEX</span><br><span class="line">IBUF_BITMAP</span><br><span class="line">TRX_SYSTEM</span><br><span class="line">UNDO_LOG</span><br><span class="line">FILE_SPACE_HEADER</span><br><span class="line"><span class="type">BLOB</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>LRU list, Free list and Flush list**</p>
<ul>
<li>innodb use list to manage different pages.</li>
<li>LRU list saves already read page. Use midpoint tech to save lastest read page into LRU list. </li>
<li>free list has all not used free page, when server starts, all the page are in free list, and move to LRU.</li>
<li>flush list contains all the dirty page. Use checkpoint to flush dirty data into disk. Dirty page may exist both in flush list and LRU list.</li>
<li>innodb_old_blocks_pct and innodb_old_blocks_time <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>variables like '%innodb_old_block%'``` # innodb_old_blocks_pct sets percertage of old list, innodb_old_blocks_time sets the midpoint page will be in the hot part of LRU list after certain time.</span></figcaption><table><tr><td class="code"><pre><span class="line">- ```show engine innodb status;``` #show the page info </span><br><span class="line">``` bash</span><br><span class="line">----------------------BUFFER POOL AND MEMORY----------------------</span><br><span class="line">Total large memory allocated 2198863872</span><br><span class="line">Dictionary memory allocated 776332</span><br><span class="line">Buffer pool size   131072</span><br><span class="line">Free buffers       124908</span><br><span class="line">Database pages     5720</span><br><span class="line">Old database pages 2071</span><br><span class="line">Modified db pages  910</span><br><span class="line">Pending reads 0</span><br><span class="line">Pending writes: LRU 0, flush list 0, single page 0</span><br><span class="line">Pages made young 4, not young 0</span><br><span class="line">0.10 youngs/s, 0.00 non-youngs/s</span><br><span class="line">Pages read 197, created 5523, written 5060</span><br><span class="line">0.00 reads/s, 190.89 creates/s, 244.94 writes/s</span><br><span class="line">Buffer pool hit rate 1000 / 1000, young-making rate 0 / 1000 not 0 / 1000</span><br><span class="line">Pages read ahead 0.00/s, evicted without access 0.00/s, Random read ahead 0.00/s</span><br><span class="line">LRU len: 5720, unzip_LRU len: 0 I/O sum[0]:cur[0], unzip sum[0]:cur[0]</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/mysql%20innodb%20buffer%20pool%20metrics.png"
                      alt="buffer pool"
                ></li>
<li><code>select * from information_schema.innodb_buffer_pool_stats</code> # can also show the buffer pool stats.</li>
<li><strong>buffer poll hit rate</strong> is the rate hit in memory not in disk, the higher the better</li>
<li><code>select * from information_schema.innodb_buffer_page_lru where compressed_size &lt;&gt; 0</code> # compressed lru page</li>
</ul>
</li>
<li><p><strong>redo log buffer</strong></p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;innodb_log_buffer_size&#x27;</span>;</span><br><span class="line"></span><br><span class="line">innodb_log_buffer_size	16777216</span><br></pre></td></tr></table></figure></div></li>
<li><p>three conditions that flush data into disk</p>
<ul>
<li>every 1s master thread trigger</li>
<li>every transaction</li>
<li>redo buffer free page less than 1&#x2F;2</li>
</ul>
</li>
<li><p>Dirty page checkout mechanization</p>
</li>
<li><p><strong>write-ahead-log</strong> write to log before write page</p>
</li>
<li><p>the problem to solve:</p>
<ol>
<li>reduce database recover time</li>
<li>flush data when buffer pool is full</li>
<li>refresh dirty page when redo log is out of work</li>
</ol>
</li>
<li><p>Insert buffer</p>
</li>
<li><p>primary key is the unique identification of the row, usually application insert rows based on auto-increased primary key.<br>  if we insert primary key that is random, we may not get sequence data in disk</p>
</li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>A look at InnoDB for Mysql 5.7</title>
    <url>/2017/12/11/database-mysql-2017-12-12-InnoDB5-7/</url>
    <content><![CDATA[<h3 id="InnoDB的优势"><a href="#InnoDB的优势" class="headerlink" title="InnoDB的优势"></a>InnoDB的优势</h3><ul>
<li>DML 遵循ACID</li>
<li>行级锁，使用MVCC保证读一致</li>
<li>使用主键索引管理磁盘上的数据，加快查找速度</li>
<li>使用外键维持数据的完整性</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ap-southeast-1.amazonaws.com/kopei-public/innodbHigh-level+Overview.png"
                      alt="key-feature"
                ></p>
<h3 id="InnoDB表-最佳实践"><a href="#InnoDB表-最佳实践" class="headerlink" title="InnoDB表 最佳实践"></a>InnoDB表 最佳实践</h3><ul>
<li>主键的设定：把查询用的最多的column， 并且不怎么改动的设成主键；如果没有可以设置自增列为主键。</li>
<li>如果是基于一个列进行多表联查，使用join. 并且把join的列设置成外键，数据类型也要一致。这么做是因为外键会给列加索引，外键也会把删除和更新传到相关表。</li>
<li>关闭autocommit(可能是log flush的影响，待查)</li>
<li>把一系列的DML语句放在一个事务中。</li>
<li>不要使用<code>lock tables</code>语句。可以使用<code>select .. for update</code> 只针对某些row锁定更新。</li>
<li>开启<strong>innodb_file_per_table</strong>， 这样表的数据和索引是单独文件存在。</li>
<li>根据需求，可以使用<code>ROW_FORMAT=COMPRESSED</code>来压缩数据。</li>
</ul>
<h3 id="InnoDB-和-ACID-模型"><a href="#InnoDB-和-ACID-模型" class="headerlink" title="InnoDB 和 ACID 模型"></a>InnoDB 和 ACID 模型</h3><ul>
<li>使用innodb, mysql将十分接近ACID模型，避免软硬件的失效带来的灾难。</li>
<li>ACID就不说了</li>
</ul>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><ul>
<li>innodb使用rollback segment的数据结构来管理版本信息。主要服务回退和一致性读。</li>
<li>innodb 会在每行后面加三个隐藏字段<ul>
<li>6B DB_TRX_ID 最新事务ID. 这个字段里面有个位标记行是否被删除</li>
<li>7B DB_ROLL_PTR roll pointer 指向rollback segment的undo log记录。 更新一条记录时，undo log 会记录如何回滚这个更新的记录。</li>
<li>6B DB_ROW_ID 行ID, 递增。如果聚簇索引是innodb自动生成的，那么索引里包含row id. 否则DB_ROW_ID不会再任何索引里出现。</li>
</ul>
</li>
<li>在rollback segment中的undo log 分为insert和update undo logs. insert undo log 在事务回滚时就不需要了，但是update undo log需要在MVVC保持consistent read后，才能丢弃。    </li>
<li>在innodb, delete sql不会立即删除物理数据；仅在update undo log被purge的时候才会删除行数据和对应的索引</li>
<li>purge是一个定时垃圾处理undo log的后台任务，可以有一个或多个线程。purge是滞后操作的，所以批量删除数据太多，可能引起rollback segment过大，这时可以增加线程<code>innodb_max_purge_lag</code></li>
<li><strong>多版本和二级索引</strong></li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB Buffer Pool for Mysql 5.7</title>
    <url>/2017/12/15/database-mysql-2017-12-16-innodb-5-7-buffer-pool/</url>
    <content><![CDATA[<h3 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h3><ul>
<li>内存池用page来分割，pages会连接成链表，方便管理。</li>
<li>内存池最小单位是page， 一个page默认是16KB. 一个page可以有一行以上数据， 如果只有一行，而且没有填满page，innodb会用指针类型的数据结构填满page。可以压缩数据让page包含更多行数据，对于Blob或者text类型的大column, 使用压缩技术innodb会单独存储这一列的数据，以便减少不必要的查询开销。</li>
<li>一般缓存池最多会占80%的物理内存，InnoDB使用变异的LRU算法，维持缓存中数据的热度。</li>
<li><code>select * from information_schema.innodb_buffer_page</code> 可以查看所有缓冲池的元信息，这个查询可能影响性能。</li>
</ul>
<h3 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h3><ul>
<li>change buffer 是一个特殊的数据结构，用于缓存那些辅助索引页的修改，而这些页又不在buffer pool中。由于辅助索引非唯一，insert,delete,update更改辅助索引页并不是按序进行的。所以需要先把他们缓存起来，当辅助索引读入buffer的时候，一并merge到buffer,这样减少了随机访问磁盘I&#x2F;O.</li>
<li>change buffer 包含insert buffer, delete buffer, purge buffer</li>
<li>change buffer 既是缓存，又是tablespace的一部分。</li>
<li><code>show variables like innodb_change_buffering</code> 这个变量可以设置inserts, deletes, purges,all,none.<ul>
<li><pre><code class="bash">none	Do not buffer any operations.
inserts	Buffer insert operations.
deletes	Buffer delete marking operations; strictly speaking, the writes that mark           index records for later deletion during a purge operation.
changes	Buffer inserts and delete-marking operations.
purges	Buffer the physical deletion operations that happen in the background.
all	The default. Buffer inserts, delete-marking operations, and purges.
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 下面这个状态可以看到具体change buffer操作次数，insert表示insert buffer, delete mark表示delete buffer, delete表示purge buffer;</span><br><span class="line">    ```sql</span><br><span class="line">  show engine innodb status;</span><br><span class="line">  -------------------------------------</span><br><span class="line">  INSERT BUFFER AND ADAPTIVE HASH INDEX</span><br><span class="line">  -------------------------------------</span><br><span class="line">  Ibuf: size 1, free list len 0, seg size 2, 0 merges</span><br><span class="line">  merged operations:</span><br><span class="line">   insert 0, delete mark 0, delete 0</span><br><span class="line">  discarded operations:</span><br><span class="line">   insert 0, delete mark 0, delete 0</span><br><span class="line">  Hash table size 34673, node heap has 0 buffer(s)</span><br><span class="line">  Hash table size 34673, node heap has 0 buffer(s)</span><br><span class="line">  Hash table size 34673, node heap has 0 buffer(s)</span><br><span class="line">  Hash table size 34673, node heap has 0 buffer(s)</span><br><span class="line">  Hash table size 34673, node heap has 1 buffer(s)</span><br><span class="line">  Hash table size 34673, node heap has 0 buffer(s)</span><br><span class="line">  Hash table size 34673, node heap has 0 buffer(s)</span><br><span class="line">  Hash table size 34673, node heap has 0 buffer(s)</span><br><span class="line">  0.00 hash searches/s, 0.00 non-hash searches/s</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
</li>
<li>查看IBUF_INDEX和IBUF_BITMAP占全部page的比例  <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> INFORMATION_SCHEMA.INNODB_BUFFER_PAGE</span><br><span class="line"><span class="keyword">WHERE</span> PAGE_TYPE <span class="keyword">LIKE</span> <span class="string">&#x27;IBUF%&#x27;</span>) <span class="keyword">AS</span> change_buffer_pages,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> INFORMATION_SCHEMA.INNODB_BUFFER_PAGE) <span class="keyword">AS</span> total_pages,</span><br><span class="line">(<span class="keyword">SELECT</span> ((change_buffer_pages<span class="operator">/</span>total_pages)<span class="operator">*</span><span class="number">100</span>))</span><br><span class="line"><span class="keyword">AS</span> change_buffer_page_percentage;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">change_buffer_pages | total_pages | change_buffer_page_percentage|</span><br><span class="line">--- | --- | ---</span><br><span class="line">21 | 8191 | 0.2564 |</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 5.7 性能调优</title>
    <url>/2018/06/26/database-mysql-2018-06-27-mysql5-7%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用<code>new relic</code>监控发现有个sql update花了30s, 于是开启了数据库优化的路径…</p>
<h3 id="优化原则"><a href="#优化原则" class="headerlink" title="优化原则"></a>优化原则</h3><p>数据库性能优化有两个层面: 数据库本身层面和硬件层面. 两个层面的优化原则各不相同</p>
<ol>
<li>数据库本身优化原则:</li>
</ol>
<ul>
<li>表结构是否合理? 更新较多的应用表设计时需要设置多表但是较少的列. 查询较多的应用应该设置较少的表但是列较多.</li>
<li>索引是否设置合理?</li>
<li>存储引擎是否选择合理</li>
<li>列的类型是否选择合理, 较少的磁盘需求意味着较少的I&#x2F;O.</li>
<li>并发控制的锁策略是否合理?</li>
<li>用于缓存的内存是否设置合理?</li>
</ul>
<ol start="2">
<li>硬件优化原则:</li>
</ol>
<h3 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h3><p>优化SQL时主要需要考虑的问题有:</p>
<ul>
<li>是否在where语句后面的列是否加了索引, mysql5.7是会给外键自动加索引的,但是在使用join或外键查询时还是最好explain一下,看看执行计划.</li>
<li>分步调试查询的每一部分.</li>
<li>对于大表, 尽量减少全表查询</li>
<li><code>ANALYZE TABLE</code>, 尽量保持<code>statistics table</code>统计表更新, 让优化器使用这些统计信息去构建更高效的执行计划.</li>
<li>需要学习调优技巧, 如索引技巧, 各种存储引擎的参数配置.</li>
</ul>
<h3 id="开启慢sql查询日志"><a href="#开启慢sql查询日志" class="headerlink" title="开启慢sql查询日志"></a>开启慢sql查询日志</h3><p>mysql可以开启慢sql查询的log, 只要sql执行超过<code>long_query_time</code>时间, 同时影响超过<code>min_examined_row_limit</code>行数, 这个慢sql就会被记录. </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;long_query_time&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span>  <span class="operator">/</span><span class="operator">/</span>对于文件精细度是毫秒, 对于表精细度是秒</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;min_examined_row_limit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name          <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> min_examined_row_limit <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br></pre></td></tr></table></figure></div>
<p>默认情况下, admin的管理查询语句是不会被记录在log, 但是可以被<code>log_slow_admin_statements</code>和<code>log_queries_not_using_indexes</code>修改配置.<br>慢log记录的执行时间是从获取锁的时间开始了, 直到运行完语句然后释放所有锁.所以获取锁的执行时间是不会被记录.<br>默认情况下, 慢查询log会记录所有使用非索引查询的慢语句, 这可能会导致log变得很大, 所以可以设置<code>log_queries_not_using_indexes</code>忽略这些使用非索引查询的语句. 或者使用<code>log_throttle_queries_not_using_indexes</code>来限制每分钟记录多少条非索引慢查询记录. mysql server使用如下控制参数顺序来控制一个查询语句是否写入慢查询log:</p>
<ul>
<li>是否是管理sql语句, 或者开启了<code>log_slow_admin_statements</code></li>
<li><code>long_query_time</code>必须被满足,或者<code>log_queries_not_using_indexes</code>被使能, 非索引查询语句也会被写入log</li>
<li>满足<code>min_examined_row_limit</code>行数</li>
<li>那些满足<code>log_throttle_queries_not_using_indexes</code>的查询<br><code>log_timestamps</code>控制了写入慢查询log<strong>文件</strong>的时区, 但是不会影响通用查询log和写入数据库的log.<br>在cache中满足慢语句的sql是不会写入log, 默认情况下复制的从机也不会记录log.<br>收集完log后, 可以使用<a class="link"   href="https://dev.mysql.com/doc/refman/5.7/en/mysqldumpslow.html" >mysqldumpslow <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来查看.<br>所以为了开启慢查询log, 在my.cnf设置如下代码:<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"><span class="string">slow_query_log</span>                  <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">slow_query_log_file</span>             <span class="string">=</span> <span class="string">/var/log/mysql/slow.log</span></span><br><span class="line"><span class="string">long_query_time</span>                 <span class="string">=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="增加最大客户端连接数"><a href="#增加最大客户端连接数" class="headerlink" title="增加最大客户端连接数"></a>增加最大客户端连接数</h3><p><code>max_connections</code>指定允许的同时连接客户端, 默认是151(实际最大连接数会+1, 多出来的是给admin使用). 改变这个值会影响mysqld的文件描述符的需求. 如果所需的fd不能满足,server会自动减少这个值.所以一味增大连接数但是不改变<code>table_open_cache</code>可能不能提升性能, 同时还需要确保<code>table_open_cache</code>的值能被操作系统满足.<br><strong>关于mysql如何打开和关闭表</strong> 为了提升性能, 每一个client session会单独打开一个table. <code>table_open_cache</code>和<code>max_connections</code>系统变量决定了最大数量文件可以被打开. 比如如果有200个并发连接, 每个连接最大的表join是N, 那么起码应该设置<code>table_open_cache</code>为200*N + 额外的一定数量. 那么什么时候mysql会关闭不使用的表呢? 会有如下情况表会被关闭:</p>
<ul>
<li>cache满了, 新的线程想要打开新的table但是不在cache中</li>
<li>当前cache中条目超过了<code>table_open_cache</code>设置, 不再被线程使用table将会被关闭.</li>
<li>使用flush的命名. 可以是<code>flush table</code>&#x2F;<code>mysqladmin flushtables</code>&#x2F;<code>mysqladmin refresh</code>.<br>如果cache满了, mysql怎么分配的table cache呢? 这时候会分配临时cache, 具体是怎么做的还未知.<br>查询当前表打开的状态, <code>open_tables</code>和<code>opened_tables</code>, 如果<code>opened_tables &gt; table_open_cache</code>应该考虑增大<code>table_open_cache</code>.<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;open%tables%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Open_tables   <span class="operator">|</span> <span class="number">1352</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opened_tables <span class="operator">|</span> <span class="number">1457</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;table_open_cache&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> table_open_cache <span class="operator">|</span> <span class="number">2000</span>  <span class="operator">|</span>  </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="增加线程缓存"><a href="#增加线程缓存" class="headerlink" title="增加线程缓存"></a>增加线程缓存</h3><p>mysql可以缓存线程, 用于下次用户连接. <code>thread_cache_size</code>默认是-1, 通过<code>8 + (max_connections / 100)</code>计算出. 如果<code>threads_created</code>&#x2F;<code>connections</code>过大, 可以考虑增大<code>thread_cache_size</code>.</p>
<h3 id="通用和结构化系统变量"><a href="#通用和结构化系统变量" class="headerlink" title="通用和结构化系统变量"></a>通用和结构化系统变量</h3><p>mysql支持一种结构化的变量类型, 用于控制key cache的参数. 结构化的系统变量有两个特点:</p>
<ul>
<li>它的值由一些系统的参数组成</li>
<li>每一个结构化变量类型都可能有多个实例, 每个实例有不同的名称和不同的资源.<br>一个结构化的key cache变量有如下组件组成, 这些参数可能和MyISAM密切相关:</li>
<li>key_buffer_size</li>
<li>key_cache_block_size</li>
<li>key_cache_division_limit</li>
<li>key_cache_age_threshold</li>
</ul>
<h3 id="配置Innodb-buffer-pool-size"><a href="#配置Innodb-buffer-pool-size" class="headerlink" title="配置Innodb_buffer_pool_size"></a>配置Innodb_buffer_pool_size</h3>]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 索引总结</title>
    <url>/2019/06/29/database-mysql-2019-06-29-mysql-index/</url>
    <content><![CDATA[<h2 id="mysql索引的作用和意义"><a href="#mysql索引的作用和意义" class="headerlink" title="mysql索引的作用和意义"></a>mysql索引的作用和意义</h2><p>当我们使用sql语句查询时往往要加where, 使用索引我们可以快速查找到满足where条件的行. </p>
<h3 id="mysql如何使用索引"><a href="#mysql如何使用索引" class="headerlink" title="mysql如何使用索引"></a>mysql如何使用索引</h3><p>mysql大部分索引使用B-tree, 例如(PRIMARY KEY, UNIQUE, INDEX, FULLTEXT); 空间数据类型使用R-tree; 内存表还支持hash索引, InnoDB使用反向列表(inverted list)作为FULLTEXT的索引.</p>
<p>mysql会在做如下操作时用到索引:</p>
<ul>
<li>使用索引快速找到满足where条件语句的行.</li>
<li>如果在查找时有多个索引选择, mysql使用那个能找到最少数据行的索引.</li>
<li>如果使用多列索引, 最左边的列将被用于优化.</li>
<li>在执行join其它表的时候</li>
<li>计算有索引的列min(),max()时</li>
<li>当使用最左边的索引排序和分组表时</li>
</ul>
<h3 id="如何使用主键索引"><a href="#如何使用主键索引" class="headerlink" title="如何使用主键索引"></a>如何使用主键索引</h3><p>作为查询条件使用最多的列可以设置为主键(Primary key). 主键有附属索引, 用于提升查询性能.主键是不能为空的,所以性能也比较好. 如果表比较大, 同时又不知道选哪个列作为索引时, 可以创建一个自增的列作为索引. 用这个列作为其他表的外键方便join.</p>
<h3 id="如何使用外键优化表查询"><a href="#如何使用外键优化表查询" class="headerlink" title="如何使用外键优化表查询"></a>如何使用外键优化表查询</h3><p>有时候如果有一个张大表, 可以把这张大表分成若干小表, 把不太常用的字段放在一起, 通过外键和主表关联, 这样子表既有主键用于快速查询又可以做join操作. 查询也可能使用更少的内存和IO, 因为相应的数据列都已经物理上在一起了.</p>
<h3 id="普通列索引"><a href="#普通列索引" class="headerlink" title="普通列索引"></a>普通列索引</h3><p>最常见的索引是单列索引, mysql把列的值复制一份在数据结构, 用于快速查询.大部分数据结构采用B-tree, 可以快速定位到单个值, 一组值或值的范围. 在sql where语句对应<code>=, &gt;, &lt;=, BETWEEN, IN</code>等等.</p>
<p>每个存储引擎的定义了每张表的索引最大值和最大长度. 基本上, 所有存储引擎至少支持16个索引和单个索引256字节以上.</p>
<h4 id="TEXT-x2F-BLOB的索引"><a href="#TEXT-x2F-BLOB的索引" class="headerlink" title="TEXT&#x2F;BLOB的索引"></a>TEXT&#x2F;BLOB的索引</h4><p><code>Index Prefixes</code>指在文本类型上创建索引时, 可以指定这个字段的开头一部分N个字节作为索引, 这样索引的长度将被限制, 特别适用于TEXT&#x2F;BLOB这样没有长度的字段上.</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (blob_col <span class="type">BLOB</span>, index(blob_col(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure></div>
<p>如果一个查询超出<code>index prefixes</code>的长度, 超出的部分将会被排除.</p>
<h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><p>mysql可以在多个列上创建索引. 一个索引最多可以有16个列组成. 使用多列索引的好处是你只需要创建一个索引,就可以享受到多个查询条件快速命中的优点.<br>使用多列作为索引查询时, mysql可以检查索引中的所有列, 也可以只检查第一个列, 头二个列, 或头三个列.所以正确的定义复合索引的顺序可以加速好几种情况的查询.<br>一个多列索引可以被当成是一个排序的数组, 索引的值是多个列的值<code>CONCAT</code>后的hash, 等同于没有多列索引时, 自己创建一个hash几个列值的字段, 这样就可以快速查询:</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> hash_col<span class="operator">=</span>MD5(CONCAT(val1, val2))</span><br><span class="line"><span class="keyword">and</span> col1<span class="operator">=</span>val1 <span class="keyword">and</span> col2<span class="operator">=</span>val2;</span><br></pre></td></tr></table></figure></div>

<p>假设有如下表:</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  last_name <span class="type">char</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  first_name <span class="type">char</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id),</span><br><span class="line">  index name (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p><code>name</code>索引是<code>last_name</code>和<code>first_name</code>的组合索引. 所以各种<code>last_name</code>和<code>first_name</code>的组合查询都可以使用到索引. 但是只有<code>last_name</code>可以作为单独查询条件, 因为只有最左边的索引值才能被优化器(<code>optimizer</code>)使用. 索引如下都是会使用到索引:</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Widenius&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Widenius&#x27;</span> <span class="keyword">and</span> first_name<span class="operator">=</span><span class="string">&#x27;Micheal&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Widenius&#x27;</span> <span class="keyword">and</span> first_name <span class="operator">&gt;=</span> <span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> first_name <span class="operator">&lt;</span> <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Widenius&#x27;</span> <span class="keyword">and</span> (first_name <span class="operator">=</span> <span class="string">&#x27;Micheal&#x27;</span> <span class="keyword">or</span> first_name<span class="operator">=</span><span class="string">&#x27;Monty&#x27;</span>);</span><br></pre></td></tr></table></figure></div>
<p>但是如下查询是不会使用到<code>name</code>索引的:</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> first_name<span class="operator">=</span><span class="string">&#x27;Micheal&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> last_name<span class="operator">=</span><span class="string">&#x27;Widenius&#x27;</span> <span class="keyword">or</span> first_name <span class="operator">=</span> <span class="string">&#x27;Micheal&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="单列索引和多列索引的区别"><a href="#单列索引和多列索引的区别" class="headerlink" title="单列索引和多列索引的区别"></a>单列索引和多列索引的区别</h4><p>假设有如下查询:</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> col1<span class="operator">=</span>val1 <span class="keyword">and</span> col2<span class="operator">=</span>val2;</span><br></pre></td></tr></table></figure></div>
<p>如果有一个由col1和col2组成的多列索引, 那么满足条件的行会快速被找到. 那么如果col1和col2分别采用单列索引那么优化器将会尝试合并索引,或者使用单个索引, 具体使用哪个索引取决于哪个索引能够排除更多的行.</p>
<h4 id="多列索引最左列优化"><a href="#多列索引最左列优化" class="headerlink" title="多列索引最左列优化"></a>多列索引最左列优化</h4><p>多列索引中最左列会被优化器用于快速查找行, 假设有一个三列索引(col1, col2, col3), 那么(col1), (col1, col2)和(col1, col2, col3)这样的查询组合将会使用到索引.</p>
<h3 id="检查索引的使用正确性"><a href="#检查索引的使用正确性" class="headerlink" title="检查索引的使用正确性"></a>检查索引的使用正确性</h3><p>使用<code>explain</code>查看sql语句的执行计划, 可以了解索引是否被正确使用. 如果怀疑优化器没有按最佳的执行计划执行语句, 可以<code>ANALYZE TABLE</code>更新表的统计.</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph Thinking</title>
    <url>/2021/03/07/database-neo4j-2021-03-08-graph-thinking/</url>
    <content><![CDATA[<h2 id="When-to-start-use-graph"><a href="#When-to-start-use-graph" class="headerlink" title="When to start use graph?"></a>When to start use graph?</h2><p>当我们需要使用图数据库时, 需要考虑三个问题:</p>
<ul>
<li>图数据库是否比关系型数据库更优?</li>
<li>如何把我的数据看做图?</li>
<li>如何给图的原型结构建模?</li>
</ul>
<h3 id="关系vs图形"><a href="#关系vs图形" class="headerlink" title="关系vs图形"></a>关系vs图形</h3><p>从存储和数据检索的角度看, 关系型数据库将数据以三范式的形式存储, 将真实世界的实体与表映射; 而图数据库关注存储和检索的关系, 这些关系代表了真实世界实体的连接, 比如: 一个人认识另一个人, 人住在什么地方, 人拥有东西等等. 其实两个系统都可以表示实体和关系, 但是关注点和优化点不同. 他们底层的数学算法也不同, 一个是关系型代数, 一个是图论.</p>
<h3 id="图论的思想"><a href="#图论的思想" class="headerlink" title="图论的思想?"></a>图论的思想?</h3><p>图是由节点(Vertex)和边(Edge)组成的，Vertex代表数据实体，Edge代表实体之间的关系, edge是有方向的(单项与双向)。如果把节点当作名词，边当作动词，那么它们分别都有形容词和副词来修饰它们，即属性。</p>
<ul>
<li><strong>Adjacency</strong>: 如果两个节点通过边相连，那么它们是临近的。</li>
<li><strong>Neighborhood</strong>: 对于节点v, 所有与之相连的节点形成节点v的邻居， 称N(v).</li>
<li><strong>Distance</strong>: 从一个节点走到另一个节点所需的边数称为距离。</li>
<li><strong>Degree</strong>: 程度描述了一个节点链接的边数。图论中，只有程度为1的节点成为叶。如果有很高的程度（&gt;100000edges)称为超级节点。</li>
<li><strong>Multiplicity</strong>: 描述节点间有不同属性的edges.</li>
</ul>
<h3 id="为什么不直接用关系型数据库"><a href="#为什么不直接用关系型数据库" class="headerlink" title="为什么不直接用关系型数据库?"></a>为什么不直接用关系型数据库?</h3><p>直接回答：当需要突出数据的关系时使用图数据库, 尤其数据的结构复杂时。<br><br>图数据建模和关系型数据建模很相似，主要的区别在于考虑实体之间的关系。图技术突出了关系优先的数据结构。在物理存储方面，图数据库直接存储概念数据模型(Conceptual data model), 不像关系型数据库做三范式处理。具体处理上，图数据库把节点的边直接组成数据结构存储在一起，这样可以方便地寻址某个节点的关系。<br>当新增一个需求时, 关系型数据库往往需要改变数据结构, 增加表, 新增sql语句. 而图数据库只需要增大原型(schema)和插入数据.</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>graph database</tag>
      </tags>
  </entry>
</search>
